var eb = Object.defineProperty;
var rb = (r, e, t) => e in r ? eb(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var ct = (r, e, t) => (rb(r, typeof e != "symbol" ? e + "" : e, t), t);
import { openBlock as Vt, createElementBlock as Qt, createElementVNode as rn, withDirectives as tb, Fragment as Rl, renderList as Il, toDisplayString as Ji, vModelSelect as nb, createCommentVNode as nu, normalizeClass as Pl, withModifiers as ab, pushScopeId as ib, popScopeId as ob, reactive as sb, createBlock as ub } from "vue";
var Qr = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class cb {
  constructor(e) {
    this.messageBus = e;
  }
  get id() {
    if (!this.messageBus.userId)
      throw Error("Unable to get user ID: not ready");
    return this.messageBus.userId;
  }
  getSelection() {
    return Qr(this, void 0, void 0, function* () {
      const { selection: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_SELECTION", {});
      return e;
    });
  }
  select(e, t) {
    return Qr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_PLAYER_SELECT", { items: e, replace: t });
    });
  }
  deselect(e) {
    return Qr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_PLAYER_DESELECT", { items: e });
    });
  }
  getName() {
    return Qr(this, void 0, void 0, function* () {
      const { name: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_NAME", {});
      return e;
    });
  }
  setName(e) {
    return Qr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_PLAYER_SET_NAME", { name: e });
    });
  }
  getColor() {
    return Qr(this, void 0, void 0, function* () {
      const { color: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_COLOR", {});
      return e;
    });
  }
  setColor(e) {
    return Qr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_PLAYER_SET_COLOR", { color: e });
    });
  }
  getSyncView() {
    return Qr(this, void 0, void 0, function* () {
      const { syncView: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_SYNC_VIEW", {});
      return e;
    });
  }
  setSyncView(e) {
    return Qr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_PLAYER_SET_SYNC_VIEW", { syncView: e });
    });
  }
  getId() {
    return Qr(this, void 0, void 0, function* () {
      const { id: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_ID", {});
      return e;
    });
  }
  getRole() {
    return Qr(this, void 0, void 0, function* () {
      const { role: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_ROLE", {});
      return e;
    });
  }
  getMetadata() {
    return Qr(this, void 0, void 0, function* () {
      const { metadata: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_METADATA", {});
      return e;
    });
  }
  setMetadata(e) {
    return Qr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_PLAYER_SET_METADATA", { update: e });
    });
  }
  hasPermission(e) {
    return Qr(this, void 0, void 0, function* () {
      if ((yield this.getRole()) === "GM")
        return !0;
      const { permissions: n } = yield this.messageBus.sendAsync("OBR_ROOM_GET_PERMISSIONS", {});
      return n.indexOf(e) > -1;
    });
  }
  getConnectionId() {
    return Qr(this, void 0, void 0, function* () {
      const { connectionId: e } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_CONNECTION_ID", {});
      return e;
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.player);
    };
    return this.messageBus.send("OBR_PLAYER_SUBSCRIBE", {}), this.messageBus.on("OBR_PLAYER_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_PLAYER_UNSUBSCRIBE", {}), this.messageBus.off("OBR_PLAYER_EVENT_CHANGE", t);
    };
  }
}
var Ot = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class lb {
  constructor(e) {
    this.messageBus = e;
  }
  reset() {
    return Ot(this, void 0, void 0, function* () {
      const { transform: e } = yield this.messageBus.sendAsync("OBR_VIEWPORT_RESET", {});
      return e;
    });
  }
  animateTo(e) {
    return Ot(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_VIEWPORT_ANIMATE_TO", { transform: e });
    });
  }
  animateToBounds(e) {
    return Ot(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_VIEWPORT_ANIMATE_TO_BOUNDS", {
        bounds: e
      });
    });
  }
  getPosition() {
    return Ot(this, void 0, void 0, function* () {
      const { position: e } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_POSITION", {});
      return e;
    });
  }
  setPosition(e) {
    return Ot(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_VIEWPORT_SET_POSITION", { position: e });
    });
  }
  getScale() {
    return Ot(this, void 0, void 0, function* () {
      const { scale: e } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_SCALE", {});
      return e;
    });
  }
  setScale(e) {
    return Ot(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_VIEWPORT_SET_SCALE", { scale: e });
    });
  }
  getWidth() {
    return Ot(this, void 0, void 0, function* () {
      const { width: e } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_WIDTH", {});
      return e;
    });
  }
  getHeight() {
    return Ot(this, void 0, void 0, function* () {
      const { height: e } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_HEIGHT", {});
      return e;
    });
  }
  transformPoint(e) {
    return Ot(this, void 0, void 0, function* () {
      const { point: t } = yield this.messageBus.sendAsync("OBR_VIEWPORT_TRANSFORM_POINT", { point: e });
      return t;
    });
  }
  inverseTransformPoint(e) {
    return Ot(this, void 0, void 0, function* () {
      const { point: t } = yield this.messageBus.sendAsync("OBR_VIEWPORT_INVERSE_TRANSFORM_POINT", { point: e });
      return t;
    });
  }
}
function fb(r) {
  return typeof r.id == "string";
}
var Xn = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Di(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
function mb(r) {
  if (r.__esModule)
    return r;
  var e = r.default;
  if (typeof e == "function") {
    var t = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else
    t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(r).forEach(function(n) {
    var a = Object.getOwnPropertyDescriptor(r, n);
    Object.defineProperty(t, n, a.get ? a : {
      enumerable: !0,
      get: function() {
        return r[n];
      }
    });
  }), t;
}
var yc = { exports: {} }, Ca = typeof Reflect == "object" ? Reflect : null, ql = Ca && typeof Ca.apply == "function" ? Ca.apply : function(e, t, n) {
  return Function.prototype.apply.call(e, t, n);
}, Ao;
Ca && typeof Ca.ownKeys == "function" ? Ao = Ca.ownKeys : Object.getOwnPropertySymbols ? Ao = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : Ao = function(e) {
  return Object.getOwnPropertyNames(e);
};
function vb(r) {
  console && console.warn && console.warn(r);
}
var th = Number.isNaN || function(e) {
  return e !== e;
};
function yr() {
  yr.init.call(this);
}
yc.exports = yr;
yc.exports.once = gb;
yr.EventEmitter = yr;
yr.prototype._events = void 0;
yr.prototype._eventsCount = 0;
yr.prototype._maxListeners = void 0;
var Ll = 10;
function rs(r) {
  if (typeof r != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof r);
}
Object.defineProperty(yr, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return Ll;
  },
  set: function(r) {
    if (typeof r != "number" || r < 0 || th(r))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + r + ".");
    Ll = r;
  }
});
yr.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
yr.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || th(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function nh(r) {
  return r._maxListeners === void 0 ? yr.defaultMaxListeners : r._maxListeners;
}
yr.prototype.getMaxListeners = function() {
  return nh(this);
};
yr.prototype.emit = function(e) {
  for (var t = [], n = 1; n < arguments.length; n++)
    t.push(arguments[n]);
  var a = e === "error", i = this._events;
  if (i !== void 0)
    a = a && i.error === void 0;
  else if (!a)
    return !1;
  if (a) {
    var o;
    if (t.length > 0 && (o = t[0]), o instanceof Error)
      throw o;
    var f = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
    throw f.context = o, f;
  }
  var l = i[e];
  if (l === void 0)
    return !1;
  if (typeof l == "function")
    ql(l, this, t);
  else
    for (var u = l.length, s = uh(l, u), n = 0; n < u; ++n)
      ql(s[n], this, t);
  return !0;
};
function ah(r, e, t, n) {
  var a, i, o;
  if (rs(t), i = r._events, i === void 0 ? (i = r._events = /* @__PURE__ */ Object.create(null), r._eventsCount = 0) : (i.newListener !== void 0 && (r.emit(
    "newListener",
    e,
    t.listener ? t.listener : t
  ), i = r._events), o = i[e]), o === void 0)
    o = i[e] = t, ++r._eventsCount;
  else if (typeof o == "function" ? o = i[e] = n ? [t, o] : [o, t] : n ? o.unshift(t) : o.push(t), a = nh(r), a > 0 && o.length > a && !o.warned) {
    o.warned = !0;
    var f = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    f.name = "MaxListenersExceededWarning", f.emitter = r, f.type = e, f.count = o.length, vb(f);
  }
  return r;
}
yr.prototype.addListener = function(e, t) {
  return ah(this, e, t, !1);
};
yr.prototype.on = yr.prototype.addListener;
yr.prototype.prependListener = function(e, t) {
  return ah(this, e, t, !0);
};
function pb() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function ih(r, e, t) {
  var n = { fired: !1, wrapFn: void 0, target: r, type: e, listener: t }, a = pb.bind(n);
  return a.listener = t, n.wrapFn = a, a;
}
yr.prototype.once = function(e, t) {
  return rs(t), this.on(e, ih(this, e, t)), this;
};
yr.prototype.prependOnceListener = function(e, t) {
  return rs(t), this.prependListener(e, ih(this, e, t)), this;
};
yr.prototype.removeListener = function(e, t) {
  var n, a, i, o, f;
  if (rs(t), a = this._events, a === void 0)
    return this;
  if (n = a[e], n === void 0)
    return this;
  if (n === t || n.listener === t)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete a[e], a.removeListener && this.emit("removeListener", e, n.listener || t));
  else if (typeof n != "function") {
    for (i = -1, o = n.length - 1; o >= 0; o--)
      if (n[o] === t || n[o].listener === t) {
        f = n[o].listener, i = o;
        break;
      }
    if (i < 0)
      return this;
    i === 0 ? n.shift() : db(n, i), n.length === 1 && (a[e] = n[0]), a.removeListener !== void 0 && this.emit("removeListener", e, f || t);
  }
  return this;
};
yr.prototype.off = yr.prototype.removeListener;
yr.prototype.removeAllListeners = function(e) {
  var t, n, a;
  if (n = this._events, n === void 0)
    return this;
  if (n.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete n[e]), this;
  if (arguments.length === 0) {
    var i = Object.keys(n), o;
    for (a = 0; a < i.length; ++a)
      o = i[a], o !== "removeListener" && this.removeAllListeners(o);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (t = n[e], typeof t == "function")
    this.removeListener(e, t);
  else if (t !== void 0)
    for (a = t.length - 1; a >= 0; a--)
      this.removeListener(e, t[a]);
  return this;
};
function oh(r, e, t) {
  var n = r._events;
  if (n === void 0)
    return [];
  var a = n[e];
  return a === void 0 ? [] : typeof a == "function" ? t ? [a.listener || a] : [a] : t ? hb(a) : uh(a, a.length);
}
yr.prototype.listeners = function(e) {
  return oh(this, e, !0);
};
yr.prototype.rawListeners = function(e) {
  return oh(this, e, !1);
};
yr.listenerCount = function(r, e) {
  return typeof r.listenerCount == "function" ? r.listenerCount(e) : sh.call(r, e);
};
yr.prototype.listenerCount = sh;
function sh(r) {
  var e = this._events;
  if (e !== void 0) {
    var t = e[r];
    if (typeof t == "function")
      return 1;
    if (t !== void 0)
      return t.length;
  }
  return 0;
}
yr.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Ao(this._events) : [];
};
function uh(r, e) {
  for (var t = new Array(e), n = 0; n < e; ++n)
    t[n] = r[n];
  return t;
}
function db(r, e) {
  for (; e + 1 < r.length; e++)
    r[e] = r[e + 1];
  r.pop();
}
function hb(r) {
  for (var e = new Array(r.length), t = 0; t < e.length; ++t)
    e[t] = r[t].listener || r[t];
  return e;
}
function gb(r, e) {
  return new Promise(function(t, n) {
    function a(o) {
      r.removeListener(e, i), n(o);
    }
    function i() {
      typeof r.removeListener == "function" && r.removeListener("error", a), t([].slice.call(arguments));
    }
    ch(r, e, i, { once: !0 }), e !== "error" && yb(r, a, { once: !0 });
  });
}
function yb(r, e, t) {
  typeof r.on == "function" && ch(r, "error", e, t);
}
function ch(r, e, t, n) {
  if (typeof r.on == "function")
    n.once ? r.once(e, t) : r.on(e, t);
  else if (typeof r.addEventListener == "function")
    r.addEventListener(e, function a(i) {
      n.once && r.removeEventListener(e, a), t(i);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof r);
}
var bb = yc.exports;
let Xi;
const xb = new Uint8Array(16);
function wb() {
  if (!Xi && (Xi = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !Xi))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return Xi(xb);
}
const Lr = [];
for (let r = 0; r < 256; ++r)
  Lr.push((r + 256).toString(16).slice(1));
function Nb(r, e = 0) {
  return Lr[r[e + 0]] + Lr[r[e + 1]] + Lr[r[e + 2]] + Lr[r[e + 3]] + "-" + Lr[r[e + 4]] + Lr[r[e + 5]] + "-" + Lr[r[e + 6]] + Lr[r[e + 7]] + "-" + Lr[r[e + 8]] + Lr[r[e + 9]] + "-" + Lr[r[e + 10]] + Lr[r[e + 11]] + Lr[r[e + 12]] + Lr[r[e + 13]] + Lr[r[e + 14]] + Lr[r[e + 15]];
}
const Ab = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), zl = {
  randomUUID: Ab
};
function Eb(r, e, t) {
  if (zl.randomUUID && !e && !r)
    return zl.randomUUID();
  r = r || {};
  const n = r.random || (r.rng || wb)();
  if (n[6] = n[6] & 15 | 64, n[8] = n[8] & 63 | 128, e) {
    t = t || 0;
    for (let a = 0; a < 16; ++a)
      e[t + a] = n[a];
    return e;
  }
  return Nb(n);
}
class Db extends bb.EventEmitter {
  constructor(e, t) {
    super(), this.ready = !1, this.userId = null, this.ref = null, this.handleMessage = (n) => {
      const a = n.data;
      if (n.origin === this.targetOrigin && fb(a)) {
        if (a.id === "OBR_READY") {
          this.ready = !0;
          const i = a.data;
          this.ref = i.ref, this.userId = i.userId;
        }
        this.emit(a.id, a.data);
      }
    }, this.send = (n, a, i) => {
      var o;
      if (!this.ref)
        throw Error("Unable to send message: not ready");
      (o = window.parent) === null || o === void 0 || o.postMessage({
        id: n,
        data: a,
        ref: this.ref,
        nonce: i
      }, this.targetOrigin);
    }, this.sendAsync = (n, a, i = 5e3) => {
      const o = `_${Eb()}`;
      return this.send(n, a, o), Promise.race([
        new Promise((f, l) => {
          const u = this;
          function s(m) {
            u.off(`${n}_RESPONSE${o}`, s), u.off(`${n}_ERROR${o}`, c), f(m);
          }
          function c(m) {
            u.off(`${n}_RESPONSE${o}`, s), u.off(`${n}_ERROR${o}`, c), l(m);
          }
          this.on(`${n}_RESPONSE${o}`, s), this.on(`${n}_ERROR${o}`, c);
        }),
        ...i > 0 ? [
          new Promise((f, l) => window.setTimeout(() => l(new Error(`Message ${n} took longer than ${i}ms to get a result`)), i))
        ] : []
      ]);
    }, this.roomId = t, this.targetOrigin = e, window.addEventListener("message", this.handleMessage), this.setMaxListeners(100);
  }
  destroy() {
    window.removeEventListener("message", this.handleMessage);
  }
}
var Ul = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Sb {
  constructor(e) {
    this.messageBus = e;
  }
  show(e, t) {
    return Ul(this, void 0, void 0, function* () {
      const { id: n } = yield this.messageBus.sendAsync("OBR_NOTIFICATION_SHOW", { message: e, variant: t });
      return n;
    });
  }
  close(e) {
    return Ul(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_NOTIFICATION_CLOSE", { id: e });
    });
  }
}
var pa = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Cb {
  constructor(e) {
    this.messageBus = e;
  }
  getColor() {
    return pa(this, void 0, void 0, function* () {
      const { color: e } = yield this.messageBus.sendAsync("OBR_SCENE_FOG_GET_COLOR", {});
      return e;
    });
  }
  setColor(e) {
    return pa(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_FOG_SET_COLOR", { color: e });
    });
  }
  getStrokeWidth() {
    return pa(this, void 0, void 0, function* () {
      const { strokeWidth: e } = yield this.messageBus.sendAsync("OBR_SCENE_FOG_GET_STROKE_WIDTH", {});
      return e;
    });
  }
  setStrokeWidth(e) {
    return pa(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_FOG_SET_STROKE_WIDTH", {
        strokeWidth: e
      });
    });
  }
  getFilled() {
    return pa(this, void 0, void 0, function* () {
      const { filled: e } = yield this.messageBus.sendAsync("OBR_SCENE_FOG_GET_FILLED", {});
      return e;
    });
  }
  setFilled(e) {
    return pa(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_FOG_SET_FILLED", { filled: e });
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.fog);
    };
    return this.messageBus.send("OBR_SCENE_FOG_SUBSCRIBE", {}), this.messageBus.on("OBR_SCENE_FOG_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_SCENE_FOG_UNSUBSCRIBE", {}), this.messageBus.off("OBR_SCENE_FOG_EVENT_CHANGE", t);
    };
  }
}
var jr = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Mb {
  constructor(e) {
    this.messageBus = e;
  }
  getDpi() {
    return jr(this, void 0, void 0, function* () {
      const { dpi: e } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_DPI", {});
      return e;
    });
  }
  getScale() {
    return jr(this, void 0, void 0, function* () {
      return yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_SCALE", {});
    });
  }
  setScale(e) {
    return jr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_SCALE", { scale: e });
    });
  }
  getColor() {
    return jr(this, void 0, void 0, function* () {
      const { color: e } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_COLOR", {});
      return e;
    });
  }
  setColor(e) {
    return jr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_COLOR", { color: e });
    });
  }
  getOpacity() {
    return jr(this, void 0, void 0, function* () {
      const { opacity: e } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_OPACITY", {});
      return e;
    });
  }
  setOpacity(e) {
    return jr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_OPACITY", { opacity: e });
    });
  }
  getType() {
    return jr(this, void 0, void 0, function* () {
      const { type: e } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_TYPE", {});
      return e;
    });
  }
  setType(e) {
    return jr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_TYPE", { type: e });
    });
  }
  getLineType() {
    return jr(this, void 0, void 0, function* () {
      const { lineType: e } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_LINE_TYPE", {});
      return e;
    });
  }
  setLineType(e) {
    return jr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_LINE_TYPE", {
        lineType: e
      });
    });
  }
  getMeasurement() {
    return jr(this, void 0, void 0, function* () {
      const { measurement: e } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_MEASUREMENT", {});
      return e;
    });
  }
  setMeasurement(e) {
    return jr(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_MEASUREMENT", {
        measurement: e
      });
    });
  }
  snapPosition(e, t, n, a) {
    return jr(this, void 0, void 0, function* () {
      const { position: i } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_SNAP_POSITION", {
        position: e,
        snappingSensitivity: t,
        useCorners: n,
        useCenter: a
      });
      return i;
    });
  }
  getDistance(e, t) {
    return jr(this, void 0, void 0, function* () {
      const { distance: n } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_DISTANCE", { from: e, to: t });
      return n;
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.grid);
    };
    return this.messageBus.send("OBR_SCENE_GRID_SUBSCRIBE", {}), this.messageBus.on("OBR_SCENE_GRID_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_SCENE_GRID_UNSUBSCRIBE", {}), this.messageBus.off("OBR_SCENE_GRID_EVENT_CHANGE", t);
    };
  }
}
var Ki = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Ob {
  constructor(e) {
    this.messageBus = e;
  }
  undo() {
    return Ki(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_HISTORY_UNDO", {});
    });
  }
  redo() {
    return Ki(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_HISTORY_REDO", {});
    });
  }
  canUndo() {
    return Ki(this, void 0, void 0, function* () {
      const { canUndo: e } = yield this.messageBus.sendAsync("OBR_SCENE_HISTORY_CAN_UNDO", {});
      return e;
    });
  }
  canRedo() {
    return Ki(this, void 0, void 0, function* () {
      const { canRedo: e } = yield this.messageBus.sendAsync("OBR_SCENE_HISTORY_CAN_REDO", {});
      return e;
    });
  }
}
function Sr(r) {
  for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
    t[n - 1] = arguments[n];
  if (process.env.NODE_ENV !== "production") {
    var a = Pb[r], i = a ? typeof a == "function" ? a.apply(null, t) : a : "unknown error nr: " + r;
    throw Error("[Immer] " + i);
  }
  throw Error("[Immer] minified error nr: " + r + (t.length ? " " + t.map(function(o) {
    return "'" + o + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function Zn(r) {
  return !!r && !!r[vt];
}
function Dn(r) {
  var e;
  return !!r && (function(t) {
    if (!t || typeof t != "object")
      return !1;
    var n = Object.getPrototypeOf(t);
    if (n === null)
      return !0;
    var a = Object.hasOwnProperty.call(n, "constructor") && n.constructor;
    return a === Object || typeof a == "function" && Function.toString.call(a) === qb;
  }(r) || Array.isArray(r) || !!r[gi] || !!(!((e = r.constructor) === null || e === void 0) && e[gi]) || ts(r) || ns(r));
}
function $a(r, e, t) {
  t === void 0 && (t = !1), Sn(r) === 0 ? (t ? Object.keys : Dc)(r).forEach(function(n) {
    t && typeof n == "symbol" || e(n, r[n], r);
  }) : r.forEach(function(n, a) {
    return e(a, n, r);
  });
}
function Sn(r) {
  var e = r[vt];
  return e ? e.i > 3 ? e.i - 4 : e.i : Array.isArray(r) ? 1 : ts(r) ? 2 : ns(r) ? 3 : 0;
}
function xi(r, e) {
  return Sn(r) === 2 ? r.has(e) : Object.prototype.hasOwnProperty.call(r, e);
}
function Eo(r, e) {
  return Sn(r) === 2 ? r.get(e) : r[e];
}
function lh(r, e, t) {
  var n = Sn(r);
  n === 2 ? r.set(e, t) : n === 3 ? r.add(t) : r[e] = t;
}
function Tb(r, e) {
  return r === e ? r !== 0 || 1 / r == 1 / e : r != r && e != e;
}
function ts(r) {
  return Rb && r instanceof Map;
}
function ns(r) {
  return Ib && r instanceof Set;
}
function kn(r) {
  return r.o || r.t;
}
function bc(r) {
  if (Array.isArray(r))
    return Array.prototype.slice.call(r);
  var e = Lb(r);
  delete e[vt];
  for (var t = Dc(e), n = 0; n < t.length; n++) {
    var a = t[n], i = e[a];
    i.writable === !1 && (i.writable = !0, i.configurable = !0), (i.get || i.set) && (e[a] = { configurable: !0, writable: !0, enumerable: i.enumerable, value: r[a] });
  }
  return Object.create(Object.getPrototypeOf(r), e);
}
function xc(r, e) {
  return e === void 0 && (e = !1), wc(r) || Zn(r) || !Dn(r) || (Sn(r) > 1 && (r.set = r.add = r.clear = r.delete = Bb), Object.freeze(r), e && $a(r, function(t, n) {
    return xc(n, !0);
  }, !0)), r;
}
function Bb() {
  Sr(2);
}
function wc(r) {
  return r == null || typeof r != "object" || Object.isFrozen(r);
}
function Zt(r) {
  var e = Hu[r];
  return e || Sr(18, r), e;
}
function _b(r, e) {
  Hu[r] || (Hu[r] = e);
}
function kl() {
  return process.env.NODE_ENV === "production" || Ra || Sr(0), Ra;
}
function au(r, e) {
  e && (Zt("Patches"), r.u = [], r.s = [], r.v = e);
}
function So(r) {
  ku(r), r.p.forEach(Fb), r.p = null;
}
function ku(r) {
  r === Ra && (Ra = r.l);
}
function Gl(r) {
  return Ra = { p: [], l: Ra, h: r, m: !0, _: 0 };
}
function Fb(r) {
  var e = r[vt];
  e.i === 0 || e.i === 1 ? e.j() : e.g = !0;
}
function iu(r, e) {
  e._ = e.p.length;
  var t = e.p[0], n = r !== void 0 && r !== t;
  return e.h.O || Zt("ES5").S(e, r, n), n ? (t[vt].P && (So(e), Sr(4)), Dn(r) && (r = Co(e, r), e.l || Mo(e, r)), e.u && Zt("Patches").M(t[vt].t, r, e.u, e.s)) : r = Co(e, t, []), So(e), e.u && e.v(e.u, e.s), r !== Ec ? r : void 0;
}
function Co(r, e, t) {
  if (wc(e))
    return e;
  var n = e[vt];
  if (!n)
    return $a(e, function(f, l) {
      return Vl(r, n, e, f, l, t);
    }, !0), e;
  if (n.A !== r)
    return e;
  if (!n.P)
    return Mo(r, n.t, !0), n.t;
  if (!n.I) {
    n.I = !0, n.A._--;
    var a = n.i === 4 || n.i === 5 ? n.o = bc(n.k) : n.o, i = a, o = !1;
    n.i === 3 && (i = new Set(a), a.clear(), o = !0), $a(i, function(f, l) {
      return Vl(r, n, a, f, l, t, o);
    }), Mo(r, a, !1), t && r.u && Zt("Patches").N(n, t, r.u, r.s);
  }
  return n.o;
}
function Vl(r, e, t, n, a, i, o) {
  if (process.env.NODE_ENV !== "production" && a === t && Sr(5), Zn(a)) {
    var f = Co(r, a, i && e && e.i !== 3 && !xi(e.R, n) ? i.concat(n) : void 0);
    if (lh(t, n, f), !Zn(f))
      return;
    r.m = !1;
  } else
    o && t.add(a);
  if (Dn(a) && !wc(a)) {
    if (!r.h.D && r._ < 1)
      return;
    Co(r, a), e && e.A.l || Mo(r, a);
  }
}
function Mo(r, e, t) {
  t === void 0 && (t = !1), !r.l && r.h.D && r.m && xc(e, t);
}
function ou(r, e) {
  var t = r[vt];
  return (t ? kn(t) : r)[e];
}
function Hl(r, e) {
  if (e in r)
    for (var t = Object.getPrototypeOf(r); t; ) {
      var n = Object.getOwnPropertyDescriptor(t, e);
      if (n)
        return n;
      t = Object.getPrototypeOf(t);
    }
}
function Gu(r) {
  r.P || (r.P = !0, r.l && Gu(r.l));
}
function su(r) {
  r.o || (r.o = bc(r.t));
}
function Vu(r, e, t) {
  var n = ts(e) ? Zt("MapSet").F(e, t) : ns(e) ? Zt("MapSet").T(e, t) : r.O ? function(a, i) {
    var o = Array.isArray(a), f = { i: o ? 1 : 0, A: i ? i.A : kl(), P: !1, I: !1, R: {}, l: i, t: a, k: null, o: null, j: null, C: !1 }, l = f, u = Zu;
    o && (l = [f], u = pi);
    var s = Proxy.revocable(l, u), c = s.revoke, m = s.proxy;
    return f.k = m, f.j = c, m;
  }(e, t) : Zt("ES5").J(e, t);
  return (t ? t.A : kl()).p.push(n), n;
}
function $b(r) {
  return Zn(r) || Sr(22, r), function e(t) {
    if (!Dn(t))
      return t;
    var n, a = t[vt], i = Sn(t);
    if (a) {
      if (!a.P && (a.i < 4 || !Zt("ES5").K(a)))
        return a.t;
      a.I = !0, n = Zl(t, i), a.I = !1;
    } else
      n = Zl(t, i);
    return $a(n, function(o, f) {
      a && Eo(a.t, o) === f || lh(n, o, e(f));
    }), i === 3 ? new Set(n) : n;
  }(r);
}
function Zl(r, e) {
  switch (e) {
    case 2:
      return new Map(r);
    case 3:
      return Array.from(r);
  }
  return bc(r);
}
function Nc() {
  function r(n) {
    if (!Dn(n))
      return n;
    if (Array.isArray(n))
      return n.map(r);
    if (ts(n))
      return new Map(Array.from(n.entries()).map(function(o) {
        return [o[0], r(o[1])];
      }));
    if (ns(n))
      return new Set(Array.from(n).map(r));
    var a = Object.create(Object.getPrototypeOf(n));
    for (var i in n)
      a[i] = r(n[i]);
    return xi(n, gi) && (a[gi] = n[gi]), a;
  }
  function e(n) {
    return Zn(n) ? r(n) : n;
  }
  var t = "add";
  _b("Patches", { $: function(n, a) {
    return a.forEach(function(i) {
      for (var o = i.path, f = i.op, l = n, u = 0; u < o.length - 1; u++) {
        var s = Sn(l), c = o[u];
        typeof c != "string" && typeof c != "number" && (c = "" + c), s !== 0 && s !== 1 || c !== "__proto__" && c !== "constructor" || Sr(24), typeof l == "function" && c === "prototype" && Sr(24), typeof (l = Eo(l, c)) != "object" && Sr(15, o.join("/"));
      }
      var m = Sn(l), v = r(i.value), d = o[o.length - 1];
      switch (f) {
        case "replace":
          switch (m) {
            case 2:
              return l.set(d, v);
            case 3:
              Sr(16);
            default:
              return l[d] = v;
          }
        case t:
          switch (m) {
            case 1:
              return d === "-" ? l.push(v) : l.splice(d, 0, v);
            case 2:
              return l.set(d, v);
            case 3:
              return l.add(v);
            default:
              return l[d] = v;
          }
        case "remove":
          switch (m) {
            case 1:
              return l.splice(d, 1);
            case 2:
              return l.delete(d);
            case 3:
              return l.delete(i.value);
            default:
              return delete l[d];
          }
        default:
          Sr(17, f);
      }
    }), n;
  }, N: function(n, a, i, o) {
    switch (n.i) {
      case 0:
      case 4:
      case 2:
        return function(f, l, u, s) {
          var c = f.t, m = f.o;
          $a(f.R, function(v, d) {
            var p = Eo(c, v), b = Eo(m, v), g = d ? xi(c, v) ? "replace" : t : "remove";
            if (p !== b || g !== "replace") {
              var N = l.concat(v);
              u.push(g === "remove" ? { op: g, path: N } : { op: g, path: N, value: b }), s.push(g === t ? { op: "remove", path: N } : g === "remove" ? { op: t, path: N, value: e(p) } : { op: "replace", path: N, value: e(p) });
            }
          });
        }(n, a, i, o);
      case 5:
      case 1:
        return function(f, l, u, s) {
          var c = f.t, m = f.R, v = f.o;
          if (v.length < c.length) {
            var d = [v, c];
            c = d[0], v = d[1];
            var p = [s, u];
            u = p[0], s = p[1];
          }
          for (var b = 0; b < c.length; b++)
            if (m[b] && v[b] !== c[b]) {
              var g = l.concat([b]);
              u.push({ op: "replace", path: g, value: e(v[b]) }), s.push({ op: "replace", path: g, value: e(c[b]) });
            }
          for (var N = c.length; N < v.length; N++) {
            var h = l.concat([N]);
            u.push({ op: t, path: h, value: e(v[N]) });
          }
          c.length < v.length && s.push({ op: "replace", path: l.concat(["length"]), value: c.length });
        }(n, a, i, o);
      case 3:
        return function(f, l, u, s) {
          var c = f.t, m = f.o, v = 0;
          c.forEach(function(d) {
            if (!m.has(d)) {
              var p = l.concat([v]);
              u.push({ op: "remove", path: p, value: d }), s.unshift({ op: t, path: p, value: d });
            }
            v++;
          }), v = 0, m.forEach(function(d) {
            if (!c.has(d)) {
              var p = l.concat([v]);
              u.push({ op: t, path: p, value: d }), s.unshift({ op: "remove", path: p, value: d });
            }
            v++;
          });
        }(n, a, i, o);
    }
  }, M: function(n, a, i, o) {
    i.push({ op: "replace", path: [], value: a === Ec ? void 0 : a }), o.push({ op: "replace", path: [], value: n });
  } });
}
var Yl, Ra, Ac = typeof Symbol < "u" && typeof Symbol("x") == "symbol", Rb = typeof Map < "u", Ib = typeof Set < "u", Wl = typeof Proxy < "u" && Proxy.revocable !== void 0 && typeof Reflect < "u", Ec = Ac ? Symbol.for("immer-nothing") : ((Yl = {})["immer-nothing"] = !0, Yl), gi = Ac ? Symbol.for("immer-draftable") : "__$immer_draftable", vt = Ac ? Symbol.for("immer-state") : "__$immer_state", Pb = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(r) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + r;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(r) {
  return "Cannot apply patch, path doesn't resolve: " + r;
}, 16: 'Sets cannot have "replace" patches.', 17: function(r) {
  return "Unsupported patch operation: " + r;
}, 18: function(r) {
  return "The plugin for '" + r + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + r + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(r) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + r + "'";
}, 22: function(r) {
  return "'current' expects a draft, got: " + r;
}, 23: function(r) {
  return "'original' expects a draft, got: " + r;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" }, qb = "" + Object.prototype.constructor, Dc = typeof Reflect < "u" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(r) {
  return Object.getOwnPropertyNames(r).concat(Object.getOwnPropertySymbols(r));
} : Object.getOwnPropertyNames, Lb = Object.getOwnPropertyDescriptors || function(r) {
  var e = {};
  return Dc(r).forEach(function(t) {
    e[t] = Object.getOwnPropertyDescriptor(r, t);
  }), e;
}, Hu = {}, Zu = { get: function(r, e) {
  if (e === vt)
    return r;
  var t = kn(r);
  if (!xi(t, e))
    return function(a, i, o) {
      var f, l = Hl(i, o);
      return l ? "value" in l ? l.value : (f = l.get) === null || f === void 0 ? void 0 : f.call(a.k) : void 0;
    }(r, t, e);
  var n = t[e];
  return r.I || !Dn(n) ? n : n === ou(r.t, e) ? (su(r), r.o[e] = Vu(r.A.h, n, r)) : n;
}, has: function(r, e) {
  return e in kn(r);
}, ownKeys: function(r) {
  return Reflect.ownKeys(kn(r));
}, set: function(r, e, t) {
  var n = Hl(kn(r), e);
  if (n != null && n.set)
    return n.set.call(r.k, t), !0;
  if (!r.P) {
    var a = ou(kn(r), e), i = a == null ? void 0 : a[vt];
    if (i && i.t === t)
      return r.o[e] = t, r.R[e] = !1, !0;
    if (Tb(t, a) && (t !== void 0 || xi(r.t, e)))
      return !0;
    su(r), Gu(r);
  }
  return r.o[e] === t && (t !== void 0 || e in r.o) || Number.isNaN(t) && Number.isNaN(r.o[e]) || (r.o[e] = t, r.R[e] = !0), !0;
}, deleteProperty: function(r, e) {
  return ou(r.t, e) !== void 0 || e in r.t ? (r.R[e] = !1, su(r), Gu(r)) : delete r.R[e], r.o && delete r.o[e], !0;
}, getOwnPropertyDescriptor: function(r, e) {
  var t = kn(r), n = Reflect.getOwnPropertyDescriptor(t, e);
  return n && { writable: !0, configurable: r.i !== 1 || e !== "length", enumerable: n.enumerable, value: t[e] };
}, defineProperty: function() {
  Sr(11);
}, getPrototypeOf: function(r) {
  return Object.getPrototypeOf(r.t);
}, setPrototypeOf: function() {
  Sr(12);
} }, pi = {};
$a(Zu, function(r, e) {
  pi[r] = function() {
    return arguments[0] = arguments[0][0], e.apply(this, arguments);
  };
}), pi.deleteProperty = function(r, e) {
  return process.env.NODE_ENV !== "production" && isNaN(parseInt(e)) && Sr(13), pi.set.call(this, r, e, void 0);
}, pi.set = function(r, e, t) {
  return process.env.NODE_ENV !== "production" && e !== "length" && isNaN(parseInt(e)) && Sr(14), Zu.set.call(this, r[0], e, t, r[0]);
};
var zb = function() {
  function r(t) {
    var n = this;
    this.O = Wl, this.D = !0, this.produce = function(a, i, o) {
      if (typeof a == "function" && typeof i != "function") {
        var f = i;
        i = a;
        var l = n;
        return function(p) {
          var b = this;
          p === void 0 && (p = f);
          for (var g = arguments.length, N = Array(g > 1 ? g - 1 : 0), h = 1; h < g; h++)
            N[h - 1] = arguments[h];
          return l.produce(p, function(w) {
            var x;
            return (x = i).call.apply(x, [b, w].concat(N));
          });
        };
      }
      var u;
      if (typeof i != "function" && Sr(6), o !== void 0 && typeof o != "function" && Sr(7), Dn(a)) {
        var s = Gl(n), c = Vu(n, a, void 0), m = !0;
        try {
          u = i(c), m = !1;
        } finally {
          m ? So(s) : ku(s);
        }
        return typeof Promise < "u" && u instanceof Promise ? u.then(function(p) {
          return au(s, o), iu(p, s);
        }, function(p) {
          throw So(s), p;
        }) : (au(s, o), iu(u, s));
      }
      if (!a || typeof a != "object") {
        if ((u = i(a)) === void 0 && (u = a), u === Ec && (u = void 0), n.D && xc(u, !0), o) {
          var v = [], d = [];
          Zt("Patches").M(a, u, v, d), o(v, d);
        }
        return u;
      }
      Sr(21, a);
    }, this.produceWithPatches = function(a, i) {
      if (typeof a == "function")
        return function(u) {
          for (var s = arguments.length, c = Array(s > 1 ? s - 1 : 0), m = 1; m < s; m++)
            c[m - 1] = arguments[m];
          return n.produceWithPatches(u, function(v) {
            return a.apply(void 0, [v].concat(c));
          });
        };
      var o, f, l = n.produce(a, i, function(u, s) {
        o = u, f = s;
      });
      return typeof Promise < "u" && l instanceof Promise ? l.then(function(u) {
        return [u, o, f];
      }) : [l, o, f];
    }, typeof (t == null ? void 0 : t.useProxies) == "boolean" && this.setUseProxies(t.useProxies), typeof (t == null ? void 0 : t.autoFreeze) == "boolean" && this.setAutoFreeze(t.autoFreeze);
  }
  var e = r.prototype;
  return e.createDraft = function(t) {
    Dn(t) || Sr(8), Zn(t) && (t = $b(t));
    var n = Gl(this), a = Vu(this, t, void 0);
    return a[vt].C = !0, ku(n), a;
  }, e.finishDraft = function(t, n) {
    var a = t && t[vt];
    process.env.NODE_ENV !== "production" && (a && a.C || Sr(9), a.I && Sr(10));
    var i = a.A;
    return au(i, n), iu(void 0, i);
  }, e.setAutoFreeze = function(t) {
    this.D = t;
  }, e.setUseProxies = function(t) {
    t && !Wl && Sr(20), this.O = t;
  }, e.applyPatches = function(t, n) {
    var a;
    for (a = n.length - 1; a >= 0; a--) {
      var i = n[a];
      if (i.path.length === 0 && i.op === "replace") {
        t = i.value;
        break;
      }
    }
    a > -1 && (n = n.slice(a + 1));
    var o = Zt("Patches").$;
    return Zn(t) ? o(t, n) : this.produce(t, function(f) {
      return o(f, n);
    });
  }, r;
}(), pt = new zb();
pt.produce;
var Sc = pt.produceWithPatches.bind(pt);
pt.setAutoFreeze.bind(pt);
pt.setUseProxies.bind(pt);
pt.applyPatches.bind(pt);
pt.createDraft.bind(pt);
pt.finishDraft.bind(pt);
var da = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
Nc();
class Ub {
  constructor(e) {
    this.messageBus = e;
  }
  getItems(e) {
    return da(this, void 0, void 0, function* () {
      if (Array.isArray(e)) {
        const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ITEMS", { ids: e });
        return t;
      } else if (e) {
        const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ALL_ITEMS", {});
        return t.filter(e);
      } else {
        const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ALL_ITEMS", {});
        return t;
      }
    });
  }
  isItemArray(e) {
    return Array.isArray(e) && e.every((t) => typeof t != "string");
  }
  updateItems(e, t, n = !0) {
    return da(this, void 0, void 0, function* () {
      let a;
      this.isItemArray(e) ? a = e : a = yield this.getItems(e);
      const [i, o] = Sc(a, t), f = i.map((u) => ({
        id: u.id,
        type: u.type
      }));
      for (const u of o) {
        const [s, c] = u.path;
        typeof s == "number" && typeof c == "string" && (f[s][c] = i[s][c]);
      }
      const l = f.filter(
        // Ensure that there are updates besides the default ID and type
        (u) => Object.keys(u).length > 2
      );
      l.length !== 0 && (yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_UPDATE_ITEMS", {
        updates: l,
        updateAttachments: n
      }));
    });
  }
  addItems(e) {
    return da(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_ADD_ITEMS", {
        items: e
      });
    });
  }
  deleteItems(e) {
    return da(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_DELETE_ITEMS", {
        ids: e
      });
    });
  }
  getItemAttachments(e) {
    return da(this, void 0, void 0, function* () {
      const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ITEM_ATTACHMENTS", { ids: e });
      return t;
    });
  }
  getItemBounds(e) {
    return da(this, void 0, void 0, function* () {
      const { bounds: t } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ITEM_BOUNDS", { ids: e });
      return t;
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.items);
    };
    return this.messageBus.send("OBR_SCENE_ITEMS_SUBSCRIBE", {}), this.messageBus.on("OBR_SCENE_ITEMS_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_SCENE_ITEMS_UNSUBSCRIBE", {}), this.messageBus.off("OBR_SCENE_ITEMS_EVENT_CHANGE", t);
    };
  }
}
var ha = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
Nc();
class kb {
  constructor(e) {
    this.messageBus = e;
  }
  getItems(e) {
    return ha(this, void 0, void 0, function* () {
      if (Array.isArray(e)) {
        const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_GET_ITEMS", { ids: e });
        return t;
      } else if (e) {
        const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_GET_ALL_ITEMS", {});
        return t.filter(e);
      } else {
        const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_GET_ALL_ITEMS", {});
        return t;
      }
    });
  }
  updateItems(e, t, n, a = !0) {
    return ha(this, void 0, void 0, function* () {
      const i = yield this.getItems(e), [o, f] = Sc(i, t), l = o.map((s) => ({
        id: s.id,
        type: s.type
      }));
      for (const s of f) {
        const [c, m] = s.path;
        typeof c == "number" && typeof m == "string" && (l[c][m] = o[c][m]);
      }
      const u = l.filter(
        // Ensure that there are updates besides the default ID and type
        (s) => Object.keys(s).length > 2
      );
      u.length !== 0 && (yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_UPDATE_ITEMS", {
        updates: u,
        fastUpdate: n,
        updateAttachments: a
      }));
    });
  }
  addItems(e) {
    return ha(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_ADD_ITEMS", {
        items: e
      });
    });
  }
  deleteItems(e) {
    return ha(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_DELETE_ITEMS", {
        ids: e
      });
    });
  }
  getItemAttachments(e) {
    return ha(this, void 0, void 0, function* () {
      const { items: t } = yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_GET_ITEM_ATTACHMENTS", { ids: e });
      return t;
    });
  }
  getItemBounds(e) {
    return ha(this, void 0, void 0, function* () {
      const { bounds: t } = yield this.messageBus.sendAsync("OBR_SCENE_LOCAL_GET_ITEM_BOUNDS", { ids: e });
      return t;
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.items);
    };
    return this.messageBus.send("OBR_SCENE_LOCAL_SUBSCRIBE", {}), this.messageBus.on("OBR_SCENE_LOCAL_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_SCENE_LOCAL_UNSUBSCRIBE", {}), this.messageBus.off("OBR_SCENE_LOCAL_EVENT_CHANGE", t);
    };
  }
}
var uu = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Gb {
  constructor(e) {
    this.messageBus = e, this.grid = new Mb(e), this.fog = new Cb(e), this.history = new Ob(e), this.items = new Ub(e), this.local = new kb(e);
  }
  isReady() {
    return uu(this, void 0, void 0, function* () {
      const { ready: e } = yield this.messageBus.sendAsync("OBR_SCENE_IS_READY", {});
      return e;
    });
  }
  onReadyChange(e) {
    const t = (n) => {
      e(n.ready);
    };
    return this.messageBus.send("OBR_SCENE_READY_SUBSCRIBE", {}), this.messageBus.on("OBR_SCENE_EVENT_READY_CHANGE", t), () => {
      this.messageBus.send("OBR_SCENE_READY_UNSUBSCRIBE", {}), this.messageBus.off("OBR_SCENE_EVENT_READY_CHANGE", t);
    };
  }
  getMetadata() {
    return uu(this, void 0, void 0, function* () {
      const { metadata: e } = yield this.messageBus.sendAsync("OBR_SCENE_GET_METADATA", {});
      return e;
    });
  }
  setMetadata(e) {
    return uu(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_SCENE_SET_METADATA", { update: e });
    });
  }
  onMetadataChange(e) {
    const t = (n) => {
      e(n.metadata);
    };
    return this.messageBus.send("OBR_SCENE_METADATA_SUBSCRIBE", {}), this.messageBus.on("OBR_SCENE_METADATA_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_SCENE_METADATA_UNSUBSCRIBE", {}), this.messageBus.off("OBR_SCENE_METADATA_EVENT_CHANGE", t);
    };
  }
}
function fh(r) {
  return r.startsWith("http") ? r : `${window.location.origin}${r}`;
}
function yi(r) {
  return r.map((e) => Object.assign(Object.assign({}, e), { icon: fh(e.icon) }));
}
function Cc(r) {
  return Object.assign(Object.assign({}, r), { url: fh(r.url) });
}
var Jl = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Vb {
  constructor(e) {
    this.contextMenus = {}, this.handleClick = (t) => {
      var n;
      const a = this.contextMenus[t.id];
      a && ((n = a.onClick) === null || n === void 0 || n.call(a, t.context, t.elementId));
    }, this.messageBus = e, e.on("OBR_CONTEXT_MENU_EVENT_CLICK", this.handleClick);
  }
  create(e) {
    return Jl(this, void 0, void 0, function* () {
      this.messageBus.sendAsync("OBR_CONTEXT_MENU_CREATE", {
        id: e.id,
        shortcut: e.shortcut,
        icons: yi(e.icons),
        embed: e.embed && Cc(e.embed)
      }), this.contextMenus[e.id] = e;
    });
  }
  remove(e) {
    return Jl(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_CONTEXT_MENU_REMOVE", { id: e }), delete this.contextMenus[e];
    });
  }
}
var Gt = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Hb {
  constructor(e) {
    this.tools = {}, this.toolActions = {}, this.toolModes = {}, this.handleToolClick = (t) => {
      const n = this.tools[t.id];
      if (n)
        if (n.onClick) {
          const a = n.onClick(t.context, t.elementId);
          Promise.resolve(a).then((i) => {
            i && this.messageBus.send("OBR_TOOL_ACTIVATE", {
              id: t.id
            });
          });
        } else
          this.messageBus.send("OBR_TOOL_ACTIVATE", {
            id: t.id
          });
    }, this.handleToolActionClick = (t) => {
      var n;
      const a = this.toolActions[t.id];
      a && ((n = a.onClick) === null || n === void 0 || n.call(a, t.context, t.elementId));
    }, this.handleToolModeClick = (t) => {
      const n = this.toolModes[t.id];
      if (n)
        if (n.onClick) {
          const a = n.onClick(t.context, t.elementId);
          Promise.resolve(a).then((i) => {
            i && this.messageBus.send("OBR_TOOL_MODE_ACTIVATE", {
              toolId: t.context.activeTool,
              modeId: t.id
            });
          });
        } else
          this.messageBus.send("OBR_TOOL_MODE_ACTIVATE", {
            toolId: t.context.activeTool,
            modeId: t.id
          });
    }, this.handleToolModeToolClick = (t) => {
      const n = this.toolModes[t.id];
      if (n)
        if (n.onToolClick) {
          const a = n.onToolClick(t.context, t.event);
          Promise.resolve(a).then((i) => {
            i && t.event.target && !t.event.target.locked && this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
              items: [t.event.target.id]
            });
          });
        } else
          t.event.target && !t.event.target.locked && this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
            items: [t.event.target.id]
          });
    }, this.handleToolModeToolDoubleClick = (t) => {
      const n = this.toolModes[t.id];
      if (n)
        if (n.onToolDoubleClick) {
          const a = n.onToolDoubleClick(t.context, t.event);
          Promise.resolve(a).then((i) => {
            i && t.event.target && this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
              items: [t.event.target.id]
            });
          });
        } else
          t.event.target && this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
            items: [t.event.target.id]
          });
    }, this.handleToolModeToolDown = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolDown) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeToolMove = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolMove) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeToolUp = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolUp) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeToolDragStart = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolDragStart) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeToolDragMove = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolDragMove) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeToolDragEnd = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolDragEnd) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeToolDragCancel = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onToolDragCancel) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeKeyDown = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onKeyDown) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeKeyUp = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onKeyUp) === null || n === void 0 || n.call(a, t.context, t.event));
    }, this.handleToolModeActivate = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onActivate) === null || n === void 0 || n.call(a, t.context));
    }, this.handleToolModeDeactivate = (t) => {
      var n;
      const a = this.toolModes[t.id];
      a && ((n = a.onDeactivate) === null || n === void 0 || n.call(a, t.context));
    }, this.messageBus = e, e.on("OBR_TOOL_EVENT_CLICK", this.handleToolClick), e.on("OBR_TOOL_ACTION_EVENT_CLICK", this.handleToolActionClick), e.on("OBR_TOOL_MODE_EVENT_CLICK", this.handleToolModeClick), e.on("OBR_TOOL_MODE_EVENT_TOOL_CLICK", this.handleToolModeToolClick), e.on("OBR_TOOL_MODE_EVENT_TOOL_DOUBLE_CLICK", this.handleToolModeToolDoubleClick), e.on("OBR_TOOL_MODE_EVENT_TOOL_DOWN", this.handleToolModeToolDown), e.on("OBR_TOOL_MODE_EVENT_TOOL_MOVE", this.handleToolModeToolMove), e.on("OBR_TOOL_MODE_EVENT_TOOL_UP", this.handleToolModeToolUp), e.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_START", this.handleToolModeToolDragStart), e.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_MOVE", this.handleToolModeToolDragMove), e.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_END", this.handleToolModeToolDragEnd), e.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_CANCEL", this.handleToolModeToolDragCancel), e.on("OBR_TOOL_MODE_EVENT_KEY_DOWN", this.handleToolModeKeyDown), e.on("OBR_TOOL_MODE_EVENT_KEY_UP", this.handleToolModeKeyUp), e.on("OBR_TOOL_MODE_EVENT_ACTIVATE", this.handleToolModeActivate), e.on("OBR_TOOL_MODE_EVENT_DEACTIVATE", this.handleToolModeDeactivate);
  }
  create(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_CREATE", {
        id: e.id,
        shortcut: e.shortcut,
        defaultMode: e.defaultMode,
        defaultMetadata: e.defaultMetadata,
        icons: yi(e.icons),
        disabled: e.disabled
      }), this.tools[e.id] = e;
    });
  }
  remove(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_REMOVE", { id: e }), delete this.tools[e];
    });
  }
  activateTool(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_ACTIVATE", { id: e });
    });
  }
  getMetadata(e) {
    return Gt(this, void 0, void 0, function* () {
      const { metadata: t } = yield this.messageBus.sendAsync("OBR_TOOL_GET_METADATA", { id: e });
      return t;
    });
  }
  setMetadata(e, t) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_SET_METADATA", {
        toolId: e,
        update: t
      });
    });
  }
  createAction(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_ACTION_CREATE", {
        id: e.id,
        shortcut: e.shortcut,
        icons: yi(e.icons),
        disabled: e.disabled
      }), this.toolActions[e.id] = e;
    });
  }
  removeAction(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_ACTION_REMOVE", { id: e }), delete this.tools[e];
    });
  }
  createMode(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_MODE_CREATE", {
        id: e.id,
        shortcut: e.shortcut,
        icons: yi(e.icons),
        preventDrag: e.preventDrag,
        disabled: e.disabled,
        cursors: e.cursors
      }), this.toolModes[e.id] = e;
    });
  }
  removeMode(e) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_MODE_REMOVE", { id: e }), delete this.tools[e];
    });
  }
  activateMode(e, t) {
    return Gt(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_TOOL_MODE_ACTIVATE", {
        toolId: e,
        modeId: t
      });
    });
  }
}
var ga = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Zb {
  constructor(e) {
    this.messageBus = e;
  }
  open(e) {
    return ga(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_POPOVER_OPEN", Object.assign({}, Cc(e)));
    });
  }
  close(e) {
    return ga(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_POPOVER_CLOSE", { id: e });
    });
  }
  getWidth(e) {
    return ga(this, void 0, void 0, function* () {
      const { width: t } = yield this.messageBus.sendAsync("OBR_POPOVER_GET_WIDTH", { id: e });
      return t;
    });
  }
  setWidth(e, t) {
    return ga(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_POPOVER_SET_WIDTH", { id: e, width: t });
    });
  }
  getHeight(e) {
    return ga(this, void 0, void 0, function* () {
      const { height: t } = yield this.messageBus.sendAsync("OBR_POPOVER_GET_HEIGHT", { id: e });
      return t;
    });
  }
  setHeight(e, t) {
    return ga(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_POPOVER_SET_HEIGHT", { id: e, height: t });
    });
  }
}
var Xl = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Yb {
  constructor(e) {
    this.messageBus = e;
  }
  open(e) {
    return Xl(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_MODAL_OPEN", Object.assign({}, Cc(e)));
    });
  }
  close(e) {
    return Xl(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_MODAL_CLOSE", { id: e });
    });
  }
}
var et = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Wb {
  constructor(e) {
    this.messageBus = e;
  }
  getWidth() {
    return et(this, void 0, void 0, function* () {
      const { width: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_WIDTH", {});
      return e;
    });
  }
  setWidth(e) {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_SET_WIDTH", { width: e });
    });
  }
  getHeight() {
    return et(this, void 0, void 0, function* () {
      const { height: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_HEIGHT", {});
      return e;
    });
  }
  setHeight(e) {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_SET_HEIGHT", { height: e });
    });
  }
  getBadgeText() {
    return et(this, void 0, void 0, function* () {
      const { badgeText: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_BADGE_TEXT", {});
      return e;
    });
  }
  setBadgeText(e) {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_SET_BADGE_TEXT", { badgeText: e });
    });
  }
  getBadgeBackgroundColor() {
    return et(this, void 0, void 0, function* () {
      const { badgeBackgroundColor: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_BADGE_BACKGROUND_COLOR", {});
      return e;
    });
  }
  setBadgeBackgroundColor(e) {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_SET_BADGE_BACKGROUND_COLOR", {
        badgeBackgroundColor: e
      });
    });
  }
  getIcon() {
    return et(this, void 0, void 0, function* () {
      const { icon: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_ICON", {});
      return e;
    });
  }
  setIcon(e) {
    return et(this, void 0, void 0, function* () {
      const t = yi([{ icon: e }]);
      yield this.messageBus.sendAsync("OBR_ACTION_SET_ICON", {
        icon: t[0].icon
      });
    });
  }
  getTitle() {
    return et(this, void 0, void 0, function* () {
      const { title: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_TITLE", {});
      return e;
    });
  }
  setTitle(e) {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_SET_TITLE", { title: e });
    });
  }
  isOpen() {
    return et(this, void 0, void 0, function* () {
      const { isOpen: e } = yield this.messageBus.sendAsync("OBR_ACTION_GET_IS_OPEN", {});
      return e;
    });
  }
  open() {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_OPEN", {});
    });
  }
  close() {
    return et(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ACTION_CLOSE", {});
    });
  }
  onOpenChange(e) {
    const t = (n) => {
      e(n.isOpen);
    };
    return this.messageBus.send("OBR_ACTION_IS_OPEN_SUBSCRIBE", {}), this.messageBus.on("OBR_ACTION_IS_OPEN_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_IS_OPEN_ACTION_UNSUBSCRIBE", {}), this.messageBus.off("OBR_ACTION_IS_OPEN_EVENT_CHANGE", t);
    };
  }
}
var Jb = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
Nc();
class Xb {
  constructor(e) {
    this.messageBus = e;
  }
  startItemInteraction(e, t = !0) {
    return Jb(this, void 0, void 0, function* () {
      const { id: n } = yield this.messageBus.sendAsync("OBR_INTERACTION_START_ITEM_INTERACTION", { baseState: e, updateAttachments: t });
      let a = e;
      return [(f) => {
        const [l, u] = Sc(a, f);
        return a = l, this.messageBus.send("OBR_INTERACTION_UPDATE_ITEM_INTERACTION", {
          id: n,
          patches: u
        }), l;
      }, () => {
        this.messageBus.send("OBR_INTERACTION_STOP_ITEM_INTERACTION", { id: n });
      }];
    });
  }
}
var Kb = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class Qb {
  constructor(e) {
    this.messageBus = e;
  }
  getPlayers() {
    return Kb(this, void 0, void 0, function* () {
      const { players: e } = yield this.messageBus.sendAsync("OBR_PARTY_GET_PLAYERS", {});
      return e;
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.players);
    };
    return this.messageBus.send("OBR_PARTY_SUBSCRIBE", {}), this.messageBus.on("OBR_PARTY_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_PARTY_UNSUBSCRIBE", {}), this.messageBus.off("OBR_PARTY_EVENT_CHANGE", t);
    };
  }
}
var cu = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class jb {
  constructor(e) {
    this.messageBus = e;
  }
  get id() {
    return this.messageBus.roomId;
  }
  getPermissions() {
    return cu(this, void 0, void 0, function* () {
      const { permissions: e } = yield this.messageBus.sendAsync("OBR_ROOM_GET_PERMISSIONS", {});
      return e;
    });
  }
  getMetadata() {
    return cu(this, void 0, void 0, function* () {
      const { metadata: e } = yield this.messageBus.sendAsync("OBR_ROOM_GET_METADATA", {});
      return e;
    });
  }
  setMetadata(e) {
    return cu(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ROOM_SET_METADATA", { update: e });
    });
  }
  onMetadataChange(e) {
    const t = (n) => {
      e(n.metadata);
    };
    return this.messageBus.send("OBR_ROOM_METADATA_SUBSCRIBE", {}), this.messageBus.on("OBR_ROOM_METADATA_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_METADATA_ROOM_UNSUBSCRIBE", {}), this.messageBus.off("OBR_ROOM_METADATA_EVENT_CHANGE", t);
    };
  }
  onPermissionsChange(e) {
    const t = (n) => {
      e(n.permissions);
    };
    return this.messageBus.send("OBR_ROOM_PERMISSIONS_SUBSCRIBE", {}), this.messageBus.on("OBR_ROOM_PERMISSIONS_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_PERMISSIONS_ROOM_UNSUBSCRIBE", {}), this.messageBus.off("OBR_ROOM_PERMISSIONS_EVENT_CHANGE", t);
    };
  }
}
var ex = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class rx {
  constructor(e) {
    this.messageBus = e;
  }
  getTheme() {
    return ex(this, void 0, void 0, function* () {
      const { theme: e } = yield this.messageBus.sendAsync("OBR_THEME_GET_THEME", {});
      return e;
    });
  }
  onChange(e) {
    const t = (n) => {
      e(n.theme);
    };
    return this.messageBus.send("OBR_THEME_SUBSCRIBE", {}), this.messageBus.on("OBR_THEME_EVENT_CHANGE", t), () => {
      this.messageBus.send("OBR_THEME_UNSUBSCRIBE", {}), this.messageBus.off("OBR_THEME_EVENT_CHANGE", t);
    };
  }
}
var Qi = function(r, e, t, n) {
  function a(i) {
    return i instanceof t ? i : new t(function(o) {
      o(i);
    });
  }
  return new (t || (t = Promise))(function(i, o) {
    function f(s) {
      try {
        u(n.next(s));
      } catch (c) {
        o(c);
      }
    }
    function l(s) {
      try {
        u(n.throw(s));
      } catch (c) {
        o(c);
      }
    }
    function u(s) {
      s.done ? i(s.value) : a(s.value).then(f, l);
    }
    u((n = n.apply(r, e || [])).next());
  });
};
class tx {
  constructor(e) {
    this.messageBus = e;
  }
  uploadImages(e, t) {
    return Qi(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ASSETS_UPLOAD_IMAGES", {
        images: e,
        typeHint: t
      });
    });
  }
  uploadScenes(e, t) {
    return Qi(this, void 0, void 0, function* () {
      yield this.messageBus.sendAsync("OBR_ASSETS_UPLOAD_SCENES", {
        scenes: e,
        disableShowScenes: t
      });
    });
  }
  downloadImages(e, t, n) {
    return Qi(this, void 0, void 0, function* () {
      const { images: a } = yield this.messageBus.sendAsync("OBR_ASSETS_DOWNLOAD_IMAGES", { multiple: e, defaultSearch: t, typeHint: n }, -1);
      return a;
    });
  }
  downloadScenes(e, t) {
    return Qi(this, void 0, void 0, function* () {
      const { scenes: n } = yield this.messageBus.sendAsync("OBR_ASSETS_DOWNLOAD_SCENES", { multiple: e, defaultSearch: t }, -1);
      return n;
    });
  }
}
const nx = typeof atob == "function", Mc = typeof Buffer == "function", Kl = typeof TextDecoder == "function" ? new TextDecoder() : void 0;
typeof TextEncoder == "function" && new TextEncoder();
const ax = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", ix = Array.prototype.slice.call(ax), ji = ((r) => {
  let e = {};
  return r.forEach((t, n) => e[t] = n), e;
})(ix), ox = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/, Gn = String.fromCharCode.bind(String), Ql = typeof Uint8Array.from == "function" ? Uint8Array.from.bind(Uint8Array) : (r) => new Uint8Array(Array.prototype.slice.call(r, 0)), mh = (r) => r.replace(/[^A-Za-z0-9\+\/]/g, ""), sx = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g, ux = (r) => {
  switch (r.length) {
    case 4:
      var e = (7 & r.charCodeAt(0)) << 18 | (63 & r.charCodeAt(1)) << 12 | (63 & r.charCodeAt(2)) << 6 | 63 & r.charCodeAt(3), t = e - 65536;
      return Gn((t >>> 10) + 55296) + Gn((t & 1023) + 56320);
    case 3:
      return Gn((15 & r.charCodeAt(0)) << 12 | (63 & r.charCodeAt(1)) << 6 | 63 & r.charCodeAt(2));
    default:
      return Gn((31 & r.charCodeAt(0)) << 6 | 63 & r.charCodeAt(1));
  }
}, cx = (r) => r.replace(sx, ux), lx = (r) => {
  if (r = r.replace(/\s+/g, ""), !ox.test(r))
    throw new TypeError("malformed base64.");
  r += "==".slice(2 - (r.length & 3));
  let e, t = "", n, a;
  for (let i = 0; i < r.length; )
    e = ji[r.charAt(i++)] << 18 | ji[r.charAt(i++)] << 12 | (n = ji[r.charAt(i++)]) << 6 | (a = ji[r.charAt(i++)]), t += n === 64 ? Gn(e >> 16 & 255) : a === 64 ? Gn(e >> 16 & 255, e >> 8 & 255) : Gn(e >> 16 & 255, e >> 8 & 255, e & 255);
  return t;
}, vh = nx ? (r) => atob(mh(r)) : Mc ? (r) => Buffer.from(r, "base64").toString("binary") : lx, fx = Mc ? (r) => Ql(Buffer.from(r, "base64")) : (r) => Ql(vh(r).split("").map((e) => e.charCodeAt(0))), mx = Mc ? (r) => Buffer.from(r, "base64").toString("utf8") : Kl ? (r) => Kl.decode(fx(r)) : (r) => cx(vh(r)), vx = (r) => mh(r.replace(/[-_]/g, (e) => e == "-" ? "+" : "/")), px = (r) => mx(vx(r));
function dx() {
  const e = new URLSearchParams(window.location.search).get("obrref");
  let t = "", n = "";
  if (e) {
    const i = px(e).split(" ");
    i.length === 2 && (t = i[0], n = i[1]);
  }
  return { origin: t, roomId: n };
}
var jl;
(function(r) {
  r[r.MOVE = 0] = "MOVE", r[r.LINE = 1] = "LINE", r[r.QUAD = 2] = "QUAD", r[r.CONIC = 3] = "CONIC", r[r.CUBIC = 4] = "CUBIC", r[r.CLOSE = 5] = "CLOSE";
})(jl || (jl = {}));
const Yu = dx(), kr = new Db(Yu.origin, Yu.roomId), hx = new lb(kr), gx = new cb(kr), yx = new Qb(kr), bx = new Sb(kr), xx = new Gb(kr), wx = new Vb(kr), Nx = new Hb(kr), Ax = new Zb(kr), Ex = new Yb(kr), Dx = new Wb(kr), Sx = new Xb(kr), Cx = new jb(kr), Mx = new rx(kr), Ox = new tx(kr), lu = {
  onReady: (r) => {
    kr.ready ? r() : kr.once("OBR_READY", () => r());
  },
  get isReady() {
    return kr.ready;
  },
  viewport: hx,
  player: gx,
  party: yx,
  notification: bx,
  scene: xx,
  contextMenu: wx,
  tool: Nx,
  popover: Ax,
  modal: Ex,
  action: Dx,
  interaction: Sx,
  room: Cx,
  theme: Mx,
  assets: Ox,
  /** True if the current site is embedded in an instance of Owlbear Rodeo */
  isAvailable: !!Yu.origin
};
function Rr() {
  return Rr = Object.assign ? Object.assign.bind() : function(r) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t)
        Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]);
    }
    return r;
  }, Rr.apply(this, arguments);
}
var ph = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  epsilon: 1e-12,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: "Matrix",
  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
  number: "number",
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: !1,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};
function Xe(r) {
  return typeof r == "number";
}
function rr(r) {
  return !r || typeof r != "object" || typeof r.constructor != "function" ? !1 : r.isBigNumber === !0 && typeof r.constructor.prototype == "object" && r.constructor.prototype.isBigNumber === !0 || typeof r.constructor.isDecimal == "function" && r.constructor.isDecimal(r) === !0;
}
function on(r) {
  return r && typeof r == "object" && Object.getPrototypeOf(r).isComplex === !0 || !1;
}
function Si(r) {
  return r && typeof r == "object" && Object.getPrototypeOf(r).isFraction === !0 || !1;
}
function xt(r) {
  return r && r.constructor.prototype.isUnit === !0 || !1;
}
function Hr(r) {
  return typeof r == "string";
}
var sr = Array.isArray;
function Le(r) {
  return r && r.constructor.prototype.isMatrix === !0 || !1;
}
function Cn(r) {
  return Array.isArray(r) || Le(r);
}
function Oo(r) {
  return r && r.isDenseMatrix && r.constructor.prototype.isMatrix === !0 || !1;
}
function Vn(r) {
  return r && r.isSparseMatrix && r.constructor.prototype.isMatrix === !0 || !1;
}
function Oc(r) {
  return r && r.constructor.prototype.isRange === !0 || !1;
}
function as(r) {
  return r && r.constructor.prototype.isIndex === !0 || !1;
}
function Tx(r) {
  return typeof r == "boolean";
}
function Bx(r) {
  return r && r.constructor.prototype.isResultSet === !0 || !1;
}
function dh(r) {
  return r && r.constructor.prototype.isHelp === !0 || !1;
}
function _x(r) {
  return typeof r == "function";
}
function Fx(r) {
  return r instanceof Date;
}
function $x(r) {
  return r instanceof RegExp;
}
function is(r) {
  return !!(r && typeof r == "object" && r.constructor === Object && !on(r) && !Si(r));
}
function Rx(r) {
  return r === null;
}
function Ix(r) {
  return r === void 0;
}
function Yn(r) {
  return r && r.isAccessorNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function bt(r) {
  return r && r.isArrayNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Px(r) {
  return r && r.isAssignmentNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function qx(r) {
  return r && r.isBlockNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Lx(r) {
  return r && r.isConditionalNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function ir(r) {
  return r && r.isConstantNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Wu(r) {
  return ir(r) || Or(r) && r.args.length === 1 && ir(r.args[0]) && "-+~".includes(r.op);
}
function Ci(r) {
  return r && r.isFunctionAssignmentNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Mn(r) {
  return r && r.isFunctionNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Ya(r) {
  return r && r.isIndexNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function mr(r) {
  return r && r.isNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function os(r) {
  return r && r.isObjectNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Or(r) {
  return r && r.isOperatorNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function cn(r) {
  return r && r.isParenthesisNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function zx(r) {
  return r && r.isRangeNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Ux(r) {
  return r && r.isRelationalNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function Ir(r) {
  return r && r.isSymbolNode === !0 && r.constructor.prototype.isNode === !0 || !1;
}
function hh(r) {
  return r && r.constructor.prototype.isChain === !0 || !1;
}
function hr(r) {
  var e = typeof r;
  return e === "object" ? r === null ? "null" : rr(r) ? "BigNumber" : r.constructor && r.constructor.name ? r.constructor.name : "Object" : e;
}
function Ge(r) {
  var e = typeof r;
  if (e === "number" || e === "string" || e === "boolean" || r === null || r === void 0)
    return r;
  if (typeof r.clone == "function")
    return r.clone();
  if (Array.isArray(r))
    return r.map(function(t) {
      return Ge(t);
    });
  if (r instanceof Date)
    return new Date(r.valueOf());
  if (rr(r))
    return r;
  if (is(r))
    return kx(r, Ge);
  throw new TypeError("Cannot clone: unknown type of value (value: ".concat(r, ")"));
}
function kx(r, e) {
  var t = {};
  for (var n in r)
    $e(r, n) && (t[n] = e(r[n]));
  return t;
}
function gh(r, e) {
  for (var t in e)
    $e(e, t) && (r[t] = e[t]);
  return r;
}
function Wn(r, e) {
  var t, n, a;
  if (Array.isArray(r)) {
    if (!Array.isArray(e) || r.length !== e.length)
      return !1;
    for (n = 0, a = r.length; n < a; n++)
      if (!Wn(r[n], e[n]))
        return !1;
    return !0;
  } else {
    if (typeof r == "function")
      return r === e;
    if (r instanceof Object) {
      if (Array.isArray(e) || !(e instanceof Object))
        return !1;
      for (t in r)
        if (!(t in e) || !Wn(r[t], e[t]))
          return !1;
      for (t in e)
        if (!(t in r))
          return !1;
      return !0;
    } else
      return r === e;
  }
}
function Gx(r, e, t) {
  var n = !0, a;
  Object.defineProperty(r, e, {
    get: function() {
      return n && (a = t(), n = !1), a;
    },
    set: function(o) {
      a = o, n = !1;
    },
    configurable: !0,
    enumerable: !0
  });
}
function $e(r, e) {
  return r && Object.hasOwnProperty.call(r, e);
}
function Vx(r, e) {
  for (var t = {}, n = 0; n < e.length; n++) {
    var a = e[n], i = r[a];
    i !== void 0 && (t[a] = i);
  }
  return t;
}
var Hx = ["Matrix", "Array"], Zx = ["number", "BigNumber", "Fraction"], he = function(e) {
  if (e)
    throw new Error(`The global config is readonly. 
Please create a mathjs instance if you want to change the default configuration. 
Example:

  import { create, all } from 'mathjs';
  const mathjs = create(all);
  mathjs.config({ number: 'BigNumber' });
`);
  return Object.freeze(ph);
};
Rr(he, ph, {
  MATRIX_OPTIONS: Hx,
  NUMBER_OPTIONS: Zx
});
function ef() {
  return !0;
}
function yt() {
  return !1;
}
function ya() {
}
const rf = "Argument is not a typed-function.";
function yh() {
  function r(P) {
    return typeof P == "object" && P !== null && P.constructor === Object;
  }
  const e = [{
    name: "number",
    test: function(P) {
      return typeof P == "number";
    }
  }, {
    name: "string",
    test: function(P) {
      return typeof P == "string";
    }
  }, {
    name: "boolean",
    test: function(P) {
      return typeof P == "boolean";
    }
  }, {
    name: "Function",
    test: function(P) {
      return typeof P == "function";
    }
  }, {
    name: "Array",
    test: Array.isArray
  }, {
    name: "Date",
    test: function(P) {
      return P instanceof Date;
    }
  }, {
    name: "RegExp",
    test: function(P) {
      return P instanceof RegExp;
    }
  }, {
    name: "Object",
    test: r
  }, {
    name: "null",
    test: function(P) {
      return P === null;
    }
  }, {
    name: "undefined",
    test: function(P) {
      return P === void 0;
    }
  }], t = {
    name: "any",
    test: ef,
    isAny: !0
  };
  let n, a, i = 0, o = {
    createCount: 0
  };
  function f(P) {
    const V = n.get(P);
    if (V)
      return V;
    let ee = 'Unknown type "' + P + '"';
    const ue = P.toLowerCase();
    let pe;
    for (pe of a)
      if (pe.toLowerCase() === ue) {
        ee += '. Did you mean "' + pe + '" ?';
        break;
      }
    throw new TypeError(ee);
  }
  function l(P) {
    let V = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "any";
    const ee = V ? f(V).index : a.length, ue = [];
    for (let me = 0; me < P.length; ++me) {
      if (!P[me] || typeof P[me].name != "string" || typeof P[me].test != "function")
        throw new TypeError("Object with properties {name: string, test: function} expected");
      const Ne = P[me].name;
      if (n.has(Ne))
        throw new TypeError('Duplicate type name "' + Ne + '"');
      ue.push(Ne), n.set(Ne, {
        name: Ne,
        test: P[me].test,
        isAny: P[me].isAny,
        index: ee + me,
        conversionsTo: []
        // Newly added type can't have any conversions to it
      });
    }
    const pe = a.slice(ee);
    a = a.slice(0, ee).concat(ue).concat(pe);
    for (let me = ee + ue.length; me < a.length; ++me)
      n.get(a[me]).index = me;
  }
  function u() {
    n = /* @__PURE__ */ new Map(), a = [], i = 0, l([t], !1);
  }
  u(), l(e);
  function s() {
    let P;
    for (P of a)
      n.get(P).conversionsTo = [];
    i = 0;
  }
  function c(P) {
    const V = a.filter((ee) => {
      const ue = n.get(ee);
      return !ue.isAny && ue.test(P);
    });
    return V.length ? V : ["any"];
  }
  function m(P) {
    return P && typeof P == "function" && "_typedFunctionData" in P;
  }
  function v(P, V, ee) {
    if (!m(P))
      throw new TypeError(rf);
    const ue = ee && ee.exact, pe = Array.isArray(V) ? V.join(",") : V, me = w(pe), Ne = b(me);
    if (!ue || Ne in P.signatures) {
      const We = P._typedFunctionData.signatureMap.get(Ne);
      if (We)
        return We;
    }
    const be = me.length;
    let Oe;
    if (ue) {
      Oe = [];
      let We;
      for (We in P.signatures)
        Oe.push(P._typedFunctionData.signatureMap.get(We));
    } else
      Oe = P._typedFunctionData.signatures;
    for (let We = 0; We < be; ++We) {
      const er = me[We], Re = [];
      let wr;
      for (wr of Oe) {
        const M = D(wr.params, We);
        if (!(!M || er.restParam && !M.restParam)) {
          if (!M.hasAny) {
            const X = h(M);
            if (er.types.some((se) => !X.has(se.name)))
              continue;
          }
          Re.push(wr);
        }
      }
      if (Oe = Re, Oe.length === 0)
        break;
    }
    let Ae;
    for (Ae of Oe)
      if (Ae.params.length <= be)
        return Ae;
    throw new TypeError("Signature not found (signature: " + (P.name || "unnamed") + "(" + b(me, ", ") + "))");
  }
  function d(P, V, ee) {
    return v(P, V, ee).implementation;
  }
  function p(P, V) {
    const ee = f(V);
    if (ee.test(P))
      return P;
    const ue = ee.conversionsTo;
    if (ue.length === 0)
      throw new Error("There are no conversions to " + V + " defined.");
    for (let pe = 0; pe < ue.length; pe++)
      if (f(ue[pe].from).test(P))
        return ue[pe].convert(P);
    throw new Error("Cannot convert " + P + " to " + V);
  }
  function b(P) {
    let V = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ",";
    return P.map((ee) => ee.name).join(V);
  }
  function g(P) {
    const V = P.indexOf("...") === 0, ue = (V ? P.length > 3 ? P.slice(3) : "any" : P).split("|").map((be) => f(be.trim()));
    let pe = !1, me = V ? "..." : "";
    return {
      types: ue.map(function(be) {
        return pe = be.isAny || pe, me += be.name + "|", {
          name: be.name,
          typeIndex: be.index,
          test: be.test,
          isAny: be.isAny,
          conversion: null,
          conversionIndex: -1
        };
      }),
      name: me.slice(0, -1),
      // remove trailing '|' from above
      hasAny: pe,
      hasConversion: !1,
      restParam: V
    };
  }
  function N(P) {
    const V = P.types.map((Ne) => Ne.name), ee = O(V);
    let ue = P.hasAny, pe = P.name;
    const me = ee.map(function(Ne) {
      const be = f(Ne.from);
      return ue = be.isAny || ue, pe += "|" + Ne.from, {
        name: Ne.from,
        typeIndex: be.index,
        test: be.test,
        isAny: be.isAny,
        conversion: Ne,
        conversionIndex: Ne.index
      };
    });
    return {
      types: P.types.concat(me),
      name: pe,
      hasAny: ue,
      hasConversion: me.length > 0,
      restParam: P.restParam
    };
  }
  function h(P) {
    return P.typeSet || (P.typeSet = /* @__PURE__ */ new Set(), P.types.forEach((V) => P.typeSet.add(V.name))), P.typeSet;
  }
  function w(P) {
    const V = [];
    if (typeof P != "string")
      throw new TypeError("Signatures must be strings");
    const ee = P.trim();
    if (ee === "")
      return V;
    const ue = ee.split(",");
    for (let pe = 0; pe < ue.length; ++pe) {
      const me = g(ue[pe].trim());
      if (me.restParam && pe !== ue.length - 1)
        throw new SyntaxError('Unexpected rest parameter "' + ue[pe] + '": only allowed for the last parameter');
      if (me.types.length === 0)
        return null;
      V.push(me);
    }
    return V;
  }
  function x(P) {
    const V = le(P);
    return V ? V.restParam : !1;
  }
  function y(P) {
    if (!P || P.types.length === 0)
      return ef;
    if (P.types.length === 1)
      return f(P.types[0].name).test;
    if (P.types.length === 2) {
      const V = f(P.types[0].name).test, ee = f(P.types[1].name).test;
      return function(pe) {
        return V(pe) || ee(pe);
      };
    } else {
      const V = P.types.map(function(ee) {
        return f(ee.name).test;
      });
      return function(ue) {
        for (let pe = 0; pe < V.length; pe++)
          if (V[pe](ue))
            return !0;
        return !1;
      };
    }
  }
  function E(P) {
    let V, ee, ue;
    if (x(P)) {
      V = de(P).map(y);
      const pe = V.length, me = y(le(P)), Ne = function(be) {
        for (let Oe = pe; Oe < be.length; Oe++)
          if (!me(be[Oe]))
            return !1;
        return !0;
      };
      return function(Oe) {
        for (let Ae = 0; Ae < V.length; Ae++)
          if (!V[Ae](Oe[Ae]))
            return !1;
        return Ne(Oe) && Oe.length >= pe + 1;
      };
    } else
      return P.length === 0 ? function(me) {
        return me.length === 0;
      } : P.length === 1 ? (ee = y(P[0]), function(me) {
        return ee(me[0]) && me.length === 1;
      }) : P.length === 2 ? (ee = y(P[0]), ue = y(P[1]), function(me) {
        return ee(me[0]) && ue(me[1]) && me.length === 2;
      }) : (V = P.map(y), function(me) {
        for (let Ne = 0; Ne < V.length; Ne++)
          if (!V[Ne](me[Ne]))
            return !1;
        return me.length === V.length;
      });
  }
  function D(P, V) {
    return V < P.length ? P[V] : x(P) ? le(P) : null;
  }
  function S(P, V) {
    const ee = D(P, V);
    return ee ? h(ee) : /* @__PURE__ */ new Set();
  }
  function A(P) {
    return P.conversion === null || P.conversion === void 0;
  }
  function C(P, V) {
    const ee = /* @__PURE__ */ new Set();
    return P.forEach((ue) => {
      const pe = S(ue.params, V);
      let me;
      for (me of pe)
        ee.add(me);
    }), ee.has("any") ? ["any"] : Array.from(ee);
  }
  function T(P, V, ee) {
    let ue, pe;
    const me = P || "unnamed";
    let Ne = ee, be;
    for (be = 0; be < V.length; be++) {
      const er = [];
      if (Ne.forEach((Re) => {
        const wr = D(Re.params, be), M = y(wr);
        (be < Re.params.length || x(Re.params)) && M(V[be]) && er.push(Re);
      }), er.length === 0) {
        if (pe = C(Ne, be), pe.length > 0) {
          const Re = c(V[be]);
          return ue = new TypeError("Unexpected type of argument in function " + me + " (expected: " + pe.join(" or ") + ", actual: " + Re.join(" | ") + ", index: " + be + ")"), ue.data = {
            category: "wrongType",
            fn: me,
            index: be,
            actual: Re,
            expected: pe
          }, ue;
        }
      } else
        Ne = er;
    }
    const Oe = Ne.map(function(er) {
      return x(er.params) ? 1 / 0 : er.params.length;
    });
    if (V.length < Math.min.apply(null, Oe))
      return pe = C(Ne, be), ue = new TypeError("Too few arguments in function " + me + " (expected: " + pe.join(" or ") + ", index: " + V.length + ")"), ue.data = {
        category: "tooFewArgs",
        fn: me,
        index: V.length,
        expected: pe
      }, ue;
    const Ae = Math.max.apply(null, Oe);
    if (V.length > Ae)
      return ue = new TypeError("Too many arguments in function " + me + " (expected: " + Ae + ", actual: " + V.length + ")"), ue.data = {
        category: "tooManyArgs",
        fn: me,
        index: V.length,
        expectedLength: Ae
      }, ue;
    const We = [];
    for (let er = 0; er < V.length; ++er)
      We.push(c(V[er]).join("|"));
    return ue = new TypeError('Arguments of type "' + We.join(", ") + '" do not match any of the defined signatures of function ' + me + "."), ue.data = {
      category: "mismatch",
      actual: We
    }, ue;
  }
  function $(P) {
    let V = a.length + 1;
    for (let ee = 0; ee < P.types.length; ee++)
      A(P.types[ee]) && (V = Math.min(V, P.types[ee].typeIndex));
    return V;
  }
  function I(P) {
    let V = i + 1;
    for (let ee = 0; ee < P.types.length; ee++)
      A(P.types[ee]) || (V = Math.min(V, P.types[ee].conversionIndex));
    return V;
  }
  function R(P, V) {
    if (P.hasAny) {
      if (!V.hasAny)
        return 1;
    } else if (V.hasAny)
      return -1;
    if (P.restParam) {
      if (!V.restParam)
        return 1;
    } else if (V.restParam)
      return -1;
    if (P.hasConversion) {
      if (!V.hasConversion)
        return 1;
    } else if (V.hasConversion)
      return -1;
    const ee = $(P) - $(V);
    if (ee < 0)
      return -1;
    if (ee > 0)
      return 1;
    const ue = I(P) - I(V);
    return ue < 0 ? -1 : ue > 0 ? 1 : 0;
  }
  function B(P, V) {
    const ee = P.params, ue = V.params, pe = le(ee), me = le(ue), Ne = x(ee), be = x(ue);
    if (Ne && pe.hasAny) {
      if (!be || !me.hasAny)
        return 1;
    } else if (be && me.hasAny)
      return -1;
    let Oe = 0, Ae = 0, We;
    for (We of ee)
      We.hasAny && ++Oe, We.hasConversion && ++Ae;
    let er = 0, Re = 0;
    for (We of ue)
      We.hasAny && ++er, We.hasConversion && ++Re;
    if (Oe !== er)
      return Oe - er;
    if (Ne && pe.hasConversion) {
      if (!be || !me.hasConversion)
        return 1;
    } else if (be && me.hasConversion)
      return -1;
    if (Ae !== Re)
      return Ae - Re;
    if (Ne) {
      if (!be)
        return 1;
    } else if (be)
      return -1;
    const wr = (ee.length - ue.length) * (Ne ? -1 : 1);
    if (wr !== 0)
      return wr;
    const M = [];
    let X = 0;
    for (let Ee = 0; Ee < ee.length; ++Ee) {
      const ze = R(ee[Ee], ue[Ee]);
      M.push(ze), X += ze;
    }
    if (X !== 0)
      return X;
    let se;
    for (se of M)
      if (se !== 0)
        return se;
    return 0;
  }
  function O(P) {
    if (P.length === 0)
      return [];
    const V = P.map(f);
    P.length > 1 && V.sort((pe, me) => pe.index - me.index);
    let ee = V[0].conversionsTo;
    if (P.length === 1)
      return ee;
    ee = ee.concat([]);
    const ue = new Set(P);
    for (let pe = 1; pe < V.length; ++pe) {
      let me;
      for (me of V[pe].conversionsTo)
        ue.has(me.from) || (ee.push(me), ue.add(me.from));
    }
    return ee;
  }
  function G(P, V) {
    let ee = V;
    if (P.some((pe) => pe.hasConversion)) {
      const pe = x(P), me = P.map(_);
      ee = function() {
        const be = [], Oe = pe ? arguments.length - 1 : arguments.length;
        for (let Ae = 0; Ae < Oe; Ae++)
          be[Ae] = me[Ae](arguments[Ae]);
        return pe && (be[Oe] = arguments[Oe].map(me[Oe])), V.apply(this, be);
      };
    }
    let ue = ee;
    if (x(P)) {
      const pe = P.length - 1;
      ue = function() {
        return ee.apply(this, ie(arguments, 0, pe).concat([ie(arguments, pe)]));
      };
    }
    return ue;
  }
  function _(P) {
    let V, ee, ue, pe;
    const me = [], Ne = [];
    switch (P.types.forEach(function(be) {
      be.conversion && (me.push(f(be.conversion.from).test), Ne.push(be.conversion.convert));
    }), Ne.length) {
      case 0:
        return function(Oe) {
          return Oe;
        };
      case 1:
        return V = me[0], ue = Ne[0], function(Oe) {
          return V(Oe) ? ue(Oe) : Oe;
        };
      case 2:
        return V = me[0], ee = me[1], ue = Ne[0], pe = Ne[1], function(Oe) {
          return V(Oe) ? ue(Oe) : ee(Oe) ? pe(Oe) : Oe;
        };
      default:
        return function(Oe) {
          for (let Ae = 0; Ae < Ne.length; Ae++)
            if (me[Ae](Oe))
              return Ne[Ae](Oe);
          return Oe;
        };
    }
  }
  function U(P) {
    function V(ee, ue, pe) {
      if (ue < ee.length) {
        const me = ee[ue];
        let Ne = [];
        if (me.restParam) {
          const be = me.types.filter(A);
          be.length < me.types.length && Ne.push({
            types: be,
            name: "..." + be.map((Oe) => Oe.name).join("|"),
            hasAny: be.some((Oe) => Oe.isAny),
            hasConversion: !1,
            restParam: !0
          }), Ne.push(me);
        } else
          Ne = me.types.map(function(be) {
            return {
              types: [be],
              name: be.name,
              hasAny: be.isAny,
              hasConversion: be.conversion,
              restParam: !1
            };
          });
        return _e(Ne, function(be) {
          return V(ee, ue + 1, pe.concat([be]));
        });
      } else
        return [pe];
    }
    return V(P, 0, []);
  }
  function K(P, V) {
    const ee = Math.max(P.length, V.length);
    for (let be = 0; be < ee; be++) {
      const Oe = S(P, be), Ae = S(V, be);
      let We = !1, er;
      for (er of Ae)
        if (Oe.has(er)) {
          We = !0;
          break;
        }
      if (!We)
        return !1;
    }
    const ue = P.length, pe = V.length, me = x(P), Ne = x(V);
    return me ? Ne ? ue === pe : pe >= ue : Ne ? ue >= pe : ue === pe;
  }
  function j(P) {
    return P.map((V) => oe(V) ? k(V.referToSelf.callback) : Z(V) ? Be(V.referTo.references, V.referTo.callback) : V);
  }
  function z(P, V, ee) {
    const ue = [];
    let pe;
    for (pe of P) {
      let me = ee[pe];
      if (typeof me != "number")
        throw new TypeError('No definition for referenced signature "' + pe + '"');
      if (me = V[me], typeof me != "function")
        return !1;
      ue.push(me);
    }
    return ue;
  }
  function Q(P, V, ee) {
    const ue = j(P), pe = new Array(ue.length).fill(!1);
    let me = !0;
    for (; me; ) {
      me = !1;
      let Ne = !0;
      for (let be = 0; be < ue.length; ++be) {
        if (pe[be])
          continue;
        const Oe = ue[be];
        if (oe(Oe))
          ue[be] = Oe.referToSelf.callback(ee), ue[be].referToSelf = Oe.referToSelf, pe[be] = !0, Ne = !1;
        else if (Z(Oe)) {
          const Ae = z(Oe.referTo.references, ue, V);
          Ae ? (ue[be] = Oe.referTo.callback.apply(this, Ae), ue[be].referTo = Oe.referTo, pe[be] = !0, Ne = !1) : me = !0;
        }
      }
      if (Ne && me)
        throw new SyntaxError("Circular reference detected in resolving typed.referTo");
    }
    return ue;
  }
  function ae(P) {
    const V = /\bthis(\(|\.signatures\b)/;
    Object.keys(P).forEach((ee) => {
      const ue = P[ee];
      if (V.test(ue.toString()))
        throw new SyntaxError("Using `this` to self-reference a function is deprecated since typed-function@3. Use typed.referTo and typed.referToSelf instead.");
    });
  }
  function re(P, V) {
    if (o.createCount++, Object.keys(V).length === 0)
      throw new SyntaxError("No signatures provided");
    o.warnAgainstDeprecatedThis && ae(V);
    const ee = [], ue = [], pe = {}, me = [];
    let Ne;
    for (Ne in V) {
      if (!Object.prototype.hasOwnProperty.call(V, Ne))
        continue;
      const lr = w(Ne);
      if (!lr)
        continue;
      ee.forEach(function(dn) {
        if (K(dn, lr))
          throw new TypeError('Conflicting signatures "' + b(dn) + '" and "' + b(lr) + '".');
      }), ee.push(lr);
      const Vr = ue.length;
      ue.push(V[Ne]);
      const Xs = lr.map(N);
      let ma;
      for (ma of U(Xs)) {
        const dn = b(ma);
        me.push({
          params: ma,
          name: dn,
          fn: Vr
        }), ma.every((Ks) => !Ks.hasConversion) && (pe[dn] = Vr);
      }
    }
    me.sort(B);
    const be = Q(ue, pe, Ln);
    let Oe;
    for (Oe in pe)
      Object.prototype.hasOwnProperty.call(pe, Oe) && (pe[Oe] = be[pe[Oe]]);
    const Ae = [], We = /* @__PURE__ */ new Map();
    for (Oe of me)
      We.has(Oe.name) || (Oe.fn = be[Oe.fn], Ae.push(Oe), We.set(Oe.name, Oe));
    const er = Ae[0] && Ae[0].params.length <= 2 && !x(Ae[0].params), Re = Ae[1] && Ae[1].params.length <= 2 && !x(Ae[1].params), wr = Ae[2] && Ae[2].params.length <= 2 && !x(Ae[2].params), M = Ae[3] && Ae[3].params.length <= 2 && !x(Ae[3].params), X = Ae[4] && Ae[4].params.length <= 2 && !x(Ae[4].params), se = Ae[5] && Ae[5].params.length <= 2 && !x(Ae[5].params), Ee = er && Re && wr && M && X && se;
    for (let lr = 0; lr < Ae.length; ++lr)
      Ae[lr].test = E(Ae[lr].params);
    const ze = er ? y(Ae[0].params[0]) : yt, Ve = Re ? y(Ae[1].params[0]) : yt, Kr = wr ? y(Ae[2].params[0]) : yt, ca = M ? y(Ae[3].params[0]) : yt, qi = X ? y(Ae[4].params[0]) : yt, Os = se ? y(Ae[5].params[0]) : yt, Li = er ? y(Ae[0].params[1]) : yt, Ts = Re ? y(Ae[1].params[1]) : yt, Bs = wr ? y(Ae[2].params[1]) : yt, _s = M ? y(Ae[3].params[1]) : yt, Fs = X ? y(Ae[4].params[1]) : yt, $s = se ? y(Ae[5].params[1]) : yt;
    for (let lr = 0; lr < Ae.length; ++lr)
      Ae[lr].implementation = G(Ae[lr].params, Ae[lr].fn);
    const Rs = er ? Ae[0].implementation : ya, Is = Re ? Ae[1].implementation : ya, Ps = wr ? Ae[2].implementation : ya, qs = M ? Ae[3].implementation : ya, Ls = X ? Ae[4].implementation : ya, zs = se ? Ae[5].implementation : ya, Us = er ? Ae[0].params.length : -1, ks = Re ? Ae[1].params.length : -1, la = wr ? Ae[2].params.length : -1, fa = M ? Ae[3].params.length : -1, Gs = X ? Ae[4].params.length : -1, Vs = se ? Ae[5].params.length : -1, Hs = Ee ? 6 : 0, Zs = Ae.length, Ys = Ae.map((lr) => lr.test), Ws = Ae.map((lr) => lr.implementation), Js = function() {
      for (let Vr = Hs; Vr < Zs; Vr++)
        if (Ys[Vr](arguments))
          return Ws[Vr].apply(this, arguments);
      return o.onMismatch(P, arguments, Ae);
    };
    function Ln(lr, Vr) {
      return arguments.length === Us && ze(lr) && Li(Vr) ? Rs.apply(this, arguments) : arguments.length === ks && Ve(lr) && Ts(Vr) ? Is.apply(this, arguments) : arguments.length === la && Kr(lr) && Bs(Vr) ? Ps.apply(this, arguments) : arguments.length === fa && ca(lr) && _s(Vr) ? qs.apply(this, arguments) : arguments.length === Gs && qi(lr) && Fs(Vr) ? Ls.apply(this, arguments) : arguments.length === Vs && Os(lr) && $s(Vr) ? zs.apply(this, arguments) : Js.apply(this, arguments);
    }
    try {
      Object.defineProperty(Ln, "name", {
        value: P
      });
    } catch {
    }
    return Ln.signatures = pe, Ln._typedFunctionData = {
      signatures: Ae,
      signatureMap: We
    }, Ln;
  }
  function fe(P, V, ee) {
    throw T(P, V, ee);
  }
  function de(P) {
    return ie(P, 0, P.length - 1);
  }
  function le(P) {
    return P[P.length - 1];
  }
  function ie(P, V, ee) {
    return Array.prototype.slice.call(P, V, ee);
  }
  function ye(P, V) {
    for (let ee = 0; ee < P.length; ee++)
      if (V(P[ee]))
        return P[ee];
  }
  function _e(P, V) {
    return Array.prototype.concat.apply([], P.map(V));
  }
  function De() {
    const P = de(arguments).map((ee) => b(w(ee))), V = le(arguments);
    if (typeof V != "function")
      throw new TypeError("Callback function expected as last argument");
    return Be(P, V);
  }
  function Be(P, V) {
    return {
      referTo: {
        references: P,
        callback: V
      }
    };
  }
  function k(P) {
    if (typeof P != "function")
      throw new TypeError("Callback function expected as first argument");
    return {
      referToSelf: {
        callback: P
      }
    };
  }
  function Z(P) {
    return P && typeof P.referTo == "object" && Array.isArray(P.referTo.references) && typeof P.referTo.callback == "function";
  }
  function oe(P) {
    return P && typeof P.referToSelf == "object" && typeof P.referToSelf.callback == "function";
  }
  function H(P, V) {
    if (!P)
      return V;
    if (V && V !== P) {
      const ee = new Error("Function names do not match (expected: " + P + ", actual: " + V + ")");
      throw ee.data = {
        actual: V,
        expected: P
      }, ee;
    }
    return P;
  }
  function W(P) {
    let V;
    for (const ee in P)
      Object.prototype.hasOwnProperty.call(P, ee) && (m(P[ee]) || typeof P[ee].signature == "string") && (V = H(V, P[ee].name));
    return V;
  }
  function te(P, V) {
    let ee;
    for (ee in V)
      if (Object.prototype.hasOwnProperty.call(V, ee)) {
        if (ee in P && V[ee] !== P[ee]) {
          const ue = new Error('Signature "' + ee + '" is defined twice');
          throw ue.data = {
            signature: ee,
            sourceFunction: V[ee],
            destFunction: P[ee]
          }, ue;
        }
        P[ee] = V[ee];
      }
  }
  const ge = o;
  o = function(P) {
    const V = typeof P == "string", ee = V ? 1 : 0;
    let ue = V ? P : "";
    const pe = {};
    for (let me = ee; me < arguments.length; ++me) {
      const Ne = arguments[me];
      let be = {}, Oe;
      if (typeof Ne == "function" ? (Oe = Ne.name, typeof Ne.signature == "string" ? be[Ne.signature] = Ne : m(Ne) && (be = Ne.signatures)) : r(Ne) && (be = Ne, V || (Oe = W(Ne))), Object.keys(be).length === 0) {
        const Ae = new TypeError("Argument to 'typed' at index " + me + " is not a (typed) function, nor an object with signatures as keys and functions as values.");
        throw Ae.data = {
          index: me,
          argument: Ne
        }, Ae;
      }
      V || (ue = H(ue, Oe)), te(pe, be);
    }
    return re(ue || "", pe);
  }, o.create = yh, o.createCount = ge.createCount, o.onMismatch = fe, o.throwMismatchError = fe, o.createError = T, o.clear = u, o.clearConversions = s, o.addTypes = l, o._findType = f, o.referTo = De, o.referToSelf = k, o.convert = p, o.findSignature = v, o.find = d, o.isTypedFunction = m, o.warnAgainstDeprecatedThis = !0, o.addType = function(P, V) {
    let ee = "any";
    V !== !1 && n.has("Object") && (ee = "Object"), o.addTypes([P], ee);
  };
  function ve(P) {
    if (!P || typeof P.from != "string" || typeof P.to != "string" || typeof P.convert != "function")
      throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");
    if (P.to === P.from)
      throw new SyntaxError('Illegal to define conversion from "' + P.from + '" to itself.');
  }
  return o.addConversion = function(P) {
    ve(P);
    const V = f(P.to);
    if (V.conversionsTo.every(function(ee) {
      return ee.from !== P.from;
    }))
      V.conversionsTo.push({
        from: P.from,
        convert: P.convert,
        index: i++
      });
    else
      throw new Error('There is already a conversion from "' + P.from + '" to "' + V.name + '"');
  }, o.addConversions = function(P) {
    P.forEach(o.addConversion);
  }, o.removeConversion = function(P) {
    ve(P);
    const V = f(P.to), ee = ye(V.conversionsTo, (pe) => pe.from === P.from);
    if (!ee)
      throw new Error("Attempt to remove nonexistent conversion from " + P.from + " to " + P.to);
    if (ee.convert !== P.convert)
      throw new Error("Conversion to remove does not match existing conversion");
    const ue = V.conversionsTo.indexOf(ee);
    V.conversionsTo.splice(ue, 1);
  }, o.resolve = function(P, V) {
    if (!m(P))
      throw new TypeError(rf);
    const ee = P._typedFunctionData.signatures;
    for (let ue = 0; ue < ee.length; ++ue)
      if (ee[ue].test(V))
        return ee[ue];
    return null;
  }, o;
}
const Ea = yh();
function Ie(r) {
  return typeof r == "boolean" ? !0 : isFinite(r) ? r === Math.round(r) : !1;
}
var An = Math.sign || function(r) {
  return r > 0 ? 1 : r < 0 ? -1 : 0;
}, Yx = Math.log2 || function(e) {
  return Math.log(e) / Math.LN2;
}, Wx = Math.log10 || function(e) {
  return Math.log(e) / Math.LN10;
}, Jx = Math.log1p || function(r) {
  return Math.log(r + 1);
}, Xx = Math.cbrt || function(e) {
  if (e === 0)
    return e;
  var t = e < 0, n;
  return t && (e = -e), isFinite(e) ? (n = Math.exp(Math.log(e) / 3), n = (e / (n * n) + 2 * n) / 3) : n = e, t ? -n : n;
}, Kx = Math.expm1 || function(e) {
  return e >= 2e-4 || e <= -2e-4 ? Math.exp(e) - 1 : e + e * e / 2 + e * e * e / 6;
};
function fu(r, e, t) {
  var n = {
    2: "0b",
    8: "0o",
    16: "0x"
  }, a = n[e], i = "";
  if (t) {
    if (t < 1)
      throw new Error("size must be in greater than 0");
    if (!Ie(t))
      throw new Error("size must be an integer");
    if (r > 2 ** (t - 1) - 1 || r < -(2 ** (t - 1)))
      throw new Error("Value must be in range [-2^".concat(t - 1, ", 2^").concat(t - 1, "-1]"));
    if (!Ie(r))
      throw new Error("Value must be an integer");
    r < 0 && (r = r + 2 ** t), i = "i".concat(t);
  }
  var o = "";
  return r < 0 && (r = -r, o = "-"), "".concat(o).concat(a).concat(r.toString(e)).concat(i);
}
function Hn(r, e) {
  if (typeof e == "function")
    return e(r);
  if (r === 1 / 0)
    return "Infinity";
  if (r === -1 / 0)
    return "-Infinity";
  if (isNaN(r))
    return "NaN";
  var t = "auto", n, a;
  if (e && (e.notation && (t = e.notation), Xe(e) ? n = e : Xe(e.precision) && (n = e.precision), e.wordSize && (a = e.wordSize, typeof a != "number")))
    throw new Error('Option "wordSize" must be a number');
  switch (t) {
    case "fixed":
      return bh(r, n);
    case "exponential":
      return xh(r, n);
    case "engineering":
      return Qx(r, n);
    case "bin":
      return fu(r, 2, a);
    case "oct":
      return fu(r, 8, a);
    case "hex":
      return fu(r, 16, a);
    case "auto":
      return jx(r, n, e && e).replace(/((\.\d*?)(0+))($|e)/, function() {
        var i = arguments[2], o = arguments[4];
        return i !== "." ? i + o : o;
      });
    default:
      throw new Error('Unknown notation "' + t + '". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
function ss(r) {
  var e = String(r).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
  if (!e)
    throw new SyntaxError("Invalid number " + r);
  var t = e[1], n = e[2], a = parseFloat(e[4] || "0"), i = n.indexOf(".");
  a += i !== -1 ? i - 1 : n.length - 1;
  var o = n.replace(".", "").replace(/^0*/, function(f) {
    return a -= f.length, "";
  }).replace(/0*$/, "").split("").map(function(f) {
    return parseInt(f);
  });
  return o.length === 0 && (o.push(0), a++), {
    sign: t,
    coefficients: o,
    exponent: a
  };
}
function Qx(r, e) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var t = ss(r), n = us(t, e), a = n.exponent, i = n.coefficients, o = a % 3 === 0 ? a : a < 0 ? a - 3 - a % 3 : a - a % 3;
  if (Xe(e))
    for (; e > i.length || a - o + 1 > i.length; )
      i.push(0);
  else
    for (var f = Math.abs(a - o) - (i.length - 1), l = 0; l < f; l++)
      i.push(0);
  for (var u = Math.abs(a - o), s = 1; u > 0; )
    s++, u--;
  var c = i.slice(s).join(""), m = Xe(e) && c.length || c.match(/[1-9]/) ? "." + c : "", v = i.slice(0, s).join("") + m + "e" + (a >= 0 ? "+" : "") + o.toString();
  return n.sign + v;
}
function bh(r, e) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var t = ss(r), n = typeof e == "number" ? us(t, t.exponent + 1 + e) : t, a = n.coefficients, i = n.exponent + 1, o = i + (e || 0);
  return a.length < o && (a = a.concat(Ma(o - a.length))), i < 0 && (a = Ma(-i + 1).concat(a), i = 1), i < a.length && a.splice(i, 0, i === 0 ? "0." : "."), n.sign + a.join("");
}
function xh(r, e) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var t = ss(r), n = e ? us(t, e) : t, a = n.coefficients, i = n.exponent;
  a.length < e && (a = a.concat(Ma(e - a.length)));
  var o = a.shift();
  return n.sign + o + (a.length > 0 ? "." + a.join("") : "") + "e" + (i >= 0 ? "+" : "") + i;
}
function jx(r, e, t) {
  if (isNaN(r) || !isFinite(r))
    return String(r);
  var n = t && t.lowerExp !== void 0 ? t.lowerExp : -3, a = t && t.upperExp !== void 0 ? t.upperExp : 5, i = ss(r), o = e ? us(i, e) : i;
  if (o.exponent < n || o.exponent >= a)
    return xh(r, e);
  var f = o.coefficients, l = o.exponent;
  f.length < e && (f = f.concat(Ma(e - f.length))), f = f.concat(Ma(l - f.length + 1 + (f.length < e ? e - f.length : 0))), f = Ma(-l).concat(f);
  var u = l > 0 ? l : 0;
  return u < f.length - 1 && f.splice(u + 1, 0, "."), o.sign + f.join("");
}
function us(r, e) {
  for (var t = {
    sign: r.sign,
    coefficients: r.coefficients,
    exponent: r.exponent
  }, n = t.coefficients; e <= 0; )
    n.unshift(0), t.exponent++, e++;
  if (n.length > e) {
    var a = n.splice(e, n.length - e);
    if (a[0] >= 5) {
      var i = e - 1;
      for (n[i]++; n[i] === 10; )
        n.pop(), i === 0 && (n.unshift(0), t.exponent++, i++), i--, n[i]++;
    }
  }
  return t;
}
function Ma(r) {
  for (var e = [], t = 0; t < r; t++)
    e.push(0);
  return e;
}
function ew(r) {
  return r.toExponential().replace(/e.*$/, "").replace(/^0\.?0*|\./, "").length;
}
var rw = Number.EPSILON || 2220446049250313e-31;
function dt(r, e, t) {
  if (t == null)
    return r === e;
  if (r === e)
    return !0;
  if (isNaN(r) || isNaN(e))
    return !1;
  if (isFinite(r) && isFinite(e)) {
    var n = Math.abs(r - e);
    return n < rw ? !0 : n <= Math.max(Math.abs(r), Math.abs(e)) * t;
  }
  return !1;
}
var tw = Math.acosh || function(r) {
  return Math.log(Math.sqrt(r * r - 1) + r);
}, nw = Math.asinh || function(r) {
  return Math.log(Math.sqrt(r * r + 1) + r);
}, aw = Math.atanh || function(r) {
  return Math.log((1 + r) / (1 - r)) / 2;
}, iw = Math.cosh || function(r) {
  return (Math.exp(r) + Math.exp(-r)) / 2;
}, ow = Math.sinh || function(r) {
  return (Math.exp(r) - Math.exp(-r)) / 2;
}, sw = Math.tanh || function(r) {
  var e = Math.exp(2 * r);
  return (e - 1) / (e + 1);
};
function uw(r, e) {
  var t = r > 0 ? !0 : r < 0 ? !1 : 1 / r === 1 / 0, n = e > 0 ? !0 : e < 0 ? !1 : 1 / e === 1 / 0;
  return t ^ n ? -r : r;
}
function mu(r, e, t) {
  var n = r.constructor, a = new n(2), i = "";
  if (t) {
    if (t < 1)
      throw new Error("size must be in greater than 0");
    if (!Ie(t))
      throw new Error("size must be an integer");
    if (r.greaterThan(a.pow(t - 1).sub(1)) || r.lessThan(a.pow(t - 1).mul(-1)))
      throw new Error("Value must be in range [-2^".concat(t - 1, ", 2^").concat(t - 1, "-1]"));
    if (!r.isInteger())
      throw new Error("Value must be an integer");
    r.lessThan(0) && (r = r.add(a.pow(t))), i = "i".concat(t);
  }
  switch (e) {
    case 2:
      return "".concat(r.toBinary()).concat(i);
    case 8:
      return "".concat(r.toOctal()).concat(i);
    case 16:
      return "".concat(r.toHexadecimal()).concat(i);
    default:
      throw new Error("Base ".concat(e, " not supported "));
  }
}
function cw(r, e) {
  if (typeof e == "function")
    return e(r);
  if (!r.isFinite())
    return r.isNaN() ? "NaN" : r.gt(0) ? "Infinity" : "-Infinity";
  var t = "auto", n, a;
  if (e !== void 0 && (e.notation && (t = e.notation), typeof e == "number" ? n = e : e.precision !== void 0 && (n = e.precision), e.wordSize && (a = e.wordSize, typeof a != "number")))
    throw new Error('Option "wordSize" must be a number');
  switch (t) {
    case "fixed":
      return fw(r, n);
    case "exponential":
      return tf(r, n);
    case "engineering":
      return lw(r, n);
    case "bin":
      return mu(r, 2, a);
    case "oct":
      return mu(r, 8, a);
    case "hex":
      return mu(r, 16, a);
    case "auto": {
      var i = e && e.lowerExp !== void 0 ? e.lowerExp : -3, o = e && e.upperExp !== void 0 ? e.upperExp : 5;
      if (r.isZero())
        return "0";
      var f, l = r.toSignificantDigits(n), u = l.e;
      return u >= i && u < o ? f = l.toFixed() : f = tf(r, n), f.replace(/((\.\d*?)(0+))($|e)/, function() {
        var s = arguments[2], c = arguments[4];
        return s !== "." ? s + c : c;
      });
    }
    default:
      throw new Error('Unknown notation "' + t + '". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
function lw(r, e) {
  var t = r.e, n = t % 3 === 0 ? t : t < 0 ? t - 3 - t % 3 : t - t % 3, a = r.mul(Math.pow(10, -n)), i = a.toPrecision(e);
  if (i.indexOf("e") !== -1) {
    var o = r.constructor;
    i = new o(i).toFixed();
  }
  return i + "e" + (t >= 0 ? "+" : "") + n.toString();
}
function tf(r, e) {
  return e !== void 0 ? r.toExponential(e - 1) : r.toExponential();
}
function fw(r, e) {
  return r.toFixed(e);
}
function mw(r, e) {
  var t = r.length - e.length, n = r.length;
  return r.substring(t, n) === e;
}
function Je(r, e) {
  var t = vw(r, e);
  return e && typeof e == "object" && "truncate" in e && t.length > e.truncate ? t.substring(0, e.truncate - 3) + "..." : t;
}
function vw(r, e) {
  if (typeof r == "number")
    return Hn(r, e);
  if (rr(r))
    return cw(r, e);
  if (pw(r))
    return !e || e.fraction !== "decimal" ? r.s * r.n + "/" + r.d : r.toString();
  if (Array.isArray(r))
    return wh(r, e);
  if (Hr(r))
    return Da(r);
  if (typeof r == "function")
    return r.syntax ? String(r.syntax) : "function";
  if (r && typeof r == "object") {
    if (typeof r.format == "function")
      return r.format(e);
    if (r && r.toString(e) !== {}.toString())
      return r.toString(e);
    var t = Object.keys(r).map((n) => Da(n) + ": " + Je(r[n], e));
    return "{" + t.join(", ") + "}";
  }
  return String(r);
}
function Da(r) {
  for (var e = String(r), t = "", n = 0; n < e.length; ) {
    var a = e.charAt(n);
    t += a in nf ? nf[a] : a, n++;
  }
  return '"' + t + '"';
}
var nf = {
  '"': '\\"',
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t"
};
function Nt(r) {
  var e = String(r);
  return e = e.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), e;
}
function wh(r, e) {
  if (Array.isArray(r)) {
    for (var t = "[", n = r.length, a = 0; a < n; a++)
      a !== 0 && (t += ", "), t += wh(r[a], e);
    return t += "]", t;
  } else
    return Je(r, e);
}
function pw(r) {
  return r && typeof r == "object" && typeof r.s == "number" && typeof r.n == "number" && typeof r.d == "number" || !1;
}
function Ju(r, e) {
  if (!Hr(r))
    throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: " + hr(r) + ", index: 0)");
  if (!Hr(e))
    throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: " + hr(e) + ", index: 1)");
  return r === e ? 0 : r > e ? 1 : -1;
}
function Ke(r, e, t) {
  if (!(this instanceof Ke))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.actual = r, this.expected = e, this.relation = t, this.message = "Dimension mismatch (" + (Array.isArray(r) ? "[" + r.join(", ") + "]" : r) + " " + (this.relation || "!=") + " " + (Array.isArray(e) ? "[" + e.join(", ") + "]" : e) + ")", this.stack = new Error().stack;
}
Ke.prototype = new RangeError();
Ke.prototype.constructor = RangeError;
Ke.prototype.name = "DimensionError";
Ke.prototype.isDimensionError = !0;
function Rt(r, e, t) {
  if (!(this instanceof Rt))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.index = r, arguments.length < 3 ? (this.min = 0, this.max = e) : (this.min = e, this.max = t), this.min !== void 0 && this.index < this.min ? this.message = "Index out of range (" + this.index + " < " + this.min + ")" : this.max !== void 0 && this.index >= this.max ? this.message = "Index out of range (" + this.index + " > " + (this.max - 1) + ")" : this.message = "Index out of range (" + this.index + ")", this.stack = new Error().stack;
}
Rt.prototype = new RangeError();
Rt.prototype.constructor = RangeError;
Rt.prototype.name = "IndexError";
Rt.prototype.isIndexError = !0;
function Ye(r) {
  for (var e = []; Array.isArray(r); )
    e.push(r.length), r = r[0];
  return e;
}
function Nh(r, e, t) {
  var n, a = r.length;
  if (a !== e[t])
    throw new Ke(a, e[t]);
  if (t < e.length - 1) {
    var i = t + 1;
    for (n = 0; n < a; n++) {
      var o = r[n];
      if (!Array.isArray(o))
        throw new Ke(e.length - 1, e.length, "<");
      Nh(r[n], e, i);
    }
  } else
    for (n = 0; n < a; n++)
      if (Array.isArray(r[n]))
        throw new Ke(e.length + 1, e.length, ">");
}
function af(r, e) {
  var t = e.length === 0;
  if (t) {
    if (Array.isArray(r))
      throw new Ke(r.length, 0);
  } else
    Nh(r, e, 0);
}
function To(r, e) {
  var t = r.isMatrix ? r._size : Ye(r), n = e._sourceSize;
  n.forEach((a, i) => {
    if (a !== null && a !== t[i])
      throw new Ke(a, t[i]);
  });
}
function pr(r, e) {
  if (r !== void 0) {
    if (!Xe(r) || !Ie(r))
      throw new TypeError("Index must be an integer (value: " + r + ")");
    if (r < 0 || typeof e == "number" && r >= e)
      throw new Rt(r, e);
  }
}
function Ia(r) {
  for (var e = 0; e < r._dimensions.length; ++e) {
    var t = r._dimensions[e];
    if (t._data && sr(t._data)) {
      if (t._size[0] === 0)
        return !0;
    } else if (t.isRange) {
      if (t.start === t.end)
        return !0;
    } else if (Hr(t) && t.length === 0)
      return !0;
  }
  return !1;
}
function Pa(r, e, t) {
  if (!Array.isArray(e))
    throw new TypeError("Array expected");
  if (e.length === 0)
    throw new Error("Resizing to scalar is not supported");
  e.forEach(function(a) {
    if (!Xe(a) || !Ie(a) || a < 0)
      throw new TypeError("Invalid size, must contain positive integers (size: " + Je(e) + ")");
  }), (Xe(r) || rr(r)) && (r = [r]);
  var n = t !== void 0 ? t : 0;
  return Xu(r, e, 0, n), r;
}
function Xu(r, e, t, n) {
  var a, i, o = r.length, f = e[t], l = Math.min(o, f);
  if (r.length = f, t < e.length - 1) {
    var u = t + 1;
    for (a = 0; a < l; a++)
      i = r[a], Array.isArray(i) || (i = [i], r[a] = i), Xu(i, e, u, n);
    for (a = l; a < f; a++)
      i = [], r[a] = i, Xu(i, e, u, n);
  } else {
    for (a = 0; a < l; a++)
      for (; Array.isArray(r[a]); )
        r[a] = r[a][0];
    for (a = l; a < f; a++)
      r[a] = n;
  }
}
function Tc(r, e) {
  var t = or(r), n = t.length;
  if (!Array.isArray(r) || !Array.isArray(e))
    throw new TypeError("Array expected");
  if (e.length === 0)
    throw new Ke(0, n, "!=");
  e = Bc(e, n);
  var a = Ah(e);
  if (n !== a)
    throw new Ke(a, n, "!=");
  try {
    return dw(t, e);
  } catch (i) {
    throw i instanceof Ke ? new Ke(a, n, "!=") : i;
  }
}
function Bc(r, e) {
  var t = Ah(r), n = r.slice(), a = -1, i = r.indexOf(a), o = r.indexOf(a, i + 1) >= 0;
  if (o)
    throw new Error("More than one wildcard in sizes");
  var f = i >= 0, l = e % t === 0;
  if (f)
    if (l)
      n[i] = -e / t;
    else
      throw new Error("Could not replace wildcard, since " + e + " is no multiple of " + -t);
  return n;
}
function Ah(r) {
  return r.reduce((e, t) => e * t, 1);
}
function dw(r, e) {
  for (var t = r, n, a = e.length - 1; a > 0; a--) {
    var i = e[a];
    n = [];
    for (var o = t.length / i, f = 0; f < o; f++)
      n.push(t.slice(f * i, (f + 1) * i));
    t = n;
  }
  return t;
}
function Bo(r, e) {
  for (var t = e || Ye(r); Array.isArray(r) && r.length === 1; )
    r = r[0], t.shift();
  for (var n = t.length; t[n - 1] === 1; )
    n--;
  return n < t.length && (r = Eh(r, n, 0), t.length = n), r;
}
function Eh(r, e, t) {
  var n, a;
  if (t < e) {
    var i = t + 1;
    for (n = 0, a = r.length; n < a; n++)
      r[n] = Eh(r[n], e, i);
  } else
    for (; Array.isArray(r); )
      r = r[0];
  return r;
}
function Dh(r, e, t, n) {
  var a = n || Ye(r);
  if (t)
    for (var i = 0; i < t; i++)
      r = [r], a.unshift(1);
  for (r = Sh(r, e, 0); a.length < e; )
    a.push(1);
  return r;
}
function Sh(r, e, t) {
  var n, a;
  if (Array.isArray(r)) {
    var i = t + 1;
    for (n = 0, a = r.length; n < a; n++)
      r[n] = Sh(r[n], e, i);
  } else
    for (var o = t; o < e; o++)
      r = [r];
  return r;
}
function or(r) {
  if (!Array.isArray(r))
    return r;
  var e = [];
  return r.forEach(function t(n) {
    Array.isArray(n) ? n.forEach(t) : e.push(n);
  }), e;
}
function sn(r, e) {
  return Array.prototype.map.call(r, e);
}
function cs(r, e) {
  Array.prototype.forEach.call(r, e);
}
function Ch(r, e) {
  if (Ye(r).length !== 1)
    throw new Error("Only one dimensional matrices supported");
  return Array.prototype.filter.call(r, e);
}
function _o(r, e) {
  if (Ye(r).length !== 1)
    throw new Error("Only one dimensional matrices supported");
  return Array.prototype.filter.call(r, (t) => e.test(t));
}
function of(r, e) {
  return Array.prototype.join.call(r, e);
}
function qa(r) {
  if (!Array.isArray(r))
    throw new TypeError("Array input expected");
  if (r.length === 0)
    return r;
  var e = [], t = 0;
  e[0] = {
    value: r[0],
    identifier: 0
  };
  for (var n = 1; n < r.length; n++)
    r[n] === r[n - 1] ? t++ : t = 0, e.push({
      value: r[n],
      identifier: t
    });
  return e;
}
function Fo(r) {
  if (!Array.isArray(r))
    throw new TypeError("Array input expected");
  if (r.length === 0)
    return r;
  for (var e = [], t = 0; t < r.length; t++)
    e.push(r[t].value);
  return e;
}
function wi(r, e) {
  for (var t, n = 0, a = 0; a < r.length; a++) {
    var i = r[a], o = Array.isArray(i);
    if (a === 0 && o && (n = i.length), o && i.length !== n)
      return;
    var f = o ? wi(i, e) : e(i);
    if (t === void 0)
      t = f;
    else if (t !== f)
      return "mixed";
  }
  return t;
}
function Mh(r, e, t, n) {
  if (n < t) {
    if (r.length !== e.length)
      throw new Ke(r.length, e.length);
    for (var a = [], i = 0; i < r.length; i++)
      a[i] = Mh(r[i], e[i], t, n + 1);
    return a;
  } else
    return r.concat(e);
}
function Oh() {
  var r = Array.prototype.slice.call(arguments, 0, -1), e = Array.prototype.slice.call(arguments, -1);
  if (r.length === 1)
    return r[0];
  if (r.length > 1)
    return r.slice(1).reduce(function(t, n) {
      return Mh(t, n, e, 0);
    }, r[0]);
  throw new Error("Wrong number of arguments in function concat");
}
function hw() {
  for (var r = arguments.length, e = new Array(r), t = 0; t < r; t++)
    e[t] = arguments[t];
  for (var n = e.map((m) => m.length), a = Math.max(...n), i = new Array(a).fill(null), o = 0; o < e.length; o++)
    for (var f = e[o], l = n[o], u = 0; u < l; u++) {
      var s = a - l + u;
      f[u] > i[s] && (i[s] = f[u]);
    }
  for (var c = 0; c < e.length; c++)
    $o(e[c], i);
  return i;
}
function $o(r, e) {
  for (var t = e.length, n = r.length, a = 0; a < n; a++) {
    var i = t - n + a;
    if (r[a] < e[i] && r[a] > 1 || r[a] > e[i])
      throw new Error("shape missmatch: missmatch is found in arg with shape (".concat(r, ") not possible to broadcast dimension ").concat(n, " with size ").concat(r[a], " to size ").concat(e[i]));
  }
}
function sf(r, e) {
  var t = Ye(r);
  if (Wn(t, e))
    return r;
  $o(t, e);
  var n = hw(t, e), a = n.length, i = [...Array(a - t.length).fill(1), ...t], o = yw(r);
  t.length < a && (o = Tc(o, i), t = Ye(o));
  for (var f = 0; f < a; f++)
    t[f] < n[f] && (o = gw(o, n[f], f), t = Ye(o));
  return o;
}
function gw(r, e, t) {
  return Oh(...Array(e).fill(r), t);
}
function yw(r) {
  return Rr([], r);
}
function q(r, e, t, n) {
  function a(i) {
    var o = Vx(i, e.map(ww));
    return bw(r, e, i), t(o);
  }
  return a.isFactory = !0, a.fn = r, a.dependencies = e.slice().sort(), n && (a.meta = n), a;
}
function bw(r, e, t) {
  var n = e.filter((i) => !xw(i)).every((i) => t[i] !== void 0);
  if (!n) {
    var a = e.filter((i) => t[i] === void 0);
    throw new Error('Cannot create function "'.concat(r, '", ') + "some dependencies are missing: ".concat(a.map((i) => '"'.concat(i, '"')).join(", "), "."));
  }
}
function xw(r) {
  return r && r[0] === "?";
}
function ww(r) {
  return r && r[0] === "?" ? r.slice(1) : r;
}
function rt(r, e) {
  if (Bh(r) && Th(r, e))
    return r[e];
  throw typeof r[e] == "function" && _c(r, e) ? new Error('Cannot access method "' + e + '" as a property') : new Error('No access to property "' + e + '"');
}
function La(r, e, t) {
  if (Bh(r) && Th(r, e))
    return r[e] = t, t;
  throw new Error('No access to property "' + e + '"');
}
function Nw(r, e) {
  return e in r;
}
function Th(r, e) {
  return !r || typeof r != "object" ? !1 : $e(Ew, e) ? !0 : !(e in Object.prototype || e in Function.prototype);
}
function Aw(r, e) {
  if (!_c(r, e))
    throw new Error('No access to method "' + e + '"');
  return r[e];
}
function _c(r, e) {
  return r == null || typeof r[e] != "function" || $e(r, e) && Object.getPrototypeOf && e in Object.getPrototypeOf(r) ? !1 : $e(Dw, e) ? !0 : !(e in Object.prototype || e in Function.prototype);
}
function Bh(r) {
  return typeof r == "object" && r && r.constructor === Object;
}
var Ew = {
  length: !0,
  name: !0
}, Dw = {
  toString: !0,
  valueOf: !0,
  toLocaleString: !0
};
class Fc {
  constructor(e) {
    this.wrappedObject = e;
  }
  keys() {
    return Object.keys(this.wrappedObject);
  }
  get(e) {
    return rt(this.wrappedObject, e);
  }
  set(e, t) {
    return La(this.wrappedObject, e, t), this;
  }
  has(e) {
    return Nw(this.wrappedObject, e);
  }
}
function za() {
  return /* @__PURE__ */ new Map();
}
function Oa(r) {
  if (!r)
    return za();
  if ($c(r))
    return r;
  if (is(r))
    return new Fc(r);
  throw new Error("createMap can create maps from objects or Maps");
}
function Sw(r) {
  if (r instanceof Fc)
    return r.wrappedObject;
  var e = {};
  for (var t of r.keys()) {
    var n = r.get(t);
    La(e, t, n);
  }
  return e;
}
function $c(r) {
  return r ? r instanceof Map || r instanceof Fc || typeof r.set == "function" && typeof r.get == "function" && typeof r.keys == "function" && typeof r.has == "function" : !1;
}
function uf(r) {
  for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
    t[n - 1] = arguments[n];
  for (var a of t)
    if (a) {
      if ($c(a))
        for (var i of a.keys())
          r.set(i, a.get(i));
      else if (is(a))
        for (var o of Object.keys(a))
          r.set(o, a[o]);
    }
  return r;
}
var _h = function() {
  return _h = Ea.create, Ea;
}, Cw = ["?BigNumber", "?Complex", "?DenseMatrix", "?Fraction"], Mw = /* @__PURE__ */ q("typed", Cw, function(e) {
  var {
    BigNumber: t,
    Complex: n,
    DenseMatrix: a,
    Fraction: i
  } = e, o = _h();
  return o.clear(), o.addTypes([
    {
      name: "number",
      test: Xe
    },
    {
      name: "Complex",
      test: on
    },
    {
      name: "BigNumber",
      test: rr
    },
    {
      name: "Fraction",
      test: Si
    },
    {
      name: "Unit",
      test: xt
    },
    // The following type matches a valid variable name, i.e., an alphanumeric
    // string starting with an alphabetic character. It is used (at least)
    // in the definition of the derivative() function, as the argument telling
    // what to differentiate over must (currently) be a variable.
    {
      name: "identifier",
      test: (f) => Hr && /^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])*$/.test(f)
    },
    {
      name: "string",
      test: Hr
    },
    {
      name: "Chain",
      test: hh
    },
    {
      name: "Array",
      test: sr
    },
    {
      name: "Matrix",
      test: Le
    },
    {
      name: "DenseMatrix",
      test: Oo
    },
    {
      name: "SparseMatrix",
      test: Vn
    },
    {
      name: "Range",
      test: Oc
    },
    {
      name: "Index",
      test: as
    },
    {
      name: "boolean",
      test: Tx
    },
    {
      name: "ResultSet",
      test: Bx
    },
    {
      name: "Help",
      test: dh
    },
    {
      name: "function",
      test: _x
    },
    {
      name: "Date",
      test: Fx
    },
    {
      name: "RegExp",
      test: $x
    },
    {
      name: "null",
      test: Rx
    },
    {
      name: "undefined",
      test: Ix
    },
    {
      name: "AccessorNode",
      test: Yn
    },
    {
      name: "ArrayNode",
      test: bt
    },
    {
      name: "AssignmentNode",
      test: Px
    },
    {
      name: "BlockNode",
      test: qx
    },
    {
      name: "ConditionalNode",
      test: Lx
    },
    {
      name: "ConstantNode",
      test: ir
    },
    {
      name: "FunctionNode",
      test: Mn
    },
    {
      name: "FunctionAssignmentNode",
      test: Ci
    },
    {
      name: "IndexNode",
      test: Ya
    },
    {
      name: "Node",
      test: mr
    },
    {
      name: "ObjectNode",
      test: os
    },
    {
      name: "OperatorNode",
      test: Or
    },
    {
      name: "ParenthesisNode",
      test: cn
    },
    {
      name: "RangeNode",
      test: zx
    },
    {
      name: "RelationalNode",
      test: Ux
    },
    {
      name: "SymbolNode",
      test: Ir
    },
    {
      name: "Map",
      test: $c
    },
    {
      name: "Object",
      test: is
    }
    // order 'Object' last, it matches on other classes too
  ]), o.addConversions([{
    from: "number",
    to: "BigNumber",
    convert: function(l) {
      if (t || vu(l), ew(l) > 15)
        throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: " + l + "). Use function bignumber(x) to convert to BigNumber.");
      return new t(l);
    }
  }, {
    from: "number",
    to: "Complex",
    convert: function(l) {
      return n || eo(l), new n(l, 0);
    }
  }, {
    from: "BigNumber",
    to: "Complex",
    convert: function(l) {
      return n || eo(l), new n(l.toNumber(), 0);
    }
  }, {
    from: "Fraction",
    to: "BigNumber",
    convert: function(l) {
      throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.");
    }
  }, {
    from: "Fraction",
    to: "Complex",
    convert: function(l) {
      return n || eo(l), new n(l.valueOf(), 0);
    }
  }, {
    from: "number",
    to: "Fraction",
    convert: function(l) {
      i || pu(l);
      var u = new i(l);
      if (u.valueOf() !== l)
        throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: " + l + "). Use function fraction(x) to convert to Fraction.");
      return u;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: "string",
    to: "number",
    convert: function(l) {
      var u = Number(l);
      if (isNaN(u))
        throw new Error('Cannot convert "' + l + '" to a number');
      return u;
    }
  }, {
    from: "string",
    to: "BigNumber",
    convert: function(l) {
      t || vu(l);
      try {
        return new t(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to BigNumber');
      }
    }
  }, {
    from: "string",
    to: "Fraction",
    convert: function(l) {
      i || pu(l);
      try {
        return new i(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to Fraction');
      }
    }
  }, {
    from: "string",
    to: "Complex",
    convert: function(l) {
      n || eo(l);
      try {
        return new n(l);
      } catch {
        throw new Error('Cannot convert "' + l + '" to Complex');
      }
    }
  }, {
    from: "boolean",
    to: "number",
    convert: function(l) {
      return +l;
    }
  }, {
    from: "boolean",
    to: "BigNumber",
    convert: function(l) {
      return t || vu(l), new t(+l);
    }
  }, {
    from: "boolean",
    to: "Fraction",
    convert: function(l) {
      return i || pu(l), new i(+l);
    }
  }, {
    from: "boolean",
    to: "string",
    convert: function(l) {
      return String(l);
    }
  }, {
    from: "Array",
    to: "Matrix",
    convert: function(l) {
      return a || Ow(), new a(l);
    }
  }, {
    from: "Matrix",
    to: "Array",
    convert: function(l) {
      return l.valueOf();
    }
  }]), o.onMismatch = (f, l, u) => {
    var s = o.createError(f, l, u);
    if (["wrongType", "mismatch"].includes(s.data.category) && l.length === 1 && Cn(l[0]) && // check if the function can be unary:
    u.some((m) => !m.params.includes(","))) {
      var c = new TypeError("Function '".concat(f, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(f, ")'."));
      throw c.data = s.data, c;
    }
    throw s;
  }, o.onMismatch = (f, l, u) => {
    var s = o.createError(f, l, u);
    if (["wrongType", "mismatch"].includes(s.data.category) && l.length === 1 && Cn(l[0]) && // check if the function can be unary:
    u.some((m) => !m.params.includes(","))) {
      var c = new TypeError("Function '".concat(f, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(f, ")'."));
      throw c.data = s.data, c;
    }
    throw s;
  }, o;
});
function vu(r) {
  throw new Error("Cannot convert value ".concat(r, " into a BigNumber: no class 'BigNumber' provided"));
}
function eo(r) {
  throw new Error("Cannot convert value ".concat(r, " into a Complex number: no class 'Complex' provided"));
}
function Ow() {
  throw new Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided");
}
function pu(r) {
  throw new Error("Cannot convert value ".concat(r, " into a Fraction, no class 'Fraction' provided."));
}
var Tw = "ResultSet", Bw = [], _w = /* @__PURE__ */ q(Tw, Bw, () => {
  function r(e) {
    if (!(this instanceof r))
      throw new SyntaxError("Constructor must be called with the new operator");
    this.entries = e || [];
  }
  return r.prototype.type = "ResultSet", r.prototype.isResultSet = !0, r.prototype.valueOf = function() {
    return this.entries;
  }, r.prototype.toString = function() {
    return "[" + this.entries.join(", ") + "]";
  }, r.prototype.toJSON = function() {
    return {
      mathjs: "ResultSet",
      entries: this.entries
    };
  }, r.fromJSON = function(e) {
    return new r(e.entries);
  }, r;
}, {
  isClass: !0
});
/*!
 *  decimal.js v10.4.3
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */
var Sa = 9e15, Bn = 1e9, Ku = "0123456789abcdef", Ro = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", Io = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", Qu = {
  // These values must be integers within the stated ranges (inclusive).
  // Most of these values can be changed at run-time using the `Decimal.config` method.
  // The maximum number of significant digits of the result of a calculation or base conversion.
  // E.g. `Decimal.config({ precision: 20 });`
  precision: 20,
  // 1 to MAX_DIGITS
  // The rounding mode used when rounding to `precision`.
  //
  // ROUND_UP         0 Away from zero.
  // ROUND_DOWN       1 Towards zero.
  // ROUND_CEIL       2 Towards +Infinity.
  // ROUND_FLOOR      3 Towards -Infinity.
  // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
  // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
  // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
  // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
  // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
  //
  // E.g.
  // `Decimal.rounding = 4;`
  // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
  rounding: 4,
  // 0 to 8
  // The modulo mode used when calculating the modulus: a mod n.
  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
  // The remainder (r) is calculated as: r = a - n * q.
  //
  // UP         0 The remainder is positive if the dividend is negative, else is negative.
  // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
  // FLOOR      3 The remainder has the same sign as the divisor (Python %).
  // HALF_EVEN  6 The IEEE 754 remainder function.
  // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
  //
  // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
  // division (9) are commonly used for the modulus operation. The other rounding modes can also
  // be used, but they may not give useful results.
  modulo: 1,
  // 0 to 9
  // The exponent value at and beneath which `toString` returns exponential notation.
  // JavaScript numbers: -7
  toExpNeg: -7,
  // 0 to -EXP_LIMIT
  // The exponent value at and above which `toString` returns exponential notation.
  // JavaScript numbers: 21
  toExpPos: 21,
  // 0 to EXP_LIMIT
  // The minimum exponent value, beneath which underflow to zero occurs.
  // JavaScript numbers: -324  (5e-324)
  minE: -Sa,
  // -1 to -EXP_LIMIT
  // The maximum exponent value, above which overflow to Infinity occurs.
  // JavaScript numbers: 308  (1.7976931348623157e+308)
  maxE: Sa,
  // 1 to EXP_LIMIT
  // Whether to use cryptographically-secure random number generation, if available.
  crypto: !1
  // true/false
}, Fh, tn, He = !0, ls = "[DecimalError] ", On = ls + "Invalid argument: ", $h = ls + "Precision limit exceeded", Rh = ls + "crypto unavailable", Ih = "[object Decimal]", Yr = Math.floor, Br = Math.pow, Fw = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, $w = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, Rw = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, Ph = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, Ft = 1e7, Ue = 7, Iw = 9007199254740991, Pw = Ro.length - 1, ju = Io.length - 1, xe = { toStringTag: Ih };
xe.absoluteValue = xe.abs = function() {
  var r = new this.constructor(this);
  return r.s < 0 && (r.s = 1), Pe(r);
};
xe.ceil = function() {
  return Pe(new this.constructor(this), this.e + 1, 2);
};
xe.clampedTo = xe.clamp = function(r, e) {
  var t, n = this, a = n.constructor;
  if (r = new a(r), e = new a(e), !r.s || !e.s)
    return new a(NaN);
  if (r.gt(e))
    throw Error(On + e);
  return t = n.cmp(r), t < 0 ? r : n.cmp(e) > 0 ? e : new a(n);
};
xe.comparedTo = xe.cmp = function(r) {
  var e, t, n, a, i = this, o = i.d, f = (r = new i.constructor(r)).d, l = i.s, u = r.s;
  if (!o || !f)
    return !l || !u ? NaN : l !== u ? l : o === f ? 0 : !o ^ l < 0 ? 1 : -1;
  if (!o[0] || !f[0])
    return o[0] ? l : f[0] ? -u : 0;
  if (l !== u)
    return l;
  if (i.e !== r.e)
    return i.e > r.e ^ l < 0 ? 1 : -1;
  for (n = o.length, a = f.length, e = 0, t = n < a ? n : a; e < t; ++e)
    if (o[e] !== f[e])
      return o[e] > f[e] ^ l < 0 ? 1 : -1;
  return n === a ? 0 : n > a ^ l < 0 ? 1 : -1;
};
xe.cosine = xe.cos = function() {
  var r, e, t = this, n = t.constructor;
  return t.d ? t.d[0] ? (r = n.precision, e = n.rounding, n.precision = r + Math.max(t.e, t.sd()) + Ue, n.rounding = 1, t = qw(n, kh(n, t)), n.precision = r, n.rounding = e, Pe(tn == 2 || tn == 3 ? t.neg() : t, r, e, !0)) : new n(1) : new n(NaN);
};
xe.cubeRoot = xe.cbrt = function() {
  var r, e, t, n, a, i, o, f, l, u, s = this, c = s.constructor;
  if (!s.isFinite() || s.isZero())
    return new c(s);
  for (He = !1, i = s.s * Br(s.s * s, 1 / 3), !i || Math.abs(i) == 1 / 0 ? (t = Ur(s.d), r = s.e, (i = (r - t.length + 1) % 3) && (t += i == 1 || i == -2 ? "0" : "00"), i = Br(t, 1 / 3), r = Yr((r + 1) / 3) - (r % 3 == (r < 0 ? -1 : 2)), i == 1 / 0 ? t = "5e" + r : (t = i.toExponential(), t = t.slice(0, t.indexOf("e") + 1) + r), n = new c(t), n.s = s.s) : n = new c(i.toString()), o = (r = c.precision) + 3; ; )
    if (f = n, l = f.times(f).times(f), u = l.plus(s), n = xr(u.plus(s).times(f), u.plus(l), o + 2, 1), Ur(f.d).slice(0, o) === (t = Ur(n.d)).slice(0, o))
      if (t = t.slice(o - 3, o + 1), t == "9999" || !a && t == "4999") {
        if (!a && (Pe(f, r + 1, 0), f.times(f).times(f).eq(s))) {
          n = f;
          break;
        }
        o += 4, a = 1;
      } else {
        (!+t || !+t.slice(1) && t.charAt(0) == "5") && (Pe(n, r + 1, 1), e = !n.times(n).times(n).eq(s));
        break;
      }
  return He = !0, Pe(n, r, c.rounding, e);
};
xe.decimalPlaces = xe.dp = function() {
  var r, e = this.d, t = NaN;
  if (e) {
    if (r = e.length - 1, t = (r - Yr(this.e / Ue)) * Ue, r = e[r], r)
      for (; r % 10 == 0; r /= 10)
        t--;
    t < 0 && (t = 0);
  }
  return t;
};
xe.dividedBy = xe.div = function(r) {
  return xr(this, new this.constructor(r));
};
xe.dividedToIntegerBy = xe.divToInt = function(r) {
  var e = this, t = e.constructor;
  return Pe(xr(e, new t(r), 0, 1, 1), t.precision, t.rounding);
};
xe.equals = xe.eq = function(r) {
  return this.cmp(r) === 0;
};
xe.floor = function() {
  return Pe(new this.constructor(this), this.e + 1, 3);
};
xe.greaterThan = xe.gt = function(r) {
  return this.cmp(r) > 0;
};
xe.greaterThanOrEqualTo = xe.gte = function(r) {
  var e = this.cmp(r);
  return e == 1 || e === 0;
};
xe.hyperbolicCosine = xe.cosh = function() {
  var r, e, t, n, a, i = this, o = i.constructor, f = new o(1);
  if (!i.isFinite())
    return new o(i.s ? 1 / 0 : NaN);
  if (i.isZero())
    return f;
  t = o.precision, n = o.rounding, o.precision = t + Math.max(i.e, i.sd()) + 4, o.rounding = 1, a = i.d.length, a < 32 ? (r = Math.ceil(a / 3), e = (1 / ms(4, r)).toString()) : (r = 16, e = "2.3283064365386962890625e-10"), i = Ua(o, 1, i.times(e), new o(1), !0);
  for (var l, u = r, s = new o(8); u--; )
    l = i.times(i), i = f.minus(l.times(s.minus(l.times(s))));
  return Pe(i, o.precision = t, o.rounding = n, !0);
};
xe.hyperbolicSine = xe.sinh = function() {
  var r, e, t, n, a = this, i = a.constructor;
  if (!a.isFinite() || a.isZero())
    return new i(a);
  if (e = i.precision, t = i.rounding, i.precision = e + Math.max(a.e, a.sd()) + 4, i.rounding = 1, n = a.d.length, n < 3)
    a = Ua(i, 2, a, a, !0);
  else {
    r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, a = a.times(1 / ms(5, r)), a = Ua(i, 2, a, a, !0);
    for (var o, f = new i(5), l = new i(16), u = new i(20); r--; )
      o = a.times(a), a = a.times(f.plus(o.times(l.times(o).plus(u))));
  }
  return i.precision = e, i.rounding = t, Pe(a, e, t, !0);
};
xe.hyperbolicTangent = xe.tanh = function() {
  var r, e, t = this, n = t.constructor;
  return t.isFinite() ? t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + 7, n.rounding = 1, xr(t.sinh(), t.cosh(), n.precision = r, n.rounding = e)) : new n(t.s);
};
xe.inverseCosine = xe.acos = function() {
  var r, e = this, t = e.constructor, n = e.abs().cmp(1), a = t.precision, i = t.rounding;
  return n !== -1 ? n === 0 ? e.isNeg() ? _t(t, a, i) : new t(0) : new t(NaN) : e.isZero() ? _t(t, a + 4, i).times(0.5) : (t.precision = a + 6, t.rounding = 1, e = e.asin(), r = _t(t, a + 4, i).times(0.5), t.precision = a, t.rounding = i, r.minus(e));
};
xe.inverseHyperbolicCosine = xe.acosh = function() {
  var r, e, t = this, n = t.constructor;
  return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (r = n.precision, e = n.rounding, n.precision = r + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, He = !1, t = t.times(t).minus(1).sqrt().plus(t), He = !0, n.precision = r, n.rounding = e, t.ln()) : new n(t);
};
xe.inverseHyperbolicSine = xe.asinh = function() {
  var r, e, t = this, n = t.constructor;
  return !t.isFinite() || t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, He = !1, t = t.times(t).plus(1).sqrt().plus(t), He = !0, n.precision = r, n.rounding = e, t.ln());
};
xe.inverseHyperbolicTangent = xe.atanh = function() {
  var r, e, t, n, a = this, i = a.constructor;
  return a.isFinite() ? a.e >= 0 ? new i(a.abs().eq(1) ? a.s / 0 : a.isZero() ? a : NaN) : (r = i.precision, e = i.rounding, n = a.sd(), Math.max(n, r) < 2 * -a.e - 1 ? Pe(new i(a), r, e, !0) : (i.precision = t = n - a.e, a = xr(a.plus(1), new i(1).minus(a), t + r, 1), i.precision = r + 4, i.rounding = 1, a = a.ln(), i.precision = r, i.rounding = e, a.times(0.5))) : new i(NaN);
};
xe.inverseSine = xe.asin = function() {
  var r, e, t, n, a = this, i = a.constructor;
  return a.isZero() ? new i(a) : (e = a.abs().cmp(1), t = i.precision, n = i.rounding, e !== -1 ? e === 0 ? (r = _t(i, t + 4, n).times(0.5), r.s = a.s, r) : new i(NaN) : (i.precision = t + 6, i.rounding = 1, a = a.div(new i(1).minus(a.times(a)).sqrt().plus(1)).atan(), i.precision = t, i.rounding = n, a.times(2)));
};
xe.inverseTangent = xe.atan = function() {
  var r, e, t, n, a, i, o, f, l, u = this, s = u.constructor, c = s.precision, m = s.rounding;
  if (u.isFinite()) {
    if (u.isZero())
      return new s(u);
    if (u.abs().eq(1) && c + 4 <= ju)
      return o = _t(s, c + 4, m).times(0.25), o.s = u.s, o;
  } else {
    if (!u.s)
      return new s(NaN);
    if (c + 4 <= ju)
      return o = _t(s, c + 4, m).times(0.5), o.s = u.s, o;
  }
  for (s.precision = f = c + 10, s.rounding = 1, t = Math.min(28, f / Ue + 2 | 0), r = t; r; --r)
    u = u.div(u.times(u).plus(1).sqrt().plus(1));
  for (He = !1, e = Math.ceil(f / Ue), n = 1, l = u.times(u), o = new s(u), a = u; r !== -1; )
    if (a = a.times(l), i = o.minus(a.div(n += 2)), a = a.times(l), o = i.plus(a.div(n += 2)), o.d[e] !== void 0)
      for (r = e; o.d[r] === i.d[r] && r--; )
        ;
  return t && (o = o.times(2 << t - 1)), He = !0, Pe(o, s.precision = c, s.rounding = m, !0);
};
xe.isFinite = function() {
  return !!this.d;
};
xe.isInteger = xe.isInt = function() {
  return !!this.d && Yr(this.e / Ue) > this.d.length - 2;
};
xe.isNaN = function() {
  return !this.s;
};
xe.isNegative = xe.isNeg = function() {
  return this.s < 0;
};
xe.isPositive = xe.isPos = function() {
  return this.s > 0;
};
xe.isZero = function() {
  return !!this.d && this.d[0] === 0;
};
xe.lessThan = xe.lt = function(r) {
  return this.cmp(r) < 0;
};
xe.lessThanOrEqualTo = xe.lte = function(r) {
  return this.cmp(r) < 1;
};
xe.logarithm = xe.log = function(r) {
  var e, t, n, a, i, o, f, l, u = this, s = u.constructor, c = s.precision, m = s.rounding, v = 5;
  if (r == null)
    r = new s(10), e = !0;
  else {
    if (r = new s(r), t = r.d, r.s < 0 || !t || !t[0] || r.eq(1))
      return new s(NaN);
    e = r.eq(10);
  }
  if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1))
    return new s(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);
  if (e)
    if (t.length > 1)
      i = !0;
    else {
      for (a = t[0]; a % 10 === 0; )
        a /= 10;
      i = a !== 1;
    }
  if (He = !1, f = c + v, o = En(u, f), n = e ? Po(s, f + 10) : En(r, f), l = xr(o, n, f, 1), Ni(l.d, a = c, m))
    do
      if (f += 10, o = En(u, f), n = e ? Po(s, f + 10) : En(r, f), l = xr(o, n, f, 1), !i) {
        +Ur(l.d).slice(a + 1, a + 15) + 1 == 1e14 && (l = Pe(l, c + 1, 0));
        break;
      }
    while (Ni(l.d, a += 10, m));
  return He = !0, Pe(l, c, m);
};
xe.minus = xe.sub = function(r) {
  var e, t, n, a, i, o, f, l, u, s, c, m, v = this, d = v.constructor;
  if (r = new d(r), !v.d || !r.d)
    return !v.s || !r.s ? r = new d(NaN) : v.d ? r.s = -r.s : r = new d(r.d || v.s !== r.s ? v : NaN), r;
  if (v.s != r.s)
    return r.s = -r.s, v.plus(r);
  if (u = v.d, m = r.d, f = d.precision, l = d.rounding, !u[0] || !m[0]) {
    if (m[0])
      r.s = -r.s;
    else if (u[0])
      r = new d(v);
    else
      return new d(l === 3 ? -0 : 0);
    return He ? Pe(r, f, l) : r;
  }
  if (t = Yr(r.e / Ue), s = Yr(v.e / Ue), u = u.slice(), i = s - t, i) {
    for (c = i < 0, c ? (e = u, i = -i, o = m.length) : (e = m, t = s, o = u.length), n = Math.max(Math.ceil(f / Ue), o) + 2, i > n && (i = n, e.length = 1), e.reverse(), n = i; n--; )
      e.push(0);
    e.reverse();
  } else {
    for (n = u.length, o = m.length, c = n < o, c && (o = n), n = 0; n < o; n++)
      if (u[n] != m[n]) {
        c = u[n] < m[n];
        break;
      }
    i = 0;
  }
  for (c && (e = u, u = m, m = e, r.s = -r.s), o = u.length, n = m.length - o; n > 0; --n)
    u[o++] = 0;
  for (n = m.length; n > i; ) {
    if (u[--n] < m[n]) {
      for (a = n; a && u[--a] === 0; )
        u[a] = Ft - 1;
      --u[a], u[n] += Ft;
    }
    u[n] -= m[n];
  }
  for (; u[--o] === 0; )
    u.pop();
  for (; u[0] === 0; u.shift())
    --t;
  return u[0] ? (r.d = u, r.e = fs(u, t), He ? Pe(r, f, l) : r) : new d(l === 3 ? -0 : 0);
};
xe.modulo = xe.mod = function(r) {
  var e, t = this, n = t.constructor;
  return r = new n(r), !t.d || !r.s || r.d && !r.d[0] ? new n(NaN) : !r.d || t.d && !t.d[0] ? Pe(new n(t), n.precision, n.rounding) : (He = !1, n.modulo == 9 ? (e = xr(t, r.abs(), 0, 3, 1), e.s *= r.s) : e = xr(t, r, 0, n.modulo, 1), e = e.times(r), He = !0, t.minus(e));
};
xe.naturalExponential = xe.exp = function() {
  return ec(this);
};
xe.naturalLogarithm = xe.ln = function() {
  return En(this);
};
xe.negated = xe.neg = function() {
  var r = new this.constructor(this);
  return r.s = -r.s, Pe(r);
};
xe.plus = xe.add = function(r) {
  var e, t, n, a, i, o, f, l, u, s, c = this, m = c.constructor;
  if (r = new m(r), !c.d || !r.d)
    return !c.s || !r.s ? r = new m(NaN) : c.d || (r = new m(r.d || c.s === r.s ? c : NaN)), r;
  if (c.s != r.s)
    return r.s = -r.s, c.minus(r);
  if (u = c.d, s = r.d, f = m.precision, l = m.rounding, !u[0] || !s[0])
    return s[0] || (r = new m(c)), He ? Pe(r, f, l) : r;
  if (i = Yr(c.e / Ue), n = Yr(r.e / Ue), u = u.slice(), a = i - n, a) {
    for (a < 0 ? (t = u, a = -a, o = s.length) : (t = s, n = i, o = u.length), i = Math.ceil(f / Ue), o = i > o ? i + 1 : o + 1, a > o && (a = o, t.length = 1), t.reverse(); a--; )
      t.push(0);
    t.reverse();
  }
  for (o = u.length, a = s.length, o - a < 0 && (a = o, t = s, s = u, u = t), e = 0; a; )
    e = (u[--a] = u[a] + s[a] + e) / Ft | 0, u[a] %= Ft;
  for (e && (u.unshift(e), ++n), o = u.length; u[--o] == 0; )
    u.pop();
  return r.d = u, r.e = fs(u, n), He ? Pe(r, f, l) : r;
};
xe.precision = xe.sd = function(r) {
  var e, t = this;
  if (r !== void 0 && r !== !!r && r !== 1 && r !== 0)
    throw Error(On + r);
  return t.d ? (e = qh(t.d), r && t.e + 1 > e && (e = t.e + 1)) : e = NaN, e;
};
xe.round = function() {
  var r = this, e = r.constructor;
  return Pe(new e(r), r.e + 1, e.rounding);
};
xe.sine = xe.sin = function() {
  var r, e, t = this, n = t.constructor;
  return t.isFinite() ? t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + Math.max(t.e, t.sd()) + Ue, n.rounding = 1, t = zw(n, kh(n, t)), n.precision = r, n.rounding = e, Pe(tn > 2 ? t.neg() : t, r, e, !0)) : new n(NaN);
};
xe.squareRoot = xe.sqrt = function() {
  var r, e, t, n, a, i, o = this, f = o.d, l = o.e, u = o.s, s = o.constructor;
  if (u !== 1 || !f || !f[0])
    return new s(!u || u < 0 && (!f || f[0]) ? NaN : f ? o : 1 / 0);
  for (He = !1, u = Math.sqrt(+o), u == 0 || u == 1 / 0 ? (e = Ur(f), (e.length + l) % 2 == 0 && (e += "0"), u = Math.sqrt(e), l = Yr((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? e = "5e" + l : (e = u.toExponential(), e = e.slice(0, e.indexOf("e") + 1) + l), n = new s(e)) : n = new s(u.toString()), t = (l = s.precision) + 3; ; )
    if (i = n, n = i.plus(xr(o, i, t + 2, 1)).times(0.5), Ur(i.d).slice(0, t) === (e = Ur(n.d)).slice(0, t))
      if (e = e.slice(t - 3, t + 1), e == "9999" || !a && e == "4999") {
        if (!a && (Pe(i, l + 1, 0), i.times(i).eq(o))) {
          n = i;
          break;
        }
        t += 4, a = 1;
      } else {
        (!+e || !+e.slice(1) && e.charAt(0) == "5") && (Pe(n, l + 1, 1), r = !n.times(n).eq(o));
        break;
      }
  return He = !0, Pe(n, l, s.rounding, r);
};
xe.tangent = xe.tan = function() {
  var r, e, t = this, n = t.constructor;
  return t.isFinite() ? t.isZero() ? new n(t) : (r = n.precision, e = n.rounding, n.precision = r + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = xr(t, new n(1).minus(t.times(t)).sqrt(), r + 10, 0), n.precision = r, n.rounding = e, Pe(tn == 2 || tn == 4 ? t.neg() : t, r, e, !0)) : new n(NaN);
};
xe.times = xe.mul = function(r) {
  var e, t, n, a, i, o, f, l, u, s = this, c = s.constructor, m = s.d, v = (r = new c(r)).d;
  if (r.s *= s.s, !m || !m[0] || !v || !v[0])
    return new c(!r.s || m && !m[0] && !v || v && !v[0] && !m ? NaN : !m || !v ? r.s / 0 : r.s * 0);
  for (t = Yr(s.e / Ue) + Yr(r.e / Ue), l = m.length, u = v.length, l < u && (i = m, m = v, v = i, o = l, l = u, u = o), i = [], o = l + u, n = o; n--; )
    i.push(0);
  for (n = u; --n >= 0; ) {
    for (e = 0, a = l + n; a > n; )
      f = i[a] + v[n] * m[a - n - 1] + e, i[a--] = f % Ft | 0, e = f / Ft | 0;
    i[a] = (i[a] + e) % Ft | 0;
  }
  for (; !i[--o]; )
    i.pop();
  return e ? ++t : i.shift(), r.d = i, r.e = fs(i, t), He ? Pe(r, c.precision, c.rounding) : r;
};
xe.toBinary = function(r, e) {
  return Rc(this, 2, r, e);
};
xe.toDecimalPlaces = xe.toDP = function(r, e) {
  var t = this, n = t.constructor;
  return t = new n(t), r === void 0 ? t : (ft(r, 0, Bn), e === void 0 ? e = n.rounding : ft(e, 0, 8), Pe(t, r + t.e + 1, e));
};
xe.toExponential = function(r, e) {
  var t, n = this, a = n.constructor;
  return r === void 0 ? t = Yt(n, !0) : (ft(r, 0, Bn), e === void 0 ? e = a.rounding : ft(e, 0, 8), n = Pe(new a(n), r + 1, e), t = Yt(n, !0, r + 1)), n.isNeg() && !n.isZero() ? "-" + t : t;
};
xe.toFixed = function(r, e) {
  var t, n, a = this, i = a.constructor;
  return r === void 0 ? t = Yt(a) : (ft(r, 0, Bn), e === void 0 ? e = i.rounding : ft(e, 0, 8), n = Pe(new i(a), r + a.e + 1, e), t = Yt(n, !1, r + n.e + 1)), a.isNeg() && !a.isZero() ? "-" + t : t;
};
xe.toFraction = function(r) {
  var e, t, n, a, i, o, f, l, u, s, c, m, v = this, d = v.d, p = v.constructor;
  if (!d)
    return new p(v);
  if (u = t = new p(1), n = l = new p(0), e = new p(n), i = e.e = qh(d) - v.e - 1, o = i % Ue, e.d[0] = Br(10, o < 0 ? Ue + o : o), r == null)
    r = i > 0 ? e : u;
  else {
    if (f = new p(r), !f.isInt() || f.lt(u))
      throw Error(On + f);
    r = f.gt(e) ? i > 0 ? e : u : f;
  }
  for (He = !1, f = new p(Ur(d)), s = p.precision, p.precision = i = d.length * Ue * 2; c = xr(f, e, 0, 1, 1), a = t.plus(c.times(n)), a.cmp(r) != 1; )
    t = n, n = a, a = u, u = l.plus(c.times(a)), l = a, a = e, e = f.minus(c.times(a)), f = a;
  return a = xr(r.minus(t), n, 0, 1, 1), l = l.plus(a.times(u)), t = t.plus(a.times(n)), l.s = u.s = v.s, m = xr(u, n, i, 1).minus(v).abs().cmp(xr(l, t, i, 1).minus(v).abs()) < 1 ? [u, n] : [l, t], p.precision = s, He = !0, m;
};
xe.toHexadecimal = xe.toHex = function(r, e) {
  return Rc(this, 16, r, e);
};
xe.toNearest = function(r, e) {
  var t = this, n = t.constructor;
  if (t = new n(t), r == null) {
    if (!t.d)
      return t;
    r = new n(1), e = n.rounding;
  } else {
    if (r = new n(r), e === void 0 ? e = n.rounding : ft(e, 0, 8), !t.d)
      return r.s ? t : r;
    if (!r.d)
      return r.s && (r.s = t.s), r;
  }
  return r.d[0] ? (He = !1, t = xr(t, r, 0, e, 1).times(r), He = !0, Pe(t)) : (r.s = t.s, t = r), t;
};
xe.toNumber = function() {
  return +this;
};
xe.toOctal = function(r, e) {
  return Rc(this, 8, r, e);
};
xe.toPower = xe.pow = function(r) {
  var e, t, n, a, i, o, f = this, l = f.constructor, u = +(r = new l(r));
  if (!f.d || !r.d || !f.d[0] || !r.d[0])
    return new l(Br(+f, u));
  if (f = new l(f), f.eq(1))
    return f;
  if (n = l.precision, i = l.rounding, r.eq(1))
    return Pe(f, n, i);
  if (e = Yr(r.e / Ue), e >= r.d.length - 1 && (t = u < 0 ? -u : u) <= Iw)
    return a = Lh(l, f, t, n), r.s < 0 ? new l(1).div(a) : Pe(a, n, i);
  if (o = f.s, o < 0) {
    if (e < r.d.length - 1)
      return new l(NaN);
    if (r.d[e] & 1 || (o = 1), f.e == 0 && f.d[0] == 1 && f.d.length == 1)
      return f.s = o, f;
  }
  return t = Br(+f, u), e = t == 0 || !isFinite(t) ? Yr(u * (Math.log("0." + Ur(f.d)) / Math.LN10 + f.e + 1)) : new l(t + "").e, e > l.maxE + 1 || e < l.minE - 1 ? new l(e > 0 ? o / 0 : 0) : (He = !1, l.rounding = f.s = 1, t = Math.min(12, (e + "").length), a = ec(r.times(En(f, n + t)), n), a.d && (a = Pe(a, n + 5, 1), Ni(a.d, n, i) && (e = n + 10, a = Pe(ec(r.times(En(f, e + t)), e), e + 5, 1), +Ur(a.d).slice(n + 1, n + 15) + 1 == 1e14 && (a = Pe(a, n + 1, 0)))), a.s = o, He = !0, l.rounding = i, Pe(a, n, i));
};
xe.toPrecision = function(r, e) {
  var t, n = this, a = n.constructor;
  return r === void 0 ? t = Yt(n, n.e <= a.toExpNeg || n.e >= a.toExpPos) : (ft(r, 1, Bn), e === void 0 ? e = a.rounding : ft(e, 0, 8), n = Pe(new a(n), r, e), t = Yt(n, r <= n.e || n.e <= a.toExpNeg, r)), n.isNeg() && !n.isZero() ? "-" + t : t;
};
xe.toSignificantDigits = xe.toSD = function(r, e) {
  var t = this, n = t.constructor;
  return r === void 0 ? (r = n.precision, e = n.rounding) : (ft(r, 1, Bn), e === void 0 ? e = n.rounding : ft(e, 0, 8)), Pe(new n(t), r, e);
};
xe.toString = function() {
  var r = this, e = r.constructor, t = Yt(r, r.e <= e.toExpNeg || r.e >= e.toExpPos);
  return r.isNeg() && !r.isZero() ? "-" + t : t;
};
xe.truncated = xe.trunc = function() {
  return Pe(new this.constructor(this), this.e + 1, 1);
};
xe.valueOf = xe.toJSON = function() {
  var r = this, e = r.constructor, t = Yt(r, r.e <= e.toExpNeg || r.e >= e.toExpPos);
  return r.isNeg() ? "-" + t : t;
};
function Ur(r) {
  var e, t, n, a = r.length - 1, i = "", o = r[0];
  if (a > 0) {
    for (i += o, e = 1; e < a; e++)
      n = r[e] + "", t = Ue - n.length, t && (i += xn(t)), i += n;
    o = r[e], n = o + "", t = Ue - n.length, t && (i += xn(t));
  } else if (o === 0)
    return "0";
  for (; o % 10 === 0; )
    o /= 10;
  return i + o;
}
function ft(r, e, t) {
  if (r !== ~~r || r < e || r > t)
    throw Error(On + r);
}
function Ni(r, e, t, n) {
  var a, i, o, f;
  for (i = r[0]; i >= 10; i /= 10)
    --e;
  return --e < 0 ? (e += Ue, a = 0) : (a = Math.ceil((e + 1) / Ue), e %= Ue), i = Br(10, Ue - e), f = r[a] % i | 0, n == null ? e < 3 ? (e == 0 ? f = f / 100 | 0 : e == 1 && (f = f / 10 | 0), o = t < 4 && f == 99999 || t > 3 && f == 49999 || f == 5e4 || f == 0) : o = (t < 4 && f + 1 == i || t > 3 && f + 1 == i / 2) && (r[a + 1] / i / 100 | 0) == Br(10, e - 2) - 1 || (f == i / 2 || f == 0) && (r[a + 1] / i / 100 | 0) == 0 : e < 4 ? (e == 0 ? f = f / 1e3 | 0 : e == 1 ? f = f / 100 | 0 : e == 2 && (f = f / 10 | 0), o = (n || t < 4) && f == 9999 || !n && t > 3 && f == 4999) : o = ((n || t < 4) && f + 1 == i || !n && t > 3 && f + 1 == i / 2) && (r[a + 1] / i / 1e3 | 0) == Br(10, e - 3) - 1, o;
}
function Do(r, e, t) {
  for (var n, a = [0], i, o = 0, f = r.length; o < f; ) {
    for (i = a.length; i--; )
      a[i] *= e;
    for (a[0] += Ku.indexOf(r.charAt(o++)), n = 0; n < a.length; n++)
      a[n] > t - 1 && (a[n + 1] === void 0 && (a[n + 1] = 0), a[n + 1] += a[n] / t | 0, a[n] %= t);
  }
  return a.reverse();
}
function qw(r, e) {
  var t, n, a;
  if (e.isZero())
    return e;
  n = e.d.length, n < 32 ? (t = Math.ceil(n / 3), a = (1 / ms(4, t)).toString()) : (t = 16, a = "2.3283064365386962890625e-10"), r.precision += t, e = Ua(r, 1, e.times(a), new r(1));
  for (var i = t; i--; ) {
    var o = e.times(e);
    e = o.times(o).minus(o).times(8).plus(1);
  }
  return r.precision -= t, e;
}
var xr = /* @__PURE__ */ function() {
  function r(n, a, i) {
    var o, f = 0, l = n.length;
    for (n = n.slice(); l--; )
      o = n[l] * a + f, n[l] = o % i | 0, f = o / i | 0;
    return f && n.unshift(f), n;
  }
  function e(n, a, i, o) {
    var f, l;
    if (i != o)
      l = i > o ? 1 : -1;
    else
      for (f = l = 0; f < i; f++)
        if (n[f] != a[f]) {
          l = n[f] > a[f] ? 1 : -1;
          break;
        }
    return l;
  }
  function t(n, a, i, o) {
    for (var f = 0; i--; )
      n[i] -= f, f = n[i] < a[i] ? 1 : 0, n[i] = f * o + n[i] - a[i];
    for (; !n[0] && n.length > 1; )
      n.shift();
  }
  return function(n, a, i, o, f, l) {
    var u, s, c, m, v, d, p, b, g, N, h, w, x, y, E, D, S, A, C, T, $ = n.constructor, I = n.s == a.s ? 1 : -1, R = n.d, B = a.d;
    if (!R || !R[0] || !B || !B[0])
      return new $(
        // Return NaN if either NaN, or both Infinity or 0.
        !n.s || !a.s || (R ? B && R[0] == B[0] : !B) ? NaN : (
          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          R && R[0] == 0 || !B ? I * 0 : I / 0
        )
      );
    for (l ? (v = 1, s = n.e - a.e) : (l = Ft, v = Ue, s = Yr(n.e / v) - Yr(a.e / v)), C = B.length, S = R.length, g = new $(I), N = g.d = [], c = 0; B[c] == (R[c] || 0); c++)
      ;
    if (B[c] > (R[c] || 0) && s--, i == null ? (y = i = $.precision, o = $.rounding) : f ? y = i + (n.e - a.e) + 1 : y = i, y < 0)
      N.push(1), d = !0;
    else {
      if (y = y / v + 2 | 0, c = 0, C == 1) {
        for (m = 0, B = B[0], y++; (c < S || m) && y--; c++)
          E = m * l + (R[c] || 0), N[c] = E / B | 0, m = E % B | 0;
        d = m || c < S;
      } else {
        for (m = l / (B[0] + 1) | 0, m > 1 && (B = r(B, m, l), R = r(R, m, l), C = B.length, S = R.length), D = C, h = R.slice(0, C), w = h.length; w < C; )
          h[w++] = 0;
        T = B.slice(), T.unshift(0), A = B[0], B[1] >= l / 2 && ++A;
        do
          m = 0, u = e(B, h, C, w), u < 0 ? (x = h[0], C != w && (x = x * l + (h[1] || 0)), m = x / A | 0, m > 1 ? (m >= l && (m = l - 1), p = r(B, m, l), b = p.length, w = h.length, u = e(p, h, b, w), u == 1 && (m--, t(p, C < b ? T : B, b, l))) : (m == 0 && (u = m = 1), p = B.slice()), b = p.length, b < w && p.unshift(0), t(h, p, w, l), u == -1 && (w = h.length, u = e(B, h, C, w), u < 1 && (m++, t(h, C < w ? T : B, w, l))), w = h.length) : u === 0 && (m++, h = [0]), N[c++] = m, u && h[0] ? h[w++] = R[D] || 0 : (h = [R[D]], w = 1);
        while ((D++ < S || h[0] !== void 0) && y--);
        d = h[0] !== void 0;
      }
      N[0] || N.shift();
    }
    if (v == 1)
      g.e = s, Fh = d;
    else {
      for (c = 1, m = N[0]; m >= 10; m /= 10)
        c++;
      g.e = c + s * v - 1, Pe(g, f ? i + g.e + 1 : i, o, d);
    }
    return g;
  };
}();
function Pe(r, e, t, n) {
  var a, i, o, f, l, u, s, c, m, v = r.constructor;
  e:
    if (e != null) {
      if (c = r.d, !c)
        return r;
      for (a = 1, f = c[0]; f >= 10; f /= 10)
        a++;
      if (i = e - a, i < 0)
        i += Ue, o = e, s = c[m = 0], l = s / Br(10, a - o - 1) % 10 | 0;
      else if (m = Math.ceil((i + 1) / Ue), f = c.length, m >= f)
        if (n) {
          for (; f++ <= m; )
            c.push(0);
          s = l = 0, a = 1, i %= Ue, o = i - Ue + 1;
        } else
          break e;
      else {
        for (s = f = c[m], a = 1; f >= 10; f /= 10)
          a++;
        i %= Ue, o = i - Ue + a, l = o < 0 ? 0 : s / Br(10, a - o - 1) % 10 | 0;
      }
      if (n = n || e < 0 || c[m + 1] !== void 0 || (o < 0 ? s : s % Br(10, a - o - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (r.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && // Check whether the digit to the left of the rounding digit is odd.
      (i > 0 ? o > 0 ? s / Br(10, a - o) : 0 : c[m - 1]) % 10 & 1 || t == (r.s < 0 ? 8 : 7)), e < 1 || !c[0])
        return c.length = 0, u ? (e -= r.e + 1, c[0] = Br(10, (Ue - e % Ue) % Ue), r.e = -e || 0) : c[0] = r.e = 0, r;
      if (i == 0 ? (c.length = m, f = 1, m--) : (c.length = m + 1, f = Br(10, Ue - i), c[m] = o > 0 ? (s / Br(10, a - o) % Br(10, o) | 0) * f : 0), u)
        for (; ; )
          if (m == 0) {
            for (i = 1, o = c[0]; o >= 10; o /= 10)
              i++;
            for (o = c[0] += f, f = 1; o >= 10; o /= 10)
              f++;
            i != f && (r.e++, c[0] == Ft && (c[0] = 1));
            break;
          } else {
            if (c[m] += f, c[m] != Ft)
              break;
            c[m--] = 0, f = 1;
          }
      for (i = c.length; c[--i] === 0; )
        c.pop();
    }
  return He && (r.e > v.maxE ? (r.d = null, r.e = NaN) : r.e < v.minE && (r.e = 0, r.d = [0])), r;
}
function Yt(r, e, t) {
  if (!r.isFinite())
    return Uh(r);
  var n, a = r.e, i = Ur(r.d), o = i.length;
  return e ? (t && (n = t - o) > 0 ? i = i.charAt(0) + "." + i.slice(1) + xn(n) : o > 1 && (i = i.charAt(0) + "." + i.slice(1)), i = i + (r.e < 0 ? "e" : "e+") + r.e) : a < 0 ? (i = "0." + xn(-a - 1) + i, t && (n = t - o) > 0 && (i += xn(n))) : a >= o ? (i += xn(a + 1 - o), t && (n = t - a - 1) > 0 && (i = i + "." + xn(n))) : ((n = a + 1) < o && (i = i.slice(0, n) + "." + i.slice(n)), t && (n = t - o) > 0 && (a + 1 === o && (i += "."), i += xn(n))), i;
}
function fs(r, e) {
  var t = r[0];
  for (e *= Ue; t >= 10; t /= 10)
    e++;
  return e;
}
function Po(r, e, t) {
  if (e > Pw)
    throw He = !0, t && (r.precision = t), Error($h);
  return Pe(new r(Ro), e, 1, !0);
}
function _t(r, e, t) {
  if (e > ju)
    throw Error($h);
  return Pe(new r(Io), e, t, !0);
}
function qh(r) {
  var e = r.length - 1, t = e * Ue + 1;
  if (e = r[e], e) {
    for (; e % 10 == 0; e /= 10)
      t--;
    for (e = r[0]; e >= 10; e /= 10)
      t++;
  }
  return t;
}
function xn(r) {
  for (var e = ""; r--; )
    e += "0";
  return e;
}
function Lh(r, e, t, n) {
  var a, i = new r(1), o = Math.ceil(n / Ue + 4);
  for (He = !1; ; ) {
    if (t % 2 && (i = i.times(e), lf(i.d, o) && (a = !0)), t = Yr(t / 2), t === 0) {
      t = i.d.length - 1, a && i.d[t] === 0 && ++i.d[t];
      break;
    }
    e = e.times(e), lf(e.d, o);
  }
  return He = !0, i;
}
function cf(r) {
  return r.d[r.d.length - 1] & 1;
}
function zh(r, e, t) {
  for (var n, a = new r(e[0]), i = 0; ++i < e.length; )
    if (n = new r(e[i]), n.s)
      a[t](n) && (a = n);
    else {
      a = n;
      break;
    }
  return a;
}
function ec(r, e) {
  var t, n, a, i, o, f, l, u = 0, s = 0, c = 0, m = r.constructor, v = m.rounding, d = m.precision;
  if (!r.d || !r.d[0] || r.e > 17)
    return new m(r.d ? r.d[0] ? r.s < 0 ? 0 : 1 / 0 : 1 : r.s ? r.s < 0 ? 0 : r : NaN);
  for (e == null ? (He = !1, l = d) : l = e, f = new m(0.03125); r.e > -2; )
    r = r.times(f), c += 5;
  for (n = Math.log(Br(2, c)) / Math.LN10 * 2 + 5 | 0, l += n, t = i = o = new m(1), m.precision = l; ; ) {
    if (i = Pe(i.times(r), l, 1), t = t.times(++s), f = o.plus(xr(i, t, l, 1)), Ur(f.d).slice(0, l) === Ur(o.d).slice(0, l)) {
      for (a = c; a--; )
        o = Pe(o.times(o), l, 1);
      if (e == null)
        if (u < 3 && Ni(o.d, l - n, v, u))
          m.precision = l += 10, t = i = f = new m(1), s = 0, u++;
        else
          return Pe(o, m.precision = d, v, He = !0);
      else
        return m.precision = d, o;
    }
    o = f;
  }
}
function En(r, e) {
  var t, n, a, i, o, f, l, u, s, c, m, v = 1, d = 10, p = r, b = p.d, g = p.constructor, N = g.rounding, h = g.precision;
  if (p.s < 0 || !b || !b[0] || !p.e && b[0] == 1 && b.length == 1)
    return new g(b && !b[0] ? -1 / 0 : p.s != 1 ? NaN : b ? 0 : p);
  if (e == null ? (He = !1, s = h) : s = e, g.precision = s += d, t = Ur(b), n = t.charAt(0), Math.abs(i = p.e) < 15e14) {
    for (; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3; )
      p = p.times(r), t = Ur(p.d), n = t.charAt(0), v++;
    i = p.e, n > 1 ? (p = new g("0." + t), i++) : p = new g(n + "." + t.slice(1));
  } else
    return u = Po(g, s + 2, h).times(i + ""), p = En(new g(n + "." + t.slice(1)), s - d).plus(u), g.precision = h, e == null ? Pe(p, h, N, He = !0) : p;
  for (c = p, l = o = p = xr(p.minus(1), p.plus(1), s, 1), m = Pe(p.times(p), s, 1), a = 3; ; ) {
    if (o = Pe(o.times(m), s, 1), u = l.plus(xr(o, new g(a), s, 1)), Ur(u.d).slice(0, s) === Ur(l.d).slice(0, s))
      if (l = l.times(2), i !== 0 && (l = l.plus(Po(g, s + 2, h).times(i + ""))), l = xr(l, new g(v), s, 1), e == null)
        if (Ni(l.d, s - d, N, f))
          g.precision = s += d, u = o = p = xr(c.minus(1), c.plus(1), s, 1), m = Pe(p.times(p), s, 1), a = f = 1;
        else
          return Pe(l, g.precision = h, N, He = !0);
      else
        return g.precision = h, l;
    l = u, a += 2;
  }
}
function Uh(r) {
  return String(r.s * r.s / 0);
}
function rc(r, e) {
  var t, n, a;
  for ((t = e.indexOf(".")) > -1 && (e = e.replace(".", "")), (n = e.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +e.slice(n + 1), e = e.substring(0, n)) : t < 0 && (t = e.length), n = 0; e.charCodeAt(n) === 48; n++)
    ;
  for (a = e.length; e.charCodeAt(a - 1) === 48; --a)
    ;
  if (e = e.slice(n, a), e) {
    if (a -= n, r.e = t = t - n - 1, r.d = [], n = (t + 1) % Ue, t < 0 && (n += Ue), n < a) {
      for (n && r.d.push(+e.slice(0, n)), a -= Ue; n < a; )
        r.d.push(+e.slice(n, n += Ue));
      e = e.slice(n), n = Ue - e.length;
    } else
      n -= a;
    for (; n--; )
      e += "0";
    r.d.push(+e), He && (r.e > r.constructor.maxE ? (r.d = null, r.e = NaN) : r.e < r.constructor.minE && (r.e = 0, r.d = [0]));
  } else
    r.e = 0, r.d = [0];
  return r;
}
function Lw(r, e) {
  var t, n, a, i, o, f, l, u, s;
  if (e.indexOf("_") > -1) {
    if (e = e.replace(/(\d)_(?=\d)/g, "$1"), Ph.test(e))
      return rc(r, e);
  } else if (e === "Infinity" || e === "NaN")
    return +e || (r.s = NaN), r.e = NaN, r.d = null, r;
  if ($w.test(e))
    t = 16, e = e.toLowerCase();
  else if (Fw.test(e))
    t = 2;
  else if (Rw.test(e))
    t = 8;
  else
    throw Error(On + e);
  for (i = e.search(/p/i), i > 0 ? (l = +e.slice(i + 1), e = e.substring(2, i)) : e = e.slice(2), i = e.indexOf("."), o = i >= 0, n = r.constructor, o && (e = e.replace(".", ""), f = e.length, i = f - i, a = Lh(n, new n(t), i, i * 2)), u = Do(e, t, Ft), s = u.length - 1, i = s; u[i] === 0; --i)
    u.pop();
  return i < 0 ? new n(r.s * 0) : (r.e = fs(u, s), r.d = u, He = !1, o && (r = xr(r, a, f * 4)), l && (r = r.times(Math.abs(l) < 54 ? Br(2, l) : Tn.pow(2, l))), He = !0, r);
}
function zw(r, e) {
  var t, n = e.d.length;
  if (n < 3)
    return e.isZero() ? e : Ua(r, 2, e, e);
  t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, e = e.times(1 / ms(5, t)), e = Ua(r, 2, e, e);
  for (var a, i = new r(5), o = new r(16), f = new r(20); t--; )
    a = e.times(e), e = e.times(i.plus(a.times(o.times(a).minus(f))));
  return e;
}
function Ua(r, e, t, n, a) {
  var i, o, f, l, u = r.precision, s = Math.ceil(u / Ue);
  for (He = !1, l = t.times(t), f = new r(n); ; ) {
    if (o = xr(f.times(l), new r(e++ * e++), u, 1), f = a ? n.plus(o) : n.minus(o), n = xr(o.times(l), new r(e++ * e++), u, 1), o = f.plus(n), o.d[s] !== void 0) {
      for (i = s; o.d[i] === f.d[i] && i--; )
        ;
      if (i == -1)
        break;
    }
    i = f, f = n, n = o, o = i;
  }
  return He = !0, o.d.length = s + 1, o;
}
function ms(r, e) {
  for (var t = r; --e; )
    t *= r;
  return t;
}
function kh(r, e) {
  var t, n = e.s < 0, a = _t(r, r.precision, 1), i = a.times(0.5);
  if (e = e.abs(), e.lte(i))
    return tn = n ? 4 : 1, e;
  if (t = e.divToInt(a), t.isZero())
    tn = n ? 3 : 2;
  else {
    if (e = e.minus(t.times(a)), e.lte(i))
      return tn = cf(t) ? n ? 2 : 3 : n ? 4 : 1, e;
    tn = cf(t) ? n ? 1 : 4 : n ? 3 : 2;
  }
  return e.minus(a).abs();
}
function Rc(r, e, t, n) {
  var a, i, o, f, l, u, s, c, m, v = r.constructor, d = t !== void 0;
  if (d ? (ft(t, 1, Bn), n === void 0 ? n = v.rounding : ft(n, 0, 8)) : (t = v.precision, n = v.rounding), !r.isFinite())
    s = Uh(r);
  else {
    for (s = Yt(r), o = s.indexOf("."), d ? (a = 2, e == 16 ? t = t * 4 - 3 : e == 8 && (t = t * 3 - 2)) : a = e, o >= 0 && (s = s.replace(".", ""), m = new v(1), m.e = s.length - o, m.d = Do(Yt(m), 10, a), m.e = m.d.length), c = Do(s, 10, a), i = l = c.length; c[--l] == 0; )
      c.pop();
    if (!c[0])
      s = d ? "0p+0" : "0";
    else {
      if (o < 0 ? i-- : (r = new v(r), r.d = c, r.e = i, r = xr(r, m, t, n, 0, a), c = r.d, i = r.e, u = Fh), o = c[t], f = a / 2, u = u || c[t + 1] !== void 0, u = n < 4 ? (o !== void 0 || u) && (n === 0 || n === (r.s < 0 ? 3 : 2)) : o > f || o === f && (n === 4 || u || n === 6 && c[t - 1] & 1 || n === (r.s < 0 ? 8 : 7)), c.length = t, u)
        for (; ++c[--t] > a - 1; )
          c[t] = 0, t || (++i, c.unshift(1));
      for (l = c.length; !c[l - 1]; --l)
        ;
      for (o = 0, s = ""; o < l; o++)
        s += Ku.charAt(c[o]);
      if (d) {
        if (l > 1)
          if (e == 16 || e == 8) {
            for (o = e == 16 ? 4 : 3, --l; l % o; l++)
              s += "0";
            for (c = Do(s, a, e), l = c.length; !c[l - 1]; --l)
              ;
            for (o = 1, s = "1."; o < l; o++)
              s += Ku.charAt(c[o]);
          } else
            s = s.charAt(0) + "." + s.slice(1);
        s = s + (i < 0 ? "p" : "p+") + i;
      } else if (i < 0) {
        for (; ++i; )
          s = "0" + s;
        s = "0." + s;
      } else if (++i > l)
        for (i -= l; i--; )
          s += "0";
      else
        i < l && (s = s.slice(0, i) + "." + s.slice(i));
    }
    s = (e == 16 ? "0x" : e == 2 ? "0b" : e == 8 ? "0o" : "") + s;
  }
  return r.s < 0 ? "-" + s : s;
}
function lf(r, e) {
  if (r.length > e)
    return r.length = e, !0;
}
function Uw(r) {
  return new this(r).abs();
}
function kw(r) {
  return new this(r).acos();
}
function Gw(r) {
  return new this(r).acosh();
}
function Vw(r, e) {
  return new this(r).plus(e);
}
function Hw(r) {
  return new this(r).asin();
}
function Zw(r) {
  return new this(r).asinh();
}
function Yw(r) {
  return new this(r).atan();
}
function Ww(r) {
  return new this(r).atanh();
}
function Jw(r, e) {
  r = new this(r), e = new this(e);
  var t, n = this.precision, a = this.rounding, i = n + 4;
  return !r.s || !e.s ? t = new this(NaN) : !r.d && !e.d ? (t = _t(this, i, 1).times(e.s > 0 ? 0.25 : 0.75), t.s = r.s) : !e.d || r.isZero() ? (t = e.s < 0 ? _t(this, n, a) : new this(0), t.s = r.s) : !r.d || e.isZero() ? (t = _t(this, i, 1).times(0.5), t.s = r.s) : e.s < 0 ? (this.precision = i, this.rounding = 1, t = this.atan(xr(r, e, i, 1)), e = _t(this, i, 1), this.precision = n, this.rounding = a, t = r.s < 0 ? t.minus(e) : t.plus(e)) : t = this.atan(xr(r, e, i, 1)), t;
}
function Xw(r) {
  return new this(r).cbrt();
}
function Kw(r) {
  return Pe(r = new this(r), r.e + 1, 2);
}
function Qw(r, e, t) {
  return new this(r).clamp(e, t);
}
function jw(r) {
  if (!r || typeof r != "object")
    throw Error(ls + "Object expected");
  var e, t, n, a = r.defaults === !0, i = [
    "precision",
    1,
    Bn,
    "rounding",
    0,
    8,
    "toExpNeg",
    -Sa,
    0,
    "toExpPos",
    0,
    Sa,
    "maxE",
    0,
    Sa,
    "minE",
    -Sa,
    0,
    "modulo",
    0,
    9
  ];
  for (e = 0; e < i.length; e += 3)
    if (t = i[e], a && (this[t] = Qu[t]), (n = r[t]) !== void 0)
      if (Yr(n) === n && n >= i[e + 1] && n <= i[e + 2])
        this[t] = n;
      else
        throw Error(On + t + ": " + n);
  if (t = "crypto", a && (this[t] = Qu[t]), (n = r[t]) !== void 0)
    if (n === !0 || n === !1 || n === 0 || n === 1)
      if (n)
        if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
          this[t] = !0;
        else
          throw Error(Rh);
      else
        this[t] = !1;
    else
      throw Error(On + t + ": " + n);
  return this;
}
function eN(r) {
  return new this(r).cos();
}
function rN(r) {
  return new this(r).cosh();
}
function Gh(r) {
  var e, t, n;
  function a(i) {
    var o, f, l, u = this;
    if (!(u instanceof a))
      return new a(i);
    if (u.constructor = a, ff(i)) {
      u.s = i.s, He ? !i.d || i.e > a.maxE ? (u.e = NaN, u.d = null) : i.e < a.minE ? (u.e = 0, u.d = [0]) : (u.e = i.e, u.d = i.d.slice()) : (u.e = i.e, u.d = i.d ? i.d.slice() : i.d);
      return;
    }
    if (l = typeof i, l === "number") {
      if (i === 0) {
        u.s = 1 / i < 0 ? -1 : 1, u.e = 0, u.d = [0];
        return;
      }
      if (i < 0 ? (i = -i, u.s = -1) : u.s = 1, i === ~~i && i < 1e7) {
        for (o = 0, f = i; f >= 10; f /= 10)
          o++;
        He ? o > a.maxE ? (u.e = NaN, u.d = null) : o < a.minE ? (u.e = 0, u.d = [0]) : (u.e = o, u.d = [i]) : (u.e = o, u.d = [i]);
        return;
      } else if (i * 0 !== 0) {
        i || (u.s = NaN), u.e = NaN, u.d = null;
        return;
      }
      return rc(u, i.toString());
    } else if (l !== "string")
      throw Error(On + i);
    return (f = i.charCodeAt(0)) === 45 ? (i = i.slice(1), u.s = -1) : (f === 43 && (i = i.slice(1)), u.s = 1), Ph.test(i) ? rc(u, i) : Lw(u, i);
  }
  if (a.prototype = xe, a.ROUND_UP = 0, a.ROUND_DOWN = 1, a.ROUND_CEIL = 2, a.ROUND_FLOOR = 3, a.ROUND_HALF_UP = 4, a.ROUND_HALF_DOWN = 5, a.ROUND_HALF_EVEN = 6, a.ROUND_HALF_CEIL = 7, a.ROUND_HALF_FLOOR = 8, a.EUCLID = 9, a.config = a.set = jw, a.clone = Gh, a.isDecimal = ff, a.abs = Uw, a.acos = kw, a.acosh = Gw, a.add = Vw, a.asin = Hw, a.asinh = Zw, a.atan = Yw, a.atanh = Ww, a.atan2 = Jw, a.cbrt = Xw, a.ceil = Kw, a.clamp = Qw, a.cos = eN, a.cosh = rN, a.div = tN, a.exp = nN, a.floor = aN, a.hypot = iN, a.ln = oN, a.log = sN, a.log10 = cN, a.log2 = uN, a.max = lN, a.min = fN, a.mod = mN, a.mul = vN, a.pow = pN, a.random = dN, a.round = hN, a.sign = gN, a.sin = yN, a.sinh = bN, a.sqrt = xN, a.sub = wN, a.sum = NN, a.tan = AN, a.tanh = EN, a.trunc = DN, r === void 0 && (r = {}), r && r.defaults !== !0)
    for (n = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], e = 0; e < n.length; )
      r.hasOwnProperty(t = n[e++]) || (r[t] = this[t]);
  return a.config(r), a;
}
function tN(r, e) {
  return new this(r).div(e);
}
function nN(r) {
  return new this(r).exp();
}
function aN(r) {
  return Pe(r = new this(r), r.e + 1, 3);
}
function iN() {
  var r, e, t = new this(0);
  for (He = !1, r = 0; r < arguments.length; )
    if (e = new this(arguments[r++]), e.d)
      t.d && (t = t.plus(e.times(e)));
    else {
      if (e.s)
        return He = !0, new this(1 / 0);
      t = e;
    }
  return He = !0, t.sqrt();
}
function ff(r) {
  return r instanceof Tn || r && r.toStringTag === Ih || !1;
}
function oN(r) {
  return new this(r).ln();
}
function sN(r, e) {
  return new this(r).log(e);
}
function uN(r) {
  return new this(r).log(2);
}
function cN(r) {
  return new this(r).log(10);
}
function lN() {
  return zh(this, arguments, "lt");
}
function fN() {
  return zh(this, arguments, "gt");
}
function mN(r, e) {
  return new this(r).mod(e);
}
function vN(r, e) {
  return new this(r).mul(e);
}
function pN(r, e) {
  return new this(r).pow(e);
}
function dN(r) {
  var e, t, n, a, i = 0, o = new this(1), f = [];
  if (r === void 0 ? r = this.precision : ft(r, 1, Bn), n = Math.ceil(r / Ue), this.crypto)
    if (crypto.getRandomValues)
      for (e = crypto.getRandomValues(new Uint32Array(n)); i < n; )
        a = e[i], a >= 429e7 ? e[i] = crypto.getRandomValues(new Uint32Array(1))[0] : f[i++] = a % 1e7;
    else if (crypto.randomBytes) {
      for (e = crypto.randomBytes(n *= 4); i < n; )
        a = e[i] + (e[i + 1] << 8) + (e[i + 2] << 16) + ((e[i + 3] & 127) << 24), a >= 214e7 ? crypto.randomBytes(4).copy(e, i) : (f.push(a % 1e7), i += 4);
      i = n / 4;
    } else
      throw Error(Rh);
  else
    for (; i < n; )
      f[i++] = Math.random() * 1e7 | 0;
  for (n = f[--i], r %= Ue, n && r && (a = Br(10, Ue - r), f[i] = (n / a | 0) * a); f[i] === 0; i--)
    f.pop();
  if (i < 0)
    t = 0, f = [0];
  else {
    for (t = -1; f[0] === 0; t -= Ue)
      f.shift();
    for (n = 1, a = f[0]; a >= 10; a /= 10)
      n++;
    n < Ue && (t -= Ue - n);
  }
  return o.e = t, o.d = f, o;
}
function hN(r) {
  return Pe(r = new this(r), r.e + 1, this.rounding);
}
function gN(r) {
  return r = new this(r), r.d ? r.d[0] ? r.s : 0 * r.s : r.s || NaN;
}
function yN(r) {
  return new this(r).sin();
}
function bN(r) {
  return new this(r).sinh();
}
function xN(r) {
  return new this(r).sqrt();
}
function wN(r, e) {
  return new this(r).sub(e);
}
function NN() {
  var r = 0, e = arguments, t = new this(e[r]);
  for (He = !1; t.s && ++r < e.length; )
    t = t.plus(e[r]);
  return He = !0, Pe(t, this.precision, this.rounding);
}
function AN(r) {
  return new this(r).tan();
}
function EN(r) {
  return new this(r).tanh();
}
function DN(r) {
  return Pe(r = new this(r), r.e + 1, 1);
}
xe[Symbol.for("nodejs.util.inspect.custom")] = xe.toString;
xe[Symbol.toStringTag] = "Decimal";
var Tn = xe.constructor = Gh(Qu);
Ro = new Tn(Ro);
Io = new Tn(Io);
var SN = "BigNumber", CN = ["?on", "config"], MN = /* @__PURE__ */ q(SN, CN, (r) => {
  var {
    on: e,
    config: t
  } = r, n = Tn.clone({
    precision: t.precision,
    modulo: Tn.EUCLID
  });
  return n.prototype = Object.create(n.prototype), n.prototype.type = "BigNumber", n.prototype.isBigNumber = !0, n.prototype.toJSON = function() {
    return {
      mathjs: "BigNumber",
      value: this.toString()
    };
  }, n.fromJSON = function(a) {
    return new n(a.value);
  }, e && e("config", function(a, i) {
    a.precision !== i.precision && n.config({
      precision: a.precision
    });
  }), n;
}, {
  isClass: !0
}), Vh = { exports: {} };
/**
 * @license Complex.js v2.1.1 12/05/2020
 *
 * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/
(function(r, e) {
  (function(t) {
    var n = Math.cosh || function(c) {
      return Math.abs(c) < 1e-9 ? 1 - c : (Math.exp(c) + Math.exp(-c)) * 0.5;
    }, a = Math.sinh || function(c) {
      return Math.abs(c) < 1e-9 ? c : (Math.exp(c) - Math.exp(-c)) * 0.5;
    }, i = function(c) {
      var m = Math.PI / 4;
      if (-m > c || c > m)
        return Math.cos(c) - 1;
      var v = c * c;
      return v * (v * (v * (v * (v * (v * (v * (v / 20922789888e3 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);
    }, o = function(c, m) {
      var v = Math.abs(c), d = Math.abs(m);
      return v < 3e3 && d < 3e3 ? Math.sqrt(v * v + d * d) : (v < d ? (v = d, d = c / m) : d = m / c, v * Math.sqrt(1 + d * d));
    }, f = function() {
      throw SyntaxError("Invalid Param");
    };
    function l(c, m) {
      var v = Math.abs(c), d = Math.abs(m);
      return c === 0 ? Math.log(d) : m === 0 ? Math.log(v) : v < 3e3 && d < 3e3 ? Math.log(c * c + m * m) * 0.5 : (c = c / 2, m = m / 2, 0.5 * Math.log(c * c + m * m) + Math.LN2);
    }
    var u = function(c, m) {
      var v = { re: 0, im: 0 };
      if (c == null)
        v.re = v.im = 0;
      else if (m !== void 0)
        v.re = c, v.im = m;
      else
        switch (typeof c) {
          case "object":
            if ("im" in c && "re" in c)
              v.re = c.re, v.im = c.im;
            else if ("abs" in c && "arg" in c) {
              if (!Number.isFinite(c.abs) && Number.isFinite(c.arg))
                return s.INFINITY;
              v.re = c.abs * Math.cos(c.arg), v.im = c.abs * Math.sin(c.arg);
            } else if ("r" in c && "phi" in c) {
              if (!Number.isFinite(c.r) && Number.isFinite(c.phi))
                return s.INFINITY;
              v.re = c.r * Math.cos(c.phi), v.im = c.r * Math.sin(c.phi);
            } else
              c.length === 2 ? (v.re = c[0], v.im = c[1]) : f();
            break;
          case "string":
            v.im = /* void */
            v.re = 0;
            var d = c.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g), p = 1, b = 0;
            d === null && f();
            for (var g = 0; g < d.length; g++) {
              var N = d[g];
              N === " " || N === "	" || N === `
` || (N === "+" ? p++ : N === "-" ? b++ : N === "i" || N === "I" ? (p + b === 0 && f(), d[g + 1] !== " " && !isNaN(d[g + 1]) ? (v.im += parseFloat((b % 2 ? "-" : "") + d[g + 1]), g++) : v.im += parseFloat((b % 2 ? "-" : "") + "1"), p = b = 0) : ((p + b === 0 || isNaN(N)) && f(), d[g + 1] === "i" || d[g + 1] === "I" ? (v.im += parseFloat((b % 2 ? "-" : "") + N), g++) : v.re += parseFloat((b % 2 ? "-" : "") + N), p = b = 0));
            }
            p + b > 0 && f();
            break;
          case "number":
            v.im = 0, v.re = c;
            break;
          default:
            f();
        }
      return isNaN(v.re) || isNaN(v.im), v;
    };
    function s(c, m) {
      if (!(this instanceof s))
        return new s(c, m);
      var v = u(c, m);
      this.re = v.re, this.im = v.im;
    }
    s.prototype = {
      re: 0,
      im: 0,
      /**
       * Calculates the sign of a complex number, which is a normalized complex
       *
       * @returns {Complex}
       */
      sign: function() {
        var c = this.abs();
        return new s(
          this.re / c,
          this.im / c
        );
      },
      /**
       * Adds two complex numbers
       *
       * @returns {Complex}
       */
      add: function(c, m) {
        var v = new s(c, m);
        return this.isInfinite() && v.isInfinite() ? s.NAN : this.isInfinite() || v.isInfinite() ? s.INFINITY : new s(
          this.re + v.re,
          this.im + v.im
        );
      },
      /**
       * Subtracts two complex numbers
       *
       * @returns {Complex}
       */
      sub: function(c, m) {
        var v = new s(c, m);
        return this.isInfinite() && v.isInfinite() ? s.NAN : this.isInfinite() || v.isInfinite() ? s.INFINITY : new s(
          this.re - v.re,
          this.im - v.im
        );
      },
      /**
       * Multiplies two complex numbers
       *
       * @returns {Complex}
       */
      mul: function(c, m) {
        var v = new s(c, m);
        return this.isInfinite() && v.isZero() || this.isZero() && v.isInfinite() ? s.NAN : this.isInfinite() || v.isInfinite() ? s.INFINITY : v.im === 0 && this.im === 0 ? new s(this.re * v.re, 0) : new s(
          this.re * v.re - this.im * v.im,
          this.re * v.im + this.im * v.re
        );
      },
      /**
       * Divides two complex numbers
       *
       * @returns {Complex}
       */
      div: function(c, m) {
        var v = new s(c, m);
        if (this.isZero() && v.isZero() || this.isInfinite() && v.isInfinite())
          return s.NAN;
        if (this.isInfinite() || v.isZero())
          return s.INFINITY;
        if (this.isZero() || v.isInfinite())
          return s.ZERO;
        c = this.re, m = this.im;
        var d = v.re, p = v.im, b, g;
        return p === 0 ? new s(c / d, m / d) : Math.abs(d) < Math.abs(p) ? (g = d / p, b = d * g + p, new s(
          (c * g + m) / b,
          (m * g - c) / b
        )) : (g = p / d, b = p * g + d, new s(
          (c + m * g) / b,
          (m - c * g) / b
        ));
      },
      /**
       * Calculate the power of two complex numbers
       *
       * @returns {Complex}
       */
      pow: function(c, m) {
        var v = new s(c, m);
        if (c = this.re, m = this.im, v.isZero())
          return s.ONE;
        if (v.im === 0) {
          if (m === 0 && c > 0)
            return new s(Math.pow(c, v.re), 0);
          if (c === 0)
            switch ((v.re % 4 + 4) % 4) {
              case 0:
                return new s(Math.pow(m, v.re), 0);
              case 1:
                return new s(0, Math.pow(m, v.re));
              case 2:
                return new s(-Math.pow(m, v.re), 0);
              case 3:
                return new s(0, -Math.pow(m, v.re));
            }
        }
        if (c === 0 && m === 0 && v.re > 0 && v.im >= 0)
          return s.ZERO;
        var d = Math.atan2(m, c), p = l(c, m);
        return c = Math.exp(v.re * p - v.im * d), m = v.im * p + v.re * d, new s(
          c * Math.cos(m),
          c * Math.sin(m)
        );
      },
      /**
       * Calculate the complex square root
       *
       * @returns {Complex}
       */
      sqrt: function() {
        var c = this.re, m = this.im, v = this.abs(), d, p;
        if (c >= 0) {
          if (m === 0)
            return new s(Math.sqrt(c), 0);
          d = 0.5 * Math.sqrt(2 * (v + c));
        } else
          d = Math.abs(m) / Math.sqrt(2 * (v - c));
        return c <= 0 ? p = 0.5 * Math.sqrt(2 * (v - c)) : p = Math.abs(m) / Math.sqrt(2 * (v + c)), new s(d, m < 0 ? -p : p);
      },
      /**
       * Calculate the complex exponent
       *
       * @returns {Complex}
       */
      exp: function() {
        var c = Math.exp(this.re);
        return this.im, new s(
          c * Math.cos(this.im),
          c * Math.sin(this.im)
        );
      },
      /**
       * Calculate the complex exponent and subtracts one.
       *
       * This may be more accurate than `Complex(x).exp().sub(1)` if
       * `x` is small.
       *
       * @returns {Complex}
       */
      expm1: function() {
        var c = this.re, m = this.im;
        return new s(
          Math.expm1(c) * Math.cos(m) + i(m),
          Math.exp(c) * Math.sin(m)
        );
      },
      /**
       * Calculate the natural log
       *
       * @returns {Complex}
       */
      log: function() {
        var c = this.re, m = this.im;
        return new s(
          l(c, m),
          Math.atan2(m, c)
        );
      },
      /**
       * Calculate the magnitude of the complex number
       *
       * @returns {number}
       */
      abs: function() {
        return o(this.re, this.im);
      },
      /**
       * Calculate the angle of the complex number
       *
       * @returns {number}
       */
      arg: function() {
        return Math.atan2(this.im, this.re);
      },
      /**
       * Calculate the sine of the complex number
       *
       * @returns {Complex}
       */
      sin: function() {
        var c = this.re, m = this.im;
        return new s(
          Math.sin(c) * n(m),
          Math.cos(c) * a(m)
        );
      },
      /**
       * Calculate the cosine
       *
       * @returns {Complex}
       */
      cos: function() {
        var c = this.re, m = this.im;
        return new s(
          Math.cos(c) * n(m),
          -Math.sin(c) * a(m)
        );
      },
      /**
       * Calculate the tangent
       *
       * @returns {Complex}
       */
      tan: function() {
        var c = 2 * this.re, m = 2 * this.im, v = Math.cos(c) + n(m);
        return new s(
          Math.sin(c) / v,
          a(m) / v
        );
      },
      /**
       * Calculate the cotangent
       *
       * @returns {Complex}
       */
      cot: function() {
        var c = 2 * this.re, m = 2 * this.im, v = Math.cos(c) - n(m);
        return new s(
          -Math.sin(c) / v,
          a(m) / v
        );
      },
      /**
       * Calculate the secant
       *
       * @returns {Complex}
       */
      sec: function() {
        var c = this.re, m = this.im, v = 0.5 * n(2 * m) + 0.5 * Math.cos(2 * c);
        return new s(
          Math.cos(c) * n(m) / v,
          Math.sin(c) * a(m) / v
        );
      },
      /**
       * Calculate the cosecans
       *
       * @returns {Complex}
       */
      csc: function() {
        var c = this.re, m = this.im, v = 0.5 * n(2 * m) - 0.5 * Math.cos(2 * c);
        return new s(
          Math.sin(c) * n(m) / v,
          -Math.cos(c) * a(m) / v
        );
      },
      /**
       * Calculate the complex arcus sinus
       *
       * @returns {Complex}
       */
      asin: function() {
        var c = this.re, m = this.im, v = new s(
          m * m - c * c + 1,
          -2 * c * m
        ).sqrt(), d = new s(
          v.re - m,
          v.im + c
        ).log();
        return new s(d.im, -d.re);
      },
      /**
       * Calculate the complex arcus cosinus
       *
       * @returns {Complex}
       */
      acos: function() {
        var c = this.re, m = this.im, v = new s(
          m * m - c * c + 1,
          -2 * c * m
        ).sqrt(), d = new s(
          v.re - m,
          v.im + c
        ).log();
        return new s(Math.PI / 2 - d.im, d.re);
      },
      /**
       * Calculate the complex arcus tangent
       *
       * @returns {Complex}
       */
      atan: function() {
        var c = this.re, m = this.im;
        if (c === 0) {
          if (m === 1)
            return new s(0, 1 / 0);
          if (m === -1)
            return new s(0, -1 / 0);
        }
        var v = c * c + (1 - m) * (1 - m), d = new s(
          (1 - m * m - c * c) / v,
          -2 * c / v
        ).log();
        return new s(-0.5 * d.im, 0.5 * d.re);
      },
      /**
       * Calculate the complex arcus cotangent
       *
       * @returns {Complex}
       */
      acot: function() {
        var c = this.re, m = this.im;
        if (m === 0)
          return new s(Math.atan2(1, c), 0);
        var v = c * c + m * m;
        return v !== 0 ? new s(
          c / v,
          -m / v
        ).atan() : new s(
          c !== 0 ? c / 0 : 0,
          m !== 0 ? -m / 0 : 0
        ).atan();
      },
      /**
       * Calculate the complex arcus secant
       *
       * @returns {Complex}
       */
      asec: function() {
        var c = this.re, m = this.im;
        if (c === 0 && m === 0)
          return new s(0, 1 / 0);
        var v = c * c + m * m;
        return v !== 0 ? new s(
          c / v,
          -m / v
        ).acos() : new s(
          c !== 0 ? c / 0 : 0,
          m !== 0 ? -m / 0 : 0
        ).acos();
      },
      /**
       * Calculate the complex arcus cosecans
       *
       * @returns {Complex}
       */
      acsc: function() {
        var c = this.re, m = this.im;
        if (c === 0 && m === 0)
          return new s(Math.PI / 2, 1 / 0);
        var v = c * c + m * m;
        return v !== 0 ? new s(
          c / v,
          -m / v
        ).asin() : new s(
          c !== 0 ? c / 0 : 0,
          m !== 0 ? -m / 0 : 0
        ).asin();
      },
      /**
       * Calculate the complex sinh
       *
       * @returns {Complex}
       */
      sinh: function() {
        var c = this.re, m = this.im;
        return new s(
          a(c) * Math.cos(m),
          n(c) * Math.sin(m)
        );
      },
      /**
       * Calculate the complex cosh
       *
       * @returns {Complex}
       */
      cosh: function() {
        var c = this.re, m = this.im;
        return new s(
          n(c) * Math.cos(m),
          a(c) * Math.sin(m)
        );
      },
      /**
       * Calculate the complex tanh
       *
       * @returns {Complex}
       */
      tanh: function() {
        var c = 2 * this.re, m = 2 * this.im, v = n(c) + Math.cos(m);
        return new s(
          a(c) / v,
          Math.sin(m) / v
        );
      },
      /**
       * Calculate the complex coth
       *
       * @returns {Complex}
       */
      coth: function() {
        var c = 2 * this.re, m = 2 * this.im, v = n(c) - Math.cos(m);
        return new s(
          a(c) / v,
          -Math.sin(m) / v
        );
      },
      /**
       * Calculate the complex coth
       *
       * @returns {Complex}
       */
      csch: function() {
        var c = this.re, m = this.im, v = Math.cos(2 * m) - n(2 * c);
        return new s(
          -2 * a(c) * Math.cos(m) / v,
          2 * n(c) * Math.sin(m) / v
        );
      },
      /**
       * Calculate the complex sech
       *
       * @returns {Complex}
       */
      sech: function() {
        var c = this.re, m = this.im, v = Math.cos(2 * m) + n(2 * c);
        return new s(
          2 * n(c) * Math.cos(m) / v,
          -2 * a(c) * Math.sin(m) / v
        );
      },
      /**
       * Calculate the complex asinh
       *
       * @returns {Complex}
       */
      asinh: function() {
        var c = this.im;
        this.im = -this.re, this.re = c;
        var m = this.asin();
        return this.re = -this.im, this.im = c, c = m.re, m.re = -m.im, m.im = c, m;
      },
      /**
       * Calculate the complex acosh
       *
       * @returns {Complex}
       */
      acosh: function() {
        var c = this.acos();
        if (c.im <= 0) {
          var m = c.re;
          c.re = -c.im, c.im = m;
        } else {
          var m = c.im;
          c.im = -c.re, c.re = m;
        }
        return c;
      },
      /**
       * Calculate the complex atanh
       *
       * @returns {Complex}
       */
      atanh: function() {
        var c = this.re, m = this.im, v = c > 1 && m === 0, d = 1 - c, p = 1 + c, b = d * d + m * m, g = b !== 0 ? new s(
          (p * d - m * m) / b,
          (m * d + p * m) / b
        ) : new s(
          c !== -1 ? c / 0 : 0,
          m !== 0 ? m / 0 : 0
        ), N = g.re;
        return g.re = l(g.re, g.im) / 2, g.im = Math.atan2(g.im, N) / 2, v && (g.im = -g.im), g;
      },
      /**
       * Calculate the complex acoth
       *
       * @returns {Complex}
       */
      acoth: function() {
        var c = this.re, m = this.im;
        if (c === 0 && m === 0)
          return new s(0, Math.PI / 2);
        var v = c * c + m * m;
        return v !== 0 ? new s(
          c / v,
          -m / v
        ).atanh() : new s(
          c !== 0 ? c / 0 : 0,
          m !== 0 ? -m / 0 : 0
        ).atanh();
      },
      /**
       * Calculate the complex acsch
       *
       * @returns {Complex}
       */
      acsch: function() {
        var c = this.re, m = this.im;
        if (m === 0)
          return new s(
            c !== 0 ? Math.log(c + Math.sqrt(c * c + 1)) : 1 / 0,
            0
          );
        var v = c * c + m * m;
        return v !== 0 ? new s(
          c / v,
          -m / v
        ).asinh() : new s(
          c !== 0 ? c / 0 : 0,
          m !== 0 ? -m / 0 : 0
        ).asinh();
      },
      /**
       * Calculate the complex asech
       *
       * @returns {Complex}
       */
      asech: function() {
        var c = this.re, m = this.im;
        if (this.isZero())
          return s.INFINITY;
        var v = c * c + m * m;
        return v !== 0 ? new s(
          c / v,
          -m / v
        ).acosh() : new s(
          c !== 0 ? c / 0 : 0,
          m !== 0 ? -m / 0 : 0
        ).acosh();
      },
      /**
       * Calculate the complex inverse 1/z
       *
       * @returns {Complex}
       */
      inverse: function() {
        if (this.isZero())
          return s.INFINITY;
        if (this.isInfinite())
          return s.ZERO;
        var c = this.re, m = this.im, v = c * c + m * m;
        return new s(c / v, -m / v);
      },
      /**
       * Returns the complex conjugate
       *
       * @returns {Complex}
       */
      conjugate: function() {
        return new s(this.re, -this.im);
      },
      /**
       * Gets the negated complex number
       *
       * @returns {Complex}
       */
      neg: function() {
        return new s(-this.re, -this.im);
      },
      /**
       * Ceils the actual complex number
       *
       * @returns {Complex}
       */
      ceil: function(c) {
        return c = Math.pow(10, c || 0), new s(
          Math.ceil(this.re * c) / c,
          Math.ceil(this.im * c) / c
        );
      },
      /**
       * Floors the actual complex number
       *
       * @returns {Complex}
       */
      floor: function(c) {
        return c = Math.pow(10, c || 0), new s(
          Math.floor(this.re * c) / c,
          Math.floor(this.im * c) / c
        );
      },
      /**
       * Ceils the actual complex number
       *
       * @returns {Complex}
       */
      round: function(c) {
        return c = Math.pow(10, c || 0), new s(
          Math.round(this.re * c) / c,
          Math.round(this.im * c) / c
        );
      },
      /**
       * Compares two complex numbers
       *
       * **Note:** new Complex(Infinity).equals(Infinity) === false
       *
       * @returns {boolean}
       */
      equals: function(c, m) {
        var v = new s(c, m);
        return Math.abs(v.re - this.re) <= s.EPSILON && Math.abs(v.im - this.im) <= s.EPSILON;
      },
      /**
       * Clones the actual object
       *
       * @returns {Complex}
       */
      clone: function() {
        return new s(this.re, this.im);
      },
      /**
       * Gets a string of the actual complex number
       *
       * @returns {string}
       */
      toString: function() {
        var c = this.re, m = this.im, v = "";
        return this.isNaN() ? "NaN" : this.isInfinite() ? "Infinity" : (Math.abs(c) < s.EPSILON && (c = 0), Math.abs(m) < s.EPSILON && (m = 0), m === 0 ? v + c : (c !== 0 ? (v += c, v += " ", m < 0 ? (m = -m, v += "-") : v += "+", v += " ") : m < 0 && (m = -m, v += "-"), m !== 1 && (v += m), v + "i"));
      },
      /**
       * Returns the actual number as a vector
       *
       * @returns {Array}
       */
      toVector: function() {
        return [this.re, this.im];
      },
      /**
       * Returns the actual real value of the current object
       *
       * @returns {number|null}
       */
      valueOf: function() {
        return this.im === 0 ? this.re : null;
      },
      /**
       * Determines whether a complex number is not on the Riemann sphere.
       *
       * @returns {boolean}
       */
      isNaN: function() {
        return isNaN(this.re) || isNaN(this.im);
      },
      /**
       * Determines whether or not a complex number is at the zero pole of the
       * Riemann sphere.
       *
       * @returns {boolean}
       */
      isZero: function() {
        return this.im === 0 && this.re === 0;
      },
      /**
       * Determines whether a complex number is not at the infinity pole of the
       * Riemann sphere.
       *
       * @returns {boolean}
       */
      isFinite: function() {
        return isFinite(this.re) && isFinite(this.im);
      },
      /**
       * Determines whether or not a complex number is at the infinity pole of the
       * Riemann sphere.
       *
       * @returns {boolean}
       */
      isInfinite: function() {
        return !(this.isNaN() || this.isFinite());
      }
    }, s.ZERO = new s(0, 0), s.ONE = new s(1, 0), s.I = new s(0, 1), s.PI = new s(Math.PI, 0), s.E = new s(Math.E, 0), s.INFINITY = new s(1 / 0, 1 / 0), s.NAN = new s(NaN, NaN), s.EPSILON = 1e-15, Object.defineProperty(s, "__esModule", { value: !0 }), s.default = s, s.Complex = s, r.exports = s;
  })();
})(Vh);
var ON = Vh.exports;
const qr = /* @__PURE__ */ Di(ON);
var TN = "Complex", BN = [], _N = /* @__PURE__ */ q(TN, BN, () => (Object.defineProperty(qr, "name", {
  value: "Complex"
}), qr.prototype.constructor = qr, qr.prototype.type = "Complex", qr.prototype.isComplex = !0, qr.prototype.toJSON = function() {
  return {
    mathjs: "Complex",
    re: this.re,
    im: this.im
  };
}, qr.prototype.toPolar = function() {
  return {
    r: this.abs(),
    phi: this.arg()
  };
}, qr.prototype.format = function(r) {
  var e = "", t = this.im, n = this.re, a = Hn(this.re, r), i = Hn(this.im, r), o = Xe(r) ? r : r ? r.precision : null;
  if (o !== null) {
    var f = Math.pow(10, -o);
    Math.abs(n / t) < f && (n = 0), Math.abs(t / n) < f && (t = 0);
  }
  return t === 0 ? e = a : n === 0 ? t === 1 ? e = "i" : t === -1 ? e = "-i" : e = i + "i" : t < 0 ? t === -1 ? e = a + " - i" : e = a + " - " + i.substring(1) + "i" : t === 1 ? e = a + " + i" : e = a + " + " + i + "i", e;
}, qr.fromPolar = function(r) {
  switch (arguments.length) {
    case 1: {
      var e = arguments[0];
      if (typeof e == "object")
        return qr(e);
      throw new TypeError("Input has to be an object with r and phi keys.");
    }
    case 2: {
      var t = arguments[0], n = arguments[1];
      if (Xe(t)) {
        if (xt(n) && n.hasBase("ANGLE") && (n = n.toNumber("rad")), Xe(n))
          return new qr({
            r: t,
            phi: n
          });
        throw new TypeError("Phi is not a number nor an angle unit.");
      } else
        throw new TypeError("Radius r is not a number.");
    }
    default:
      throw new SyntaxError("Wrong number of arguments in function fromPolar");
  }
}, qr.prototype.valueOf = qr.prototype.toString, qr.fromJSON = function(r) {
  return new qr(r);
}, qr.compare = function(r, e) {
  return r.re > e.re ? 1 : r.re < e.re ? -1 : r.im > e.im ? 1 : r.im < e.im ? -1 : 0;
}, qr), {
  isClass: !0
}), Hh = { exports: {} };
/**
 * @license Fraction.js v4.3.0 20/08/2023
 * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2023, Robert Eisele (robert@raw.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/
(function(r, e) {
  (function(t) {
    var n = 2e3, a = {
      s: 1,
      n: 0,
      d: 1
    };
    function i(g, N) {
      if (isNaN(g = parseInt(g, 10)))
        throw p();
      return g * N;
    }
    function o(g, N) {
      if (N === 0)
        throw d();
      var h = Object.create(v.prototype);
      h.s = g < 0 ? -1 : 1, g = g < 0 ? -g : g;
      var w = m(g, N);
      return h.n = g / w, h.d = N / w, h;
    }
    function f(g) {
      for (var N = {}, h = g, w = 2, x = 4; x <= h; ) {
        for (; h % w === 0; )
          h /= w, N[w] = (N[w] || 0) + 1;
        x += 1 + 2 * w++;
      }
      return h !== g ? h > 1 && (N[h] = (N[h] || 0) + 1) : N[g] = (N[g] || 0) + 1, N;
    }
    var l = function(g, N) {
      var h = 0, w = 1, x = 1, y = 0, E = 0, D = 0, S = 1, A = 1, C = 0, T = 1, $ = 1, I = 1, R = 1e7, B;
      if (g != null)
        if (N !== void 0) {
          if (h = g, w = N, x = h * w, h % 1 !== 0 || w % 1 !== 0)
            throw b();
        } else
          switch (typeof g) {
            case "object": {
              if ("d" in g && "n" in g)
                h = g.n, w = g.d, "s" in g && (h *= g.s);
              else if (0 in g)
                h = g[0], 1 in g && (w = g[1]);
              else
                throw p();
              x = h * w;
              break;
            }
            case "number": {
              if (g < 0 && (x = g, g = -g), g % 1 === 0)
                h = g;
              else if (g > 0) {
                for (g >= 1 && (A = Math.pow(10, Math.floor(1 + Math.log(g) / Math.LN10)), g /= A); T <= R && I <= R; )
                  if (B = (C + $) / (T + I), g === B) {
                    T + I <= R ? (h = C + $, w = T + I) : I > T ? (h = $, w = I) : (h = C, w = T);
                    break;
                  } else
                    g > B ? (C += $, T += I) : ($ += C, I += T), T > R ? (h = $, w = I) : (h = C, w = T);
                h *= A;
              } else
                (isNaN(g) || isNaN(N)) && (w = h = NaN);
              break;
            }
            case "string": {
              if (T = g.match(/\d+|./g), T === null)
                throw p();
              if (T[C] === "-" ? (x = -1, C++) : T[C] === "+" && C++, T.length === C + 1 ? E = i(T[C++], x) : T[C + 1] === "." || T[C] === "." ? (T[C] !== "." && (y = i(T[C++], x)), C++, (C + 1 === T.length || T[C + 1] === "(" && T[C + 3] === ")" || T[C + 1] === "'" && T[C + 3] === "'") && (E = i(T[C], x), S = Math.pow(10, T[C].length), C++), (T[C] === "(" && T[C + 2] === ")" || T[C] === "'" && T[C + 2] === "'") && (D = i(T[C + 1], x), A = Math.pow(10, T[C + 1].length) - 1, C += 3)) : T[C + 1] === "/" || T[C + 1] === ":" ? (E = i(T[C], x), S = i(T[C + 2], 1), C += 3) : T[C + 3] === "/" && T[C + 1] === " " && (y = i(T[C], x), E = i(T[C + 2], x), S = i(T[C + 4], 1), C += 5), T.length <= C) {
                w = S * A, x = /* void */
                h = D + w * y + A * E;
                break;
              }
            }
            default:
              throw p();
          }
      if (w === 0)
        throw d();
      a.s = x < 0 ? -1 : 1, a.n = Math.abs(h), a.d = Math.abs(w);
    };
    function u(g, N, h) {
      for (var w = 1; N > 0; g = g * g % h, N >>= 1)
        N & 1 && (w = w * g % h);
      return w;
    }
    function s(g, N) {
      for (; N % 2 === 0; N /= 2)
        ;
      for (; N % 5 === 0; N /= 5)
        ;
      if (N === 1)
        return 0;
      for (var h = 10 % N, w = 1; h !== 1; w++)
        if (h = h * 10 % N, w > n)
          return 0;
      return w;
    }
    function c(g, N, h) {
      for (var w = 1, x = u(10, h, N), y = 0; y < 300; y++) {
        if (w === x)
          return y;
        w = w * 10 % N, x = x * 10 % N;
      }
      return 0;
    }
    function m(g, N) {
      if (!g)
        return N;
      if (!N)
        return g;
      for (; ; ) {
        if (g %= N, !g)
          return N;
        if (N %= g, !N)
          return g;
      }
    }
    function v(g, N) {
      if (l(g, N), this instanceof v)
        g = m(a.d, a.n), this.s = a.s, this.n = a.n / g, this.d = a.d / g;
      else
        return o(a.s * a.n, a.d);
    }
    var d = function() {
      return new Error("Division by Zero");
    }, p = function() {
      return new Error("Invalid argument");
    }, b = function() {
      return new Error("Parameters must be integer");
    };
    v.prototype = {
      s: 1,
      n: 0,
      d: 1,
      /**
       * Calculates the absolute value
       *
       * Ex: new Fraction(-4).abs() => 4
       **/
      abs: function() {
        return o(this.n, this.d);
      },
      /**
       * Inverts the sign of the current fraction
       *
       * Ex: new Fraction(-4).neg() => 4
       **/
      neg: function() {
        return o(-this.s * this.n, this.d);
      },
      /**
       * Adds two rational numbers
       *
       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
       **/
      add: function(g, N) {
        return l(g, N), o(
          this.s * this.n * a.d + a.s * this.d * a.n,
          this.d * a.d
        );
      },
      /**
       * Subtracts two rational numbers
       *
       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
       **/
      sub: function(g, N) {
        return l(g, N), o(
          this.s * this.n * a.d - a.s * this.d * a.n,
          this.d * a.d
        );
      },
      /**
       * Multiplies two rational numbers
       *
       * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
       **/
      mul: function(g, N) {
        return l(g, N), o(
          this.s * a.s * this.n * a.n,
          this.d * a.d
        );
      },
      /**
       * Divides two rational numbers
       *
       * Ex: new Fraction("-17.(345)").inverse().div(3)
       **/
      div: function(g, N) {
        return l(g, N), o(
          this.s * a.s * this.n * a.d,
          this.d * a.n
        );
      },
      /**
       * Clones the actual object
       *
       * Ex: new Fraction("-17.(345)").clone()
       **/
      clone: function() {
        return o(this.s * this.n, this.d);
      },
      /**
       * Calculates the modulo of two rational numbers - a more precise fmod
       *
       * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
       **/
      mod: function(g, N) {
        if (isNaN(this.n) || isNaN(this.d))
          return new v(NaN);
        if (g === void 0)
          return o(this.s * this.n % this.d, 1);
        if (l(g, N), a.n === 0 && this.d === 0)
          throw d();
        return o(
          this.s * (a.d * this.n) % (a.n * this.d),
          a.d * this.d
        );
      },
      /**
       * Calculates the fractional gcd of two rational numbers
       *
       * Ex: new Fraction(5,8).gcd(3,7) => 1/56
       */
      gcd: function(g, N) {
        return l(g, N), o(m(a.n, this.n) * m(a.d, this.d), a.d * this.d);
      },
      /**
       * Calculates the fractional lcm of two rational numbers
       *
       * Ex: new Fraction(5,8).lcm(3,7) => 15
       */
      lcm: function(g, N) {
        return l(g, N), a.n === 0 && this.n === 0 ? o(0, 1) : o(a.n * this.n, m(a.n, this.n) * m(a.d, this.d));
      },
      /**
       * Calculates the ceil of a rational number
       *
       * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
       **/
      ceil: function(g) {
        return g = Math.pow(10, g || 0), isNaN(this.n) || isNaN(this.d) ? new v(NaN) : o(Math.ceil(g * this.s * this.n / this.d), g);
      },
      /**
       * Calculates the floor of a rational number
       *
       * Ex: new Fraction('4.(3)').floor() => (4 / 1)
       **/
      floor: function(g) {
        return g = Math.pow(10, g || 0), isNaN(this.n) || isNaN(this.d) ? new v(NaN) : o(Math.floor(g * this.s * this.n / this.d), g);
      },
      /**
       * Rounds a rational numbers
       *
       * Ex: new Fraction('4.(3)').round() => (4 / 1)
       **/
      round: function(g) {
        return g = Math.pow(10, g || 0), isNaN(this.n) || isNaN(this.d) ? new v(NaN) : o(Math.round(g * this.s * this.n / this.d), g);
      },
      /**
       * Gets the inverse of the fraction, means numerator and denominator are exchanged
       *
       * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
       **/
      inverse: function() {
        return o(this.s * this.d, this.n);
      },
      /**
       * Calculates the fraction to some rational exponent, if possible
       *
       * Ex: new Fraction(-1,2).pow(-3) => -8
       */
      pow: function(g, N) {
        if (l(g, N), a.d === 1)
          return a.s < 0 ? o(Math.pow(this.s * this.d, a.n), Math.pow(this.n, a.n)) : o(Math.pow(this.s * this.n, a.n), Math.pow(this.d, a.n));
        if (this.s < 0)
          return null;
        var h = f(this.n), w = f(this.d), x = 1, y = 1;
        for (var E in h)
          if (E !== "1") {
            if (E === "0") {
              x = 0;
              break;
            }
            if (h[E] *= a.n, h[E] % a.d === 0)
              h[E] /= a.d;
            else
              return null;
            x *= Math.pow(E, h[E]);
          }
        for (var E in w)
          if (E !== "1") {
            if (w[E] *= a.n, w[E] % a.d === 0)
              w[E] /= a.d;
            else
              return null;
            y *= Math.pow(E, w[E]);
          }
        return a.s < 0 ? o(y, x) : o(x, y);
      },
      /**
       * Check if two rational numbers are the same
       *
       * Ex: new Fraction(19.6).equals([98, 5]);
       **/
      equals: function(g, N) {
        return l(g, N), this.s * this.n * a.d === a.s * a.n * this.d;
      },
      /**
       * Check if two rational numbers are the same
       *
       * Ex: new Fraction(19.6).equals([98, 5]);
       **/
      compare: function(g, N) {
        l(g, N);
        var h = this.s * this.n * a.d - a.s * a.n * this.d;
        return (0 < h) - (h < 0);
      },
      simplify: function(g) {
        if (isNaN(this.n) || isNaN(this.d))
          return this;
        g = g || 1e-3;
        for (var N = this.abs(), h = N.toContinued(), w = 1; w < h.length; w++) {
          for (var x = o(h[w - 1], 1), y = w - 2; y >= 0; y--)
            x = x.inverse().add(h[y]);
          if (Math.abs(x.sub(N).valueOf()) < g)
            return x.mul(this.s);
        }
        return this;
      },
      /**
       * Check if two rational numbers are divisible
       *
       * Ex: new Fraction(19.6).divisible(1.5);
       */
      divisible: function(g, N) {
        return l(g, N), !(!(a.n * this.d) || this.n * a.d % (a.n * this.d));
      },
      /**
       * Returns a decimal representation of the fraction
       *
       * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
       **/
      valueOf: function() {
        return this.s * this.n / this.d;
      },
      /**
       * Returns a string-fraction representation of a Fraction object
       *
       * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
       **/
      toFraction: function(g) {
        var N, h = "", w = this.n, x = this.d;
        return this.s < 0 && (h += "-"), x === 1 ? h += w : (g && (N = Math.floor(w / x)) > 0 && (h += N, h += " ", w %= x), h += w, h += "/", h += x), h;
      },
      /**
       * Returns a latex representation of a Fraction object
       *
       * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
       **/
      toLatex: function(g) {
        var N, h = "", w = this.n, x = this.d;
        return this.s < 0 && (h += "-"), x === 1 ? h += w : (g && (N = Math.floor(w / x)) > 0 && (h += N, w %= x), h += "\\frac{", h += w, h += "}{", h += x, h += "}"), h;
      },
      /**
       * Returns an array of continued fraction elements
       *
       * Ex: new Fraction("7/8").toContinued() => [0,1,7]
       */
      toContinued: function() {
        var g, N = this.n, h = this.d, w = [];
        if (isNaN(N) || isNaN(h))
          return w;
        do
          w.push(Math.floor(N / h)), g = N % h, N = h, h = g;
        while (N !== 1);
        return w;
      },
      /**
       * Creates a string representation of a fraction with all digits
       *
       * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
       **/
      toString: function(g) {
        var N = this.n, h = this.d;
        if (isNaN(N) || isNaN(h))
          return "NaN";
        g = g || 15;
        var w = s(N, h), x = c(N, h, w), y = this.s < 0 ? "-" : "";
        if (y += N / h | 0, N %= h, N *= 10, N && (y += "."), w) {
          for (var E = x; E--; )
            y += N / h | 0, N %= h, N *= 10;
          y += "(";
          for (var E = w; E--; )
            y += N / h | 0, N %= h, N *= 10;
          y += ")";
        } else
          for (var E = g; N && E--; )
            y += N / h | 0, N %= h, N *= 10;
        return y;
      }
    }, Object.defineProperty(v, "__esModule", { value: !0 }), v.default = v, v.Fraction = v, r.exports = v;
  })();
})(Hh);
var FN = Hh.exports;
const jt = /* @__PURE__ */ Di(FN);
var $N = "Fraction", RN = [], IN = /* @__PURE__ */ q($N, RN, () => (Object.defineProperty(jt, "name", {
  value: "Fraction"
}), jt.prototype.constructor = jt, jt.prototype.type = "Fraction", jt.prototype.isFraction = !0, jt.prototype.toJSON = function() {
  return {
    mathjs: "Fraction",
    n: this.s * this.n,
    d: this.d
  };
}, jt.fromJSON = function(r) {
  return new jt(r);
}, jt), {
  isClass: !0
}), PN = "Range", qN = [], LN = /* @__PURE__ */ q(PN, qN, () => {
  function r(e, t, n) {
    if (!(this instanceof r))
      throw new SyntaxError("Constructor must be called with the new operator");
    var a = e != null, i = t != null, o = n != null;
    if (a) {
      if (rr(e))
        e = e.toNumber();
      else if (typeof e != "number")
        throw new TypeError("Parameter start must be a number");
    }
    if (i) {
      if (rr(t))
        t = t.toNumber();
      else if (typeof t != "number")
        throw new TypeError("Parameter end must be a number");
    }
    if (o) {
      if (rr(n))
        n = n.toNumber();
      else if (typeof n != "number")
        throw new TypeError("Parameter step must be a number");
    }
    this.start = a ? parseFloat(e) : 0, this.end = i ? parseFloat(t) : 0, this.step = o ? parseFloat(n) : 1;
  }
  return r.prototype.type = "Range", r.prototype.isRange = !0, r.parse = function(e) {
    if (typeof e != "string")
      return null;
    var t = e.split(":"), n = t.map(function(i) {
      return parseFloat(i);
    }), a = n.some(function(i) {
      return isNaN(i);
    });
    if (a)
      return null;
    switch (n.length) {
      case 2:
        return new r(n[0], n[1]);
      case 3:
        return new r(n[0], n[2], n[1]);
      default:
        return null;
    }
  }, r.prototype.clone = function() {
    return new r(this.start, this.end, this.step);
  }, r.prototype.size = function() {
    var e = 0, t = this.start, n = this.step, a = this.end, i = a - t;
    return An(n) === An(i) ? e = Math.ceil(i / n) : i === 0 && (e = 0), isNaN(e) && (e = 0), [e];
  }, r.prototype.min = function() {
    var e = this.size()[0];
    if (e > 0)
      return this.step > 0 ? this.start : this.start + (e - 1) * this.step;
  }, r.prototype.max = function() {
    var e = this.size()[0];
    if (e > 0)
      return this.step > 0 ? this.start + (e - 1) * this.step : this.start;
  }, r.prototype.forEach = function(e) {
    var t = this.start, n = this.step, a = this.end, i = 0;
    if (n > 0)
      for (; t < a; )
        e(t, [i], this), t += n, i++;
    else if (n < 0)
      for (; t > a; )
        e(t, [i], this), t += n, i++;
  }, r.prototype.map = function(e) {
    var t = [];
    return this.forEach(function(n, a, i) {
      t[a[0]] = e(n, a, i);
    }), t;
  }, r.prototype.toArray = function() {
    var e = [];
    return this.forEach(function(t, n) {
      e[n[0]] = t;
    }), e;
  }, r.prototype.valueOf = function() {
    return this.toArray();
  }, r.prototype.format = function(e) {
    var t = Hn(this.start, e);
    return this.step !== 1 && (t += ":" + Hn(this.step, e)), t += ":" + Hn(this.end, e), t;
  }, r.prototype.toString = function() {
    return this.format();
  }, r.prototype.toJSON = function() {
    return {
      mathjs: "Range",
      start: this.start,
      end: this.end,
      step: this.step
    };
  }, r.fromJSON = function(e) {
    return new r(e.start, e.end, e.step);
  }, r;
}, {
  isClass: !0
}), zN = "Matrix", UN = [], kN = /* @__PURE__ */ q(zN, UN, () => {
  function r() {
    if (!(this instanceof r))
      throw new SyntaxError("Constructor must be called with the new operator");
  }
  return r.prototype.type = "Matrix", r.prototype.isMatrix = !0, r.prototype.storage = function() {
    throw new Error("Cannot invoke storage on a Matrix interface");
  }, r.prototype.datatype = function() {
    throw new Error("Cannot invoke datatype on a Matrix interface");
  }, r.prototype.create = function(e, t) {
    throw new Error("Cannot invoke create on a Matrix interface");
  }, r.prototype.subset = function(e, t, n) {
    throw new Error("Cannot invoke subset on a Matrix interface");
  }, r.prototype.get = function(e) {
    throw new Error("Cannot invoke get on a Matrix interface");
  }, r.prototype.set = function(e, t, n) {
    throw new Error("Cannot invoke set on a Matrix interface");
  }, r.prototype.resize = function(e, t) {
    throw new Error("Cannot invoke resize on a Matrix interface");
  }, r.prototype.reshape = function(e, t) {
    throw new Error("Cannot invoke reshape on a Matrix interface");
  }, r.prototype.clone = function() {
    throw new Error("Cannot invoke clone on a Matrix interface");
  }, r.prototype.size = function() {
    throw new Error("Cannot invoke size on a Matrix interface");
  }, r.prototype.map = function(e, t) {
    throw new Error("Cannot invoke map on a Matrix interface");
  }, r.prototype.forEach = function(e) {
    throw new Error("Cannot invoke forEach on a Matrix interface");
  }, r.prototype[Symbol.iterator] = function() {
    throw new Error("Cannot iterate a Matrix interface");
  }, r.prototype.toArray = function() {
    throw new Error("Cannot invoke toArray on a Matrix interface");
  }, r.prototype.valueOf = function() {
    throw new Error("Cannot invoke valueOf on a Matrix interface");
  }, r.prototype.format = function(e) {
    throw new Error("Cannot invoke format on a Matrix interface");
  }, r.prototype.toString = function() {
    throw new Error("Cannot invoke toString on a Matrix interface");
  }, r;
}, {
  isClass: !0
});
function GN(r) {
  var e = 0, t = 1, n = /* @__PURE__ */ Object.create(null), a = /* @__PURE__ */ Object.create(null), i = 0, o = function(l) {
    var u = a[l];
    if (u && (delete n[u], delete a[l], --e, t === u)) {
      if (!e) {
        i = 0, t = 1;
        return;
      }
      for (; !Object.prototype.hasOwnProperty.call(n, ++t); )
        ;
    }
  };
  return r = Math.abs(r), {
    hit: function(l) {
      var u = a[l], s = ++i;
      if (n[s] = l, a[l] = s, !u)
        return ++e, e <= r ? void 0 : (l = n[t], o(l), l);
      if (delete n[u], t === u)
        for (; !Object.prototype.hasOwnProperty.call(n, ++t); )
          ;
    },
    delete: o,
    clear: function() {
      e = i = 0, t = 1, n = /* @__PURE__ */ Object.create(null), a = /* @__PURE__ */ Object.create(null);
    }
  };
}
function Mi(r) {
  var {
    hasher: e,
    limit: t
  } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return t = t ?? Number.POSITIVE_INFINITY, e = e ?? JSON.stringify, function n() {
    typeof n.cache != "object" && (n.cache = {
      values: /* @__PURE__ */ new Map(),
      lru: GN(t || Number.POSITIVE_INFINITY)
    });
    for (var a = [], i = 0; i < arguments.length; i++)
      a[i] = arguments[i];
    var o = e(a);
    if (n.cache.values.has(o))
      return n.cache.lru.hit(o), n.cache.values.get(o);
    var f = r.apply(r, a);
    return n.cache.values.set(o, f), n.cache.values.delete(n.cache.lru.hit(o)), f;
  };
}
function Zh(r) {
  return Object.keys(r.signatures || {}).reduce(function(e, t) {
    var n = (t.match(/,/g) || []).length + 1;
    return Math.max(e, n);
  }, -1);
}
var VN = "DenseMatrix", HN = ["Matrix"], ZN = /* @__PURE__ */ q(VN, HN, (r) => {
  var {
    Matrix: e
  } = r;
  function t(s, c) {
    if (!(this instanceof t))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (c && !Hr(c))
      throw new Error("Invalid datatype: " + c);
    if (Le(s))
      s.type === "DenseMatrix" ? (this._data = Ge(s._data), this._size = Ge(s._size), this._datatype = c || s._datatype) : (this._data = s.toArray(), this._size = s.size(), this._datatype = c || s._datatype);
    else if (s && sr(s.data) && sr(s.size))
      this._data = s.data, this._size = s.size, af(this._data, this._size), this._datatype = c || s.datatype;
    else if (sr(s))
      this._data = u(s), this._size = Ye(this._data), af(this._data, this._size), this._datatype = c;
    else {
      if (s)
        throw new TypeError("Unsupported type of data (" + hr(s) + ")");
      this._data = [], this._size = [0], this._datatype = c;
    }
  }
  t.prototype = new e(), t.prototype.createDenseMatrix = function(s, c) {
    return new t(s, c);
  }, Object.defineProperty(t, "name", {
    value: "DenseMatrix"
  }), t.prototype.constructor = t, t.prototype.type = "DenseMatrix", t.prototype.isDenseMatrix = !0, t.prototype.getDataType = function() {
    return wi(this._data, hr);
  }, t.prototype.storage = function() {
    return "dense";
  }, t.prototype.datatype = function() {
    return this._datatype;
  }, t.prototype.create = function(s, c) {
    return new t(s, c);
  }, t.prototype.subset = function(s, c, m) {
    switch (arguments.length) {
      case 1:
        return n(this, s);
      case 2:
      case 3:
        return i(this, s, c, m);
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  }, t.prototype.get = function(s) {
    if (!sr(s))
      throw new TypeError("Array expected");
    if (s.length !== this._size.length)
      throw new Ke(s.length, this._size.length);
    for (var c = 0; c < s.length; c++)
      pr(s[c], this._size[c]);
    for (var m = this._data, v = 0, d = s.length; v < d; v++) {
      var p = s[v];
      pr(p, m.length), m = m[p];
    }
    return m;
  }, t.prototype.set = function(s, c, m) {
    if (!sr(s))
      throw new TypeError("Array expected");
    if (s.length < this._size.length)
      throw new Ke(s.length, this._size.length, "<");
    var v, d, p, b = s.map(function(N) {
      return N + 1;
    });
    l(this, b, m);
    var g = this._data;
    for (v = 0, d = s.length - 1; v < d; v++)
      p = s[v], pr(p, g.length), g = g[p];
    return p = s[s.length - 1], pr(p, g.length), g[p] = c, this;
  };
  function n(s, c) {
    if (!as(c))
      throw new TypeError("Invalid index");
    var m = c.isScalar();
    if (m)
      return s.get(c.min());
    var v = c.size();
    if (v.length !== s._size.length)
      throw new Ke(v.length, s._size.length);
    for (var d = c.min(), p = c.max(), b = 0, g = s._size.length; b < g; b++)
      pr(d[b], s._size[b]), pr(p[b], s._size[b]);
    return new t(a(s._data, c, v.length, 0), s._datatype);
  }
  function a(s, c, m, v) {
    var d = v === m - 1, p = c.dimension(v);
    return d ? p.map(function(b) {
      return pr(b, s.length), s[b];
    }).valueOf() : p.map(function(b) {
      pr(b, s.length);
      var g = s[b];
      return a(g, c, m, v + 1);
    }).valueOf();
  }
  function i(s, c, m, v) {
    if (!c || c.isIndex !== !0)
      throw new TypeError("Invalid index");
    var d = c.size(), p = c.isScalar(), b;
    if (Le(m) ? (b = m.size(), m = m.valueOf()) : b = Ye(m), p) {
      if (b.length !== 0)
        throw new TypeError("Scalar expected");
      s.set(c.min(), m, v);
    } else {
      if (!Wn(b, d))
        try {
          b.length === 0 ? m = sf([m], d) : m = sf(m, d), b = Ye(m);
        } catch {
        }
      if (d.length < s._size.length)
        throw new Ke(d.length, s._size.length, "<");
      if (b.length < d.length) {
        for (var g = 0, N = 0; d[g] === 1 && b[g] === 1; )
          g++;
        for (; d[g] === 1; )
          N++, g++;
        m = Dh(m, d.length, N, b);
      }
      if (!Wn(d, b))
        throw new Ke(d, b, ">");
      var h = c.max().map(function(y) {
        return y + 1;
      });
      l(s, h, v);
      var w = d.length, x = 0;
      o(s._data, c, m, w, x);
    }
    return s;
  }
  function o(s, c, m, v, d) {
    var p = d === v - 1, b = c.dimension(d);
    p ? b.forEach(function(g, N) {
      pr(g), s[g] = m[N[0]];
    }) : b.forEach(function(g, N) {
      pr(g), o(s[g], c, m[N[0]], v, d + 1);
    });
  }
  t.prototype.resize = function(s, c, m) {
    if (!Cn(s))
      throw new TypeError("Array or Matrix expected");
    var v = s.valueOf().map((p) => Array.isArray(p) && p.length === 1 ? p[0] : p), d = m ? this.clone() : this;
    return f(d, v, c);
  };
  function f(s, c, m) {
    if (c.length === 0) {
      for (var v = s._data; sr(v); )
        v = v[0];
      return v;
    }
    return s._size = c.slice(0), s._data = Pa(s._data, s._size, m), s;
  }
  t.prototype.reshape = function(s, c) {
    var m = c ? this.clone() : this;
    m._data = Tc(m._data, s);
    var v = m._size.reduce((d, p) => d * p);
    return m._size = Bc(s, v), m;
  };
  function l(s, c, m) {
    for (var v = s._size.slice(0), d = !1; v.length < c.length; )
      v.push(0), d = !0;
    for (var p = 0, b = c.length; p < b; p++)
      c[p] > v[p] && (v[p] = c[p], d = !0);
    d && f(s, v, m);
  }
  t.prototype.clone = function() {
    var s = new t({
      data: Ge(this._data),
      size: Ge(this._size),
      datatype: this._datatype
    });
    return s;
  }, t.prototype.size = function() {
    return this._size.slice(0);
  }, t.prototype.map = function(s) {
    var c = this, m = Zh(s), v = function b(g, N) {
      return sr(g) ? g.map(function(h, w) {
        return b(h, N.concat(w));
      }) : m === 1 ? s(g) : m === 2 ? s(g, N) : s(g, N, c);
    }, d = v(this._data, []), p = this._datatype !== void 0 ? wi(d, hr) : void 0;
    return new t(d, p);
  }, t.prototype.forEach = function(s) {
    var c = this, m = function v(d, p) {
      sr(d) ? d.forEach(function(b, g) {
        v(b, p.concat(g));
      }) : s(d, p, c);
    };
    m(this._data, []);
  }, t.prototype[Symbol.iterator] = function* () {
    var s = function* c(m, v) {
      if (sr(m))
        for (var d = 0; d < m.length; d++)
          yield* c(m[d], v.concat(d));
      else
        yield {
          value: m,
          index: v
        };
    };
    yield* s(this._data, []);
  }, t.prototype.rows = function() {
    var s = [], c = this.size();
    if (c.length !== 2)
      throw new TypeError("Rows can only be returned for a 2D matrix.");
    var m = this._data;
    for (var v of m)
      s.push(new t([v], this._datatype));
    return s;
  }, t.prototype.columns = function() {
    var s = this, c = [], m = this.size();
    if (m.length !== 2)
      throw new TypeError("Rows can only be returned for a 2D matrix.");
    for (var v = this._data, d = function(g) {
      var N = v.map((h) => [h[g]]);
      c.push(new t(N, s._datatype));
    }, p = 0; p < m[1]; p++)
      d(p);
    return c;
  }, t.prototype.toArray = function() {
    return Ge(this._data);
  }, t.prototype.valueOf = function() {
    return this._data;
  }, t.prototype.format = function(s) {
    return Je(this._data, s);
  }, t.prototype.toString = function() {
    return Je(this._data);
  }, t.prototype.toJSON = function() {
    return {
      mathjs: "DenseMatrix",
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  }, t.prototype.diagonal = function(s) {
    if (s) {
      if (rr(s) && (s = s.toNumber()), !Xe(s) || !Ie(s))
        throw new TypeError("The parameter k must be an integer number");
    } else
      s = 0;
    for (var c = s > 0 ? s : 0, m = s < 0 ? -s : 0, v = this._size[0], d = this._size[1], p = Math.min(v - m, d - c), b = [], g = 0; g < p; g++)
      b[g] = this._data[g + m][g + c];
    return new t({
      data: b,
      size: [p],
      datatype: this._datatype
    });
  }, t.diagonal = function(s, c, m, v) {
    if (!sr(s))
      throw new TypeError("Array expected, size parameter");
    if (s.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    if (s = s.map(function(E) {
      if (rr(E) && (E = E.toNumber()), !Xe(E) || !Ie(E) || E < 1)
        throw new Error("Size values must be positive integers");
      return E;
    }), m) {
      if (rr(m) && (m = m.toNumber()), !Xe(m) || !Ie(m))
        throw new TypeError("The parameter k must be an integer number");
    } else
      m = 0;
    var d = m > 0 ? m : 0, p = m < 0 ? -m : 0, b = s[0], g = s[1], N = Math.min(b - p, g - d), h;
    if (sr(c)) {
      if (c.length !== N)
        throw new Error("Invalid value array length");
      h = function(D) {
        return c[D];
      };
    } else if (Le(c)) {
      var w = c.size();
      if (w.length !== 1 || w[0] !== N)
        throw new Error("Invalid matrix length");
      h = function(D) {
        return c.get([D]);
      };
    } else
      h = function() {
        return c;
      };
    v || (v = rr(h(0)) ? h(0).mul(0) : 0);
    var x = [];
    if (s.length > 0) {
      x = Pa(x, s, v);
      for (var y = 0; y < N; y++)
        x[y + p][y + d] = h(y);
    }
    return new t({
      data: x,
      size: [b, g]
    });
  }, t.fromJSON = function(s) {
    return new t(s);
  }, t.prototype.swapRows = function(s, c) {
    if (!Xe(s) || !Ie(s) || !Xe(c) || !Ie(c))
      throw new Error("Row index must be positive integers");
    if (this._size.length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    return pr(s, this._size[0]), pr(c, this._size[0]), t._swapRows(s, c, this._data), this;
  }, t._swapRows = function(s, c, m) {
    var v = m[s];
    m[s] = m[c], m[c] = v;
  };
  function u(s) {
    return Le(s) ? u(s.valueOf()) : sr(s) ? s.map(u) : s;
  }
  return t;
}, {
  isClass: !0
}), mf = "clone", YN = ["typed"], WN = /* @__PURE__ */ q(mf, YN, (r) => {
  var {
    typed: e
  } = r;
  return e(mf, {
    any: Ge
  });
});
function Yh(r) {
  var e = r.length, t = r[0].length, n, a, i = [];
  for (a = 0; a < t; a++) {
    var o = [];
    for (n = 0; n < e; n++)
      o.push(r[n][a]);
    i.push(o);
  }
  return i;
}
function Wa(r) {
  for (var e = 0; e < r.length; e++)
    if (Cn(r[e]))
      return !0;
  return !1;
}
function ln(r, e) {
  Le(r) && (r = r.valueOf());
  for (var t = 0, n = r.length; t < n; t++) {
    var a = r[t];
    Array.isArray(a) ? ln(a, e) : e(a);
  }
}
function je(r, e, t) {
  return r && typeof r.map == "function" ? r.map(function(n) {
    return je(n, e);
  }) : e(r);
}
function vs(r, e, t) {
  var n = Array.isArray(r) ? Ye(r) : r.size();
  if (e < 0 || e >= n.length)
    throw new Rt(e, n.length);
  return Le(r) ? r.create(qo(r.valueOf(), e, t)) : qo(r, e, t);
}
function qo(r, e, t) {
  var n, a, i, o;
  if (e <= 0)
    if (Array.isArray(r[0])) {
      for (o = Yh(r), a = [], n = 0; n < o.length; n++)
        a[n] = qo(o[n], e - 1, t);
      return a;
    } else {
      for (i = r[0], n = 1; n < r.length; n++)
        i = t(i, r[n]);
      return i;
    }
  else {
    for (a = [], n = 0; n < r.length; n++)
      a[n] = qo(r[n], e - 1, t);
    return a;
  }
}
function vf(r, e, t, n, a, i, o, f, l, u, s) {
  var c = r._values, m = r._index, v = r._ptr, d, p, b, g;
  if (n)
    for (p = v[e], b = v[e + 1], d = p; d < b; d++)
      g = m[d], t[g] !== i ? (t[g] = i, o.push(g), u ? (n[g] = l ? f(c[d], s) : f(s, c[d]), a[g] = i) : n[g] = c[d]) : (n[g] = l ? f(c[d], n[g]) : f(n[g], c[d]), a[g] = i);
  else
    for (p = v[e], b = v[e + 1], d = p; d < b; d++)
      g = m[d], t[g] !== i ? (t[g] = i, o.push(g)) : a[g] = i;
}
var pf = "isInteger", JN = ["typed"], XN = /* @__PURE__ */ q(pf, JN, (r) => {
  var {
    typed: e
  } = r;
  return e(pf, {
    number: Ie,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    BigNumber: function(n) {
      return n.isInt();
    },
    Fraction: function(n) {
      return n.d === 1 && isFinite(n.n);
    },
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), It = "number", Ja = "number, number";
function Wh(r) {
  return Math.abs(r);
}
Wh.signature = It;
function Jh(r, e) {
  return r + e;
}
Jh.signature = Ja;
function Xh(r, e) {
  return r - e;
}
Xh.signature = Ja;
function Kh(r, e) {
  return r * e;
}
Kh.signature = Ja;
function Qh(r) {
  return -r;
}
Qh.signature = It;
function jh(r) {
  return r;
}
jh.signature = It;
function di(r) {
  return Xx(r);
}
di.signature = It;
function e0(r) {
  return r * r * r;
}
e0.signature = It;
function r0(r) {
  return Math.exp(r);
}
r0.signature = It;
function t0(r) {
  return Kx(r);
}
t0.signature = It;
function n0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Parameters in function lcm must be integer numbers");
  if (r === 0 || e === 0)
    return 0;
  for (var t, n = r * e; e !== 0; )
    t = e, e = r % t, r = t;
  return Math.abs(n / r);
}
n0.signature = Ja;
function KN(r, e) {
  return e ? Math.log(r) / Math.log(e) : Math.log(r);
}
function a0(r) {
  return Wx(r);
}
a0.signature = It;
function i0(r) {
  return Yx(r);
}
i0.signature = It;
function df(r) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2, t = e < 0;
  if (t && (e = -e), e === 0)
    throw new Error("Root must be non-zero");
  if (r < 0 && Math.abs(e) % 2 !== 1)
    throw new Error("Root must be odd when a is negative.");
  if (r === 0)
    return t ? 1 / 0 : 0;
  if (!isFinite(r))
    return t ? 0 : r;
  var n = Math.pow(Math.abs(r), 1 / e);
  return n = r < 0 ? -n : n, t ? 1 / n : n;
}
function tc(r) {
  return An(r);
}
tc.signature = It;
function o0(r) {
  return r * r;
}
o0.signature = It;
function s0(r, e) {
  var t, n, a, i = 0, o = 1, f = 1, l = 0;
  if (!Ie(r) || !Ie(e))
    throw new Error("Parameters in function xgcd must be integer numbers");
  for (; e; )
    n = Math.floor(r / e), a = r - n * e, t = i, i = o - n * i, o = t, t = f, f = l - n * f, l = t, r = e, e = a;
  var u;
  return r < 0 ? u = [-r, -o, -l] : u = [r, r ? o : 0, l], u;
}
s0.signature = Ja;
function u0(r, e) {
  return r * r < 1 && e === 1 / 0 || r * r > 1 && e === -1 / 0 ? 0 : Math.pow(r, e);
}
u0.signature = Ja;
function hf(r) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!Ie(e) || e < 0 || e > 15)
    throw new Error("Number of decimals in function round must be an integer from 0 to 15 inclusive");
  return parseFloat(bh(r, e));
}
var QN = "number", Xa = "number, number";
function c0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Integers expected in function bitAnd");
  return r & e;
}
c0.signature = Xa;
function l0(r) {
  if (!Ie(r))
    throw new Error("Integer expected in function bitNot");
  return ~r;
}
l0.signature = QN;
function f0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Integers expected in function bitOr");
  return r | e;
}
f0.signature = Xa;
function m0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Integers expected in function bitXor");
  return r ^ e;
}
m0.signature = Xa;
function v0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Integers expected in function leftShift");
  return r << e;
}
v0.signature = Xa;
function p0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Integers expected in function rightArithShift");
  return r >> e;
}
p0.signature = Xa;
function d0(r, e) {
  if (!Ie(r) || !Ie(e))
    throw new Error("Integers expected in function rightLogShift");
  return r >>> e;
}
d0.signature = Xa;
function nn(r, e) {
  if (e < r)
    return 1;
  if (e === r)
    return e;
  var t = e + r >> 1;
  return nn(r, t) * nn(t + 1, e);
}
function h0(r, e) {
  if (!Ie(r) || r < 0)
    throw new TypeError("Positive integer value expected in function combinations");
  if (!Ie(e) || e < 0)
    throw new TypeError("Positive integer value expected in function combinations");
  if (e > r)
    throw new TypeError("k must be less than or equal to n");
  for (var t = r - e, n = 1, a = e < t ? t + 1 : e + 1, i = 2, o = e < t ? e : t, f = a; f <= r; ++f)
    for (n *= f; i <= o && n % i === 0; )
      n /= i, ++i;
  return i <= o && (n /= nn(i, o)), n;
}
h0.signature = "number, number";
var jN = Math.PI, eA = 2 * Math.PI, rA = Math.E, tA = 1.618033988749895, nA = "number", Ic = "number, number";
function g0(r) {
  return !r;
}
g0.signature = nA;
function y0(r, e) {
  return !!(r || e);
}
y0.signature = Ic;
function b0(r, e) {
  return !!r != !!e;
}
b0.signature = Ic;
function x0(r, e) {
  return !!(r && e);
}
x0.signature = Ic;
function Lo(r) {
  var e;
  if (Ie(r))
    return r <= 0 ? isFinite(r) ? 1 / 0 : NaN : r > 171 ? 1 / 0 : nn(1, r - 1);
  if (r < 0.5)
    return Math.PI / (Math.sin(Math.PI * r) * Lo(1 - r));
  if (r >= 171.35)
    return 1 / 0;
  if (r > 85) {
    var t = r * r, n = t * r, a = n * r, i = a * r;
    return Math.sqrt(2 * Math.PI / r) * Math.pow(r / Math.E, r) * (1 + 1 / (12 * r) + 1 / (288 * t) - 139 / (51840 * n) - 571 / (2488320 * a) + 163879 / (209018880 * i) + 5246819 / (75246796800 * i * r));
  }
  --r, e = Ta[0];
  for (var o = 1; o < Ta.length; ++o)
    e += Ta[o] / (r + o);
  var f = r + w0 + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(f, r + 0.5) * Math.exp(-f) * e;
}
Lo.signature = "number";
var w0 = 4.7421875, Ta = [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3399464998481189e-20, 4652362892704858e-20, -9837447530487956e-20, 1580887032249125e-19, -21026444172410488e-20, 21743961811521265e-20, -1643181065367639e-19, 8441822398385275e-20, -26190838401581408e-21, 36899182659531625e-22], N0 = 0.9189385332046728, aA = 5, iA = 7, gf = [1.000000000190015, 76.18009172947146, -86.50532032941678, 24.01409824083091, -1.231739572450155, 0.001208650973866179, -5395239384953e-18];
function zo(r) {
  if (r < 0)
    return NaN;
  if (r === 0)
    return 1 / 0;
  if (!isFinite(r))
    return r;
  if (r < 0.5)
    return Math.log(Math.PI / Math.sin(Math.PI * r)) - zo(1 - r);
  r = r - 1;
  for (var e = r + aA + 0.5, t = gf[0], n = iA - 1; n >= 1; n--)
    t += gf[n] / (r + n);
  return N0 + (r + 0.5) * Math.log(e) - e + Math.log(t);
}
zo.signature = "number";
var Wr = "number";
function A0(r) {
  return tw(r);
}
A0.signature = Wr;
function E0(r) {
  return Math.atan(1 / r);
}
E0.signature = Wr;
function D0(r) {
  return isFinite(r) ? (Math.log((r + 1) / r) + Math.log(r / (r - 1))) / 2 : 0;
}
D0.signature = Wr;
function S0(r) {
  return Math.asin(1 / r);
}
S0.signature = Wr;
function C0(r) {
  var e = 1 / r;
  return Math.log(e + Math.sqrt(e * e + 1));
}
C0.signature = Wr;
function M0(r) {
  return Math.acos(1 / r);
}
M0.signature = Wr;
function O0(r) {
  var e = 1 / r, t = Math.sqrt(e * e - 1);
  return Math.log(t + e);
}
O0.signature = Wr;
function T0(r) {
  return nw(r);
}
T0.signature = Wr;
function B0(r) {
  return aw(r);
}
B0.signature = Wr;
function _0(r) {
  return 1 / Math.tan(r);
}
_0.signature = Wr;
function F0(r) {
  var e = Math.exp(2 * r);
  return (e + 1) / (e - 1);
}
F0.signature = Wr;
function $0(r) {
  return 1 / Math.sin(r);
}
$0.signature = Wr;
function R0(r) {
  return r === 0 ? Number.POSITIVE_INFINITY : Math.abs(2 / (Math.exp(r) - Math.exp(-r))) * An(r);
}
R0.signature = Wr;
function I0(r) {
  return 1 / Math.cos(r);
}
I0.signature = Wr;
function P0(r) {
  return 2 / (Math.exp(r) + Math.exp(-r));
}
P0.signature = Wr;
function q0(r) {
  return ow(r);
}
q0.signature = Wr;
var ps = "number";
function L0(r) {
  return r < 0;
}
L0.signature = ps;
function z0(r) {
  return r > 0;
}
z0.signature = ps;
function U0(r) {
  return r === 0;
}
U0.signature = ps;
function k0(r) {
  return Number.isNaN(r);
}
k0.signature = ps;
var yf = "isNegative", oA = ["typed"], sA = /* @__PURE__ */ q(yf, oA, (r) => {
  var {
    typed: e
  } = r;
  return e(yf, {
    number: L0,
    BigNumber: function(n) {
      return n.isNeg() && !n.isZero() && !n.isNaN();
    },
    Fraction: function(n) {
      return n.s < 0;
    },
    Unit: e.referToSelf((t) => (n) => e.find(t, n.valueType())(n.value)),
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), bf = "isNumeric", uA = ["typed"], cA = /* @__PURE__ */ q(bf, uA, (r) => {
  var {
    typed: e
  } = r;
  return e(bf, {
    "number | BigNumber | Fraction | boolean": () => !0,
    "Complex | Unit | string | null | undefined | Node": () => !1,
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), xf = "hasNumericValue", lA = ["typed", "isNumeric"], fA = /* @__PURE__ */ q(xf, lA, (r) => {
  var {
    typed: e,
    isNumeric: t
  } = r;
  return e(xf, {
    boolean: () => !0,
    string: function(a) {
      return a.trim().length > 0 && !isNaN(Number(a));
    },
    any: function(a) {
      return t(a);
    }
  });
}), wf = "isPositive", mA = ["typed"], vA = /* @__PURE__ */ q(wf, mA, (r) => {
  var {
    typed: e
  } = r;
  return e(wf, {
    number: z0,
    BigNumber: function(n) {
      return !n.isNeg() && !n.isZero() && !n.isNaN();
    },
    Fraction: function(n) {
      return n.s > 0 && n.n > 0;
    },
    Unit: e.referToSelf((t) => (n) => e.find(t, n.valueType())(n.value)),
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), Nf = "isZero", pA = ["typed"], dA = /* @__PURE__ */ q(Nf, pA, (r) => {
  var {
    typed: e
  } = r;
  return e(Nf, {
    number: U0,
    BigNumber: function(n) {
      return n.isZero();
    },
    Complex: function(n) {
      return n.re === 0 && n.im === 0;
    },
    Fraction: function(n) {
      return n.d === 1 && n.n === 0;
    },
    Unit: e.referToSelf((t) => (n) => e.find(t, n.valueType())(n.value)),
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), Af = "isNaN", hA = ["typed"], gA = /* @__PURE__ */ q(Af, hA, (r) => {
  var {
    typed: e
  } = r;
  return e(Af, {
    number: k0,
    BigNumber: function(n) {
      return n.isNaN();
    },
    Fraction: function(n) {
      return !1;
    },
    Complex: function(n) {
      return n.isNaN();
    },
    Unit: function(n) {
      return Number.isNaN(n.value);
    },
    "Array | Matrix": function(n) {
      return je(n, Number.isNaN);
    }
  });
}), Ef = "typeOf", yA = ["typed"], bA = /* @__PURE__ */ q(Ef, yA, (r) => {
  var {
    typed: e
  } = r;
  return e(Ef, {
    any: hr
  });
});
function Wt(r, e, t) {
  if (t == null)
    return r.eq(e);
  if (r.eq(e))
    return !0;
  if (r.isNaN() || e.isNaN())
    return !1;
  if (r.isFinite() && e.isFinite()) {
    var n = r.minus(e).abs();
    if (n.isZero())
      return !0;
    var a = r.constructor.max(r.abs(), e.abs());
    return n.lte(a.times(t));
  }
  return !1;
}
function xA(r, e, t) {
  return dt(r.re, e.re, t) && dt(r.im, e.im, t);
}
var Ka = /* @__PURE__ */ q("compareUnits", ["typed"], (r) => {
  var {
    typed: e
  } = r;
  return {
    "Unit, Unit": e.referToSelf((t) => (n, a) => {
      if (!n.equalBase(a))
        throw new Error("Cannot compare units with different base");
      return e.find(t, [n.valueType(), a.valueType()])(n.value, a.value);
    })
  };
}), Uo = "equalScalar", wA = ["typed", "config"], NA = /* @__PURE__ */ q(Uo, wA, (r) => {
  var {
    typed: e,
    config: t
  } = r, n = Ka({
    typed: e
  });
  return e(Uo, {
    "boolean, boolean": function(i, o) {
      return i === o;
    },
    "number, number": function(i, o) {
      return dt(i, o, t.epsilon);
    },
    "BigNumber, BigNumber": function(i, o) {
      return i.eq(o) || Wt(i, o, t.epsilon);
    },
    "Fraction, Fraction": function(i, o) {
      return i.equals(o);
    },
    "Complex, Complex": function(i, o) {
      return xA(i, o, t.epsilon);
    }
  }, n);
});
q(Uo, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Uo, {
    "number, number": function(a, i) {
      return dt(a, i, t.epsilon);
    }
  });
});
var AA = "SparseMatrix", EA = ["typed", "equalScalar", "Matrix"], DA = /* @__PURE__ */ q(AA, EA, (r) => {
  var {
    typed: e,
    equalScalar: t,
    Matrix: n
  } = r;
  function a(p, b) {
    if (!(this instanceof a))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (b && !Hr(b))
      throw new Error("Invalid datatype: " + b);
    if (Le(p))
      i(this, p, b);
    else if (p && sr(p.index) && sr(p.ptr) && sr(p.size))
      this._values = p.values, this._index = p.index, this._ptr = p.ptr, this._size = p.size, this._datatype = b || p.datatype;
    else if (sr(p))
      o(this, p, b);
    else {
      if (p)
        throw new TypeError("Unsupported type of data (" + hr(p) + ")");
      this._values = [], this._index = [], this._ptr = [0], this._size = [0, 0], this._datatype = b;
    }
  }
  function i(p, b, g) {
    b.type === "SparseMatrix" ? (p._values = b._values ? Ge(b._values) : void 0, p._index = Ge(b._index), p._ptr = Ge(b._ptr), p._size = Ge(b._size), p._datatype = g || b._datatype) : o(p, b.valueOf(), g || b._datatype);
  }
  function o(p, b, g) {
    p._values = [], p._index = [], p._ptr = [], p._datatype = g;
    var N = b.length, h = 0, w = t, x = 0;
    if (Hr(g) && (w = e.find(t, [g, g]) || t, x = e.convert(0, g)), N > 0) {
      var y = 0;
      do {
        p._ptr.push(p._index.length);
        for (var E = 0; E < N; E++) {
          var D = b[E];
          if (sr(D)) {
            if (y === 0 && h < D.length && (h = D.length), y < D.length) {
              var S = D[y];
              w(S, x) || (p._values.push(S), p._index.push(E));
            }
          } else
            y === 0 && h < 1 && (h = 1), w(D, x) || (p._values.push(D), p._index.push(E));
        }
        y++;
      } while (y < h);
    }
    p._ptr.push(p._index.length), p._size = [N, h];
  }
  a.prototype = new n(), a.prototype.createSparseMatrix = function(p, b) {
    return new a(p, b);
  }, Object.defineProperty(a, "name", {
    value: "SparseMatrix"
  }), a.prototype.constructor = a, a.prototype.type = "SparseMatrix", a.prototype.isSparseMatrix = !0, a.prototype.getDataType = function() {
    return wi(this._values, hr);
  }, a.prototype.storage = function() {
    return "sparse";
  }, a.prototype.datatype = function() {
    return this._datatype;
  }, a.prototype.create = function(p, b) {
    return new a(p, b);
  }, a.prototype.density = function() {
    var p = this._size[0], b = this._size[1];
    return p !== 0 && b !== 0 ? this._index.length / (p * b) : 0;
  }, a.prototype.subset = function(p, b, g) {
    if (!this._values)
      throw new Error("Cannot invoke subset on a Pattern only matrix");
    switch (arguments.length) {
      case 1:
        return f(this, p);
      case 2:
      case 3:
        return l(this, p, b, g);
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  };
  function f(p, b) {
    if (!as(b))
      throw new TypeError("Invalid index");
    var g = b.isScalar();
    if (g)
      return p.get(b.min());
    var N = b.size();
    if (N.length !== p._size.length)
      throw new Ke(N.length, p._size.length);
    var h, w, x, y, E = b.min(), D = b.max();
    for (h = 0, w = p._size.length; h < w; h++)
      pr(E[h], p._size[h]), pr(D[h], p._size[h]);
    var S = p._values, A = p._index, C = p._ptr, T = b.dimension(0), $ = b.dimension(1), I = [], R = [];
    T.forEach(function(_, U) {
      R[_] = U[0], I[_] = !0;
    });
    var B = S ? [] : void 0, O = [], G = [];
    return $.forEach(function(_) {
      for (G.push(O.length), x = C[_], y = C[_ + 1]; x < y; x++)
        h = A[x], I[h] === !0 && (O.push(R[h]), B && B.push(S[x]));
    }), G.push(O.length), new a({
      values: B,
      index: O,
      ptr: G,
      size: N,
      datatype: p._datatype
    });
  }
  function l(p, b, g, N) {
    if (!b || b.isIndex !== !0)
      throw new TypeError("Invalid index");
    var h = b.size(), w = b.isScalar(), x;
    if (Le(g) ? (x = g.size(), g = g.toArray()) : x = Ye(g), w) {
      if (x.length !== 0)
        throw new TypeError("Scalar expected");
      p.set(b.min(), g, N);
    } else {
      if (h.length !== 1 && h.length !== 2)
        throw new Ke(h.length, p._size.length, "<");
      if (x.length < h.length) {
        for (var y = 0, E = 0; h[y] === 1 && x[y] === 1; )
          y++;
        for (; h[y] === 1; )
          E++, y++;
        g = Dh(g, h.length, E, x);
      }
      if (!Wn(h, x))
        throw new Ke(h, x, ">");
      if (h.length === 1) {
        var D = b.dimension(0);
        D.forEach(function(C, T) {
          pr(C), p.set([C, 0], g[T[0]], N);
        });
      } else {
        var S = b.dimension(0), A = b.dimension(1);
        S.forEach(function(C, T) {
          pr(C), A.forEach(function($, I) {
            pr($), p.set([C, $], g[T[0]][I[0]], N);
          });
        });
      }
    }
    return p;
  }
  a.prototype.get = function(p) {
    if (!sr(p))
      throw new TypeError("Array expected");
    if (p.length !== this._size.length)
      throw new Ke(p.length, this._size.length);
    if (!this._values)
      throw new Error("Cannot invoke get on a Pattern only matrix");
    var b = p[0], g = p[1];
    pr(b, this._size[0]), pr(g, this._size[1]);
    var N = u(b, this._ptr[g], this._ptr[g + 1], this._index);
    return N < this._ptr[g + 1] && this._index[N] === b ? this._values[N] : 0;
  }, a.prototype.set = function(p, b, g) {
    if (!sr(p))
      throw new TypeError("Array expected");
    if (p.length !== this._size.length)
      throw new Ke(p.length, this._size.length);
    if (!this._values)
      throw new Error("Cannot invoke set on a Pattern only matrix");
    var N = p[0], h = p[1], w = this._size[0], x = this._size[1], y = t, E = 0;
    Hr(this._datatype) && (y = e.find(t, [this._datatype, this._datatype]) || t, E = e.convert(0, this._datatype)), (N > w - 1 || h > x - 1) && (m(this, Math.max(N + 1, w), Math.max(h + 1, x), g), w = this._size[0], x = this._size[1]), pr(N, w), pr(h, x);
    var D = u(N, this._ptr[h], this._ptr[h + 1], this._index);
    return D < this._ptr[h + 1] && this._index[D] === N ? y(b, E) ? s(D, h, this._values, this._index, this._ptr) : this._values[D] = b : y(b, E) || c(D, N, h, b, this._values, this._index, this._ptr), this;
  };
  function u(p, b, g, N) {
    if (g - b === 0)
      return g;
    for (var h = b; h < g; h++)
      if (N[h] === p)
        return h;
    return b;
  }
  function s(p, b, g, N, h) {
    g.splice(p, 1), N.splice(p, 1);
    for (var w = b + 1; w < h.length; w++)
      h[w]--;
  }
  function c(p, b, g, N, h, w, x) {
    h.splice(p, 0, N), w.splice(p, 0, b);
    for (var y = g + 1; y < x.length; y++)
      x[y]++;
  }
  a.prototype.resize = function(p, b, g) {
    if (!Cn(p))
      throw new TypeError("Array or Matrix expected");
    var N = p.valueOf().map((w) => Array.isArray(w) && w.length === 1 ? w[0] : w);
    if (N.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    N.forEach(function(w) {
      if (!Xe(w) || !Ie(w) || w < 0)
        throw new TypeError("Invalid size, must contain positive integers (size: " + Je(N) + ")");
    });
    var h = g ? this.clone() : this;
    return m(h, N[0], N[1], b);
  };
  function m(p, b, g, N) {
    var h = N || 0, w = t, x = 0;
    Hr(p._datatype) && (w = e.find(t, [p._datatype, p._datatype]) || t, x = e.convert(0, p._datatype), h = e.convert(h, p._datatype));
    var y = !w(h, x), E = p._size[0], D = p._size[1], S, A, C;
    if (g > D) {
      for (A = D; A < g; A++)
        if (p._ptr[A] = p._values.length, y)
          for (S = 0; S < E; S++)
            p._values.push(h), p._index.push(S);
      p._ptr[g] = p._values.length;
    } else
      g < D && (p._ptr.splice(g + 1, D - g), p._values.splice(p._ptr[g], p._values.length), p._index.splice(p._ptr[g], p._index.length));
    if (D = g, b > E) {
      if (y) {
        var T = 0;
        for (A = 0; A < D; A++) {
          p._ptr[A] = p._ptr[A] + T, C = p._ptr[A + 1] + T;
          var $ = 0;
          for (S = E; S < b; S++, $++)
            p._values.splice(C + $, 0, h), p._index.splice(C + $, 0, S), T++;
        }
        p._ptr[D] = p._values.length;
      }
    } else if (b < E) {
      var I = 0;
      for (A = 0; A < D; A++) {
        p._ptr[A] = p._ptr[A] - I;
        var R = p._ptr[A], B = p._ptr[A + 1] - I;
        for (C = R; C < B; C++)
          S = p._index[C], S > b - 1 && (p._values.splice(C, 1), p._index.splice(C, 1), I++);
      }
      p._ptr[A] = p._values.length;
    }
    return p._size[0] = b, p._size[1] = g, p;
  }
  a.prototype.reshape = function(p, b) {
    if (!sr(p))
      throw new TypeError("Array expected");
    if (p.length !== 2)
      throw new Error("Sparse matrices can only be reshaped in two dimensions");
    p.forEach(function(_) {
      if (!Xe(_) || !Ie(_) || _ <= -2 || _ === 0)
        throw new TypeError("Invalid size, must contain positive integers or -1 (size: " + Je(p) + ")");
    });
    var g = this._size[0] * this._size[1];
    p = Bc(p, g);
    var N = p[0] * p[1];
    if (g !== N)
      throw new Error("Reshaping sparse matrix will result in the wrong number of elements");
    var h = b ? this.clone() : this;
    if (this._size[0] === p[0] && this._size[1] === p[1])
      return h;
    for (var w = [], x = 0; x < h._ptr.length; x++)
      for (var y = 0; y < h._ptr[x + 1] - h._ptr[x]; y++)
        w.push(x);
    for (var E = h._values.slice(), D = h._index.slice(), S = 0; S < h._index.length; S++) {
      var A = D[S], C = w[S], T = A * h._size[1] + C;
      w[S] = T % p[1], D[S] = Math.floor(T / p[1]);
    }
    h._values.length = 0, h._index.length = 0, h._ptr.length = p[1] + 1, h._size = p.slice();
    for (var $ = 0; $ < h._ptr.length; $++)
      h._ptr[$] = 0;
    for (var I = 0; I < E.length; I++) {
      var R = D[I], B = w[I], O = E[I], G = u(R, h._ptr[B], h._ptr[B + 1], h._index);
      c(G, R, B, O, h._values, h._index, h._ptr);
    }
    return h;
  }, a.prototype.clone = function() {
    var p = new a({
      values: this._values ? Ge(this._values) : void 0,
      index: Ge(this._index),
      ptr: Ge(this._ptr),
      size: Ge(this._size),
      datatype: this._datatype
    });
    return p;
  }, a.prototype.size = function() {
    return this._size.slice(0);
  }, a.prototype.map = function(p, b) {
    if (!this._values)
      throw new Error("Cannot invoke map on a Pattern only matrix");
    var g = this, N = this._size[0], h = this._size[1], w = Zh(p), x = function(E, D, S) {
      return w === 1 ? p(E) : w === 2 ? p(E, [D, S]) : p(E, [D, S], g);
    };
    return v(this, 0, N - 1, 0, h - 1, x, b);
  };
  function v(p, b, g, N, h, w, x) {
    var y = [], E = [], D = [], S = t, A = 0;
    Hr(p._datatype) && (S = e.find(t, [p._datatype, p._datatype]) || t, A = e.convert(0, p._datatype));
    for (var C = function(z, Q, ae) {
      z = w(z, Q, ae), S(z, A) || (y.push(z), E.push(Q));
    }, T = N; T <= h; T++) {
      D.push(y.length);
      var $ = p._ptr[T], I = p._ptr[T + 1];
      if (x)
        for (var R = $; R < I; R++) {
          var B = p._index[R];
          B >= b && B <= g && C(p._values[R], B - b, T - N);
        }
      else {
        for (var O = {}, G = $; G < I; G++) {
          var _ = p._index[G];
          O[_] = p._values[G];
        }
        for (var U = b; U <= g; U++) {
          var K = U in O ? O[U] : 0;
          C(K, U - b, T - N);
        }
      }
    }
    return D.push(y.length), new a({
      values: y,
      index: E,
      ptr: D,
      size: [g - b + 1, h - N + 1]
    });
  }
  a.prototype.forEach = function(p, b) {
    if (!this._values)
      throw new Error("Cannot invoke forEach on a Pattern only matrix");
    for (var g = this, N = this._size[0], h = this._size[1], w = 0; w < h; w++) {
      var x = this._ptr[w], y = this._ptr[w + 1];
      if (b)
        for (var E = x; E < y; E++) {
          var D = this._index[E];
          p(this._values[E], [D, w], g);
        }
      else {
        for (var S = {}, A = x; A < y; A++) {
          var C = this._index[A];
          S[C] = this._values[A];
        }
        for (var T = 0; T < N; T++) {
          var $ = T in S ? S[T] : 0;
          p($, [T, w], g);
        }
      }
    }
  }, a.prototype[Symbol.iterator] = function* () {
    if (!this._values)
      throw new Error("Cannot iterate a Pattern only matrix");
    for (var p = this._size[1], b = 0; b < p; b++)
      for (var g = this._ptr[b], N = this._ptr[b + 1], h = g; h < N; h++) {
        var w = this._index[h];
        yield {
          value: this._values[h],
          index: [w, b]
        };
      }
  }, a.prototype.toArray = function() {
    return d(this._values, this._index, this._ptr, this._size, !0);
  }, a.prototype.valueOf = function() {
    return d(this._values, this._index, this._ptr, this._size, !1);
  };
  function d(p, b, g, N, h) {
    var w = N[0], x = N[1], y = [], E, D;
    for (E = 0; E < w; E++)
      for (y[E] = [], D = 0; D < x; D++)
        y[E][D] = 0;
    for (D = 0; D < x; D++)
      for (var S = g[D], A = g[D + 1], C = S; C < A; C++)
        E = b[C], y[E][D] = p ? h ? Ge(p[C]) : p[C] : 1;
    return y;
  }
  return a.prototype.format = function(p) {
    for (var b = this._size[0], g = this._size[1], N = this.density(), h = "Sparse Matrix [" + Je(b, p) + " x " + Je(g, p) + "] density: " + Je(N, p) + `
`, w = 0; w < g; w++)
      for (var x = this._ptr[w], y = this._ptr[w + 1], E = x; E < y; E++) {
        var D = this._index[E];
        h += `
    (` + Je(D, p) + ", " + Je(w, p) + ") ==> " + (this._values ? Je(this._values[E], p) : "X");
      }
    return h;
  }, a.prototype.toString = function() {
    return Je(this.toArray());
  }, a.prototype.toJSON = function() {
    return {
      mathjs: "SparseMatrix",
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  }, a.prototype.diagonal = function(p) {
    if (p) {
      if (rr(p) && (p = p.toNumber()), !Xe(p) || !Ie(p))
        throw new TypeError("The parameter k must be an integer number");
    } else
      p = 0;
    var b = p > 0 ? p : 0, g = p < 0 ? -p : 0, N = this._size[0], h = this._size[1], w = Math.min(N - g, h - b), x = [], y = [], E = [];
    E[0] = 0;
    for (var D = b; D < h && x.length < w; D++)
      for (var S = this._ptr[D], A = this._ptr[D + 1], C = S; C < A; C++) {
        var T = this._index[C];
        if (T === D - b + g) {
          x.push(this._values[C]), y[x.length - 1] = T - g;
          break;
        }
      }
    return E.push(x.length), new a({
      values: x,
      index: y,
      ptr: E,
      size: [w, 1]
    });
  }, a.fromJSON = function(p) {
    return new a(p);
  }, a.diagonal = function(p, b, g, N, h) {
    if (!sr(p))
      throw new TypeError("Array expected, size parameter");
    if (p.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    if (p = p.map(function(_) {
      if (rr(_) && (_ = _.toNumber()), !Xe(_) || !Ie(_) || _ < 1)
        throw new Error("Size values must be positive integers");
      return _;
    }), g) {
      if (rr(g) && (g = g.toNumber()), !Xe(g) || !Ie(g))
        throw new TypeError("The parameter k must be an integer number");
    } else
      g = 0;
    var w = t, x = 0;
    Hr(h) && (w = e.find(t, [h, h]) || t, x = e.convert(0, h));
    var y = g > 0 ? g : 0, E = g < 0 ? -g : 0, D = p[0], S = p[1], A = Math.min(D - E, S - y), C;
    if (sr(b)) {
      if (b.length !== A)
        throw new Error("Invalid value array length");
      C = function(U) {
        return b[U];
      };
    } else if (Le(b)) {
      var T = b.size();
      if (T.length !== 1 || T[0] !== A)
        throw new Error("Invalid matrix length");
      C = function(U) {
        return b.get([U]);
      };
    } else
      C = function() {
        return b;
      };
    for (var $ = [], I = [], R = [], B = 0; B < S; B++) {
      R.push($.length);
      var O = B - y;
      if (O >= 0 && O < A) {
        var G = C(O);
        w(G, x) || (I.push(O + E), $.push(G));
      }
    }
    return R.push($.length), new a({
      values: $,
      index: I,
      ptr: R,
      size: [D, S]
    });
  }, a.prototype.swapRows = function(p, b) {
    if (!Xe(p) || !Ie(p) || !Xe(b) || !Ie(b))
      throw new Error("Row index must be positive integers");
    if (this._size.length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    return pr(p, this._size[0]), pr(b, this._size[0]), a._swapRows(p, b, this._size[1], this._values, this._index, this._ptr), this;
  }, a._forEachRow = function(p, b, g, N, h) {
    for (var w = N[p], x = N[p + 1], y = w; y < x; y++)
      h(g[y], b[y]);
  }, a._swapRows = function(p, b, g, N, h, w) {
    for (var x = 0; x < g; x++) {
      var y = w[x], E = w[x + 1], D = u(p, y, E, h), S = u(b, y, E, h);
      if (D < E && S < E && h[D] === p && h[S] === b) {
        if (N) {
          var A = N[D];
          N[D] = N[S], N[S] = A;
        }
        continue;
      }
      if (D < E && h[D] === p && (S >= E || h[S] !== b)) {
        var C = N ? N[D] : void 0;
        h.splice(S, 0, b), N && N.splice(S, 0, C), h.splice(S <= D ? D + 1 : D, 1), N && N.splice(S <= D ? D + 1 : D, 1);
        continue;
      }
      if (S < E && h[S] === b && (D >= E || h[D] !== p)) {
        var T = N ? N[S] : void 0;
        h.splice(D, 0, p), N && N.splice(D, 0, T), h.splice(D <= S ? S + 1 : S, 1), N && N.splice(D <= S ? S + 1 : S, 1);
      }
    }
  }, a;
}, {
  isClass: !0
}), SA = "number", CA = ["typed"];
function MA(r) {
  var e = r.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);
  if (e) {
    var t = {
      "0b": 2,
      "0o": 8,
      "0x": 16
    }[e[1]], n = e[2], a = e[3];
    return {
      input: r,
      radix: t,
      integerPart: n,
      fractionalPart: a
    };
  } else
    return null;
}
function OA(r) {
  for (var e = parseInt(r.integerPart, r.radix), t = 0, n = 0; n < r.fractionalPart.length; n++) {
    var a = parseInt(r.fractionalPart[n], r.radix);
    t += a / Math.pow(r.radix, n + 1);
  }
  var i = e + t;
  if (isNaN(i))
    throw new SyntaxError('String "' + r.input + '" is no valid number');
  return i;
}
var TA = /* @__PURE__ */ q(SA, CA, (r) => {
  var {
    typed: e
  } = r, t = e("number", {
    "": function() {
      return 0;
    },
    number: function(a) {
      return a;
    },
    string: function(a) {
      if (a === "NaN")
        return NaN;
      var i = MA(a);
      if (i)
        return OA(i);
      var o = 0, f = a.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
      f && (o = Number(f[2]), a = f[1]);
      var l = Number(a);
      if (isNaN(l))
        throw new SyntaxError('String "' + a + '" is no valid number');
      if (f) {
        if (l > 2 ** o - 1)
          throw new SyntaxError('String "'.concat(a, '" is out of range'));
        l >= 2 ** (o - 1) && (l = l - 2 ** o);
      }
      return l;
    },
    BigNumber: function(a) {
      return a.toNumber();
    },
    Fraction: function(a) {
      return a.valueOf();
    },
    Unit: e.referToSelf((n) => (a) => {
      var i = a.clone();
      return i.value = n(a.value), i;
    }),
    null: function(a) {
      return 0;
    },
    "Unit, string | Unit": function(a, i) {
      return a.toNumber(i);
    },
    "Array | Matrix": e.referToSelf((n) => (a) => je(a, n))
  });
  return t.fromJSON = function(n) {
    return parseFloat(n.value);
  }, t;
}), Df = "string", BA = ["typed"], _A = /* @__PURE__ */ q(Df, BA, (r) => {
  var {
    typed: e
  } = r;
  return e(Df, {
    "": function() {
      return "";
    },
    number: Hn,
    null: function(n) {
      return "null";
    },
    boolean: function(n) {
      return n + "";
    },
    string: function(n) {
      return n;
    },
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t)),
    any: function(n) {
      return String(n);
    }
  });
}), Sf = "boolean", FA = ["typed"], $A = /* @__PURE__ */ q(Sf, FA, (r) => {
  var {
    typed: e
  } = r;
  return e(Sf, {
    "": function() {
      return !1;
    },
    boolean: function(n) {
      return n;
    },
    number: function(n) {
      return !!n;
    },
    null: function(n) {
      return !1;
    },
    BigNumber: function(n) {
      return !n.isZero();
    },
    string: function(n) {
      var a = n.toLowerCase();
      if (a === "true")
        return !0;
      if (a === "false")
        return !1;
      var i = Number(n);
      if (n !== "" && !isNaN(i))
        return !!i;
      throw new Error('Cannot convert "' + n + '" to a boolean');
    },
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), RA = "bignumber", IA = ["typed", "BigNumber"], PA = /* @__PURE__ */ q(RA, IA, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e("bignumber", {
    "": function() {
      return new t(0);
    },
    number: function(a) {
      return new t(a + "");
    },
    string: function(a) {
      var i = a.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
      if (i) {
        var o = i[2], f = t(i[1]), l = new t(2).pow(Number(o));
        if (f.gt(l.sub(1)))
          throw new SyntaxError('String "'.concat(a, '" is out of range'));
        var u = new t(2).pow(Number(o) - 1);
        return f.gte(u) ? f.sub(l) : f;
      }
      return new t(a);
    },
    BigNumber: function(a) {
      return a;
    },
    Unit: e.referToSelf((n) => (a) => {
      var i = a.clone();
      return i.value = n(a.value), i;
    }),
    Fraction: function(a) {
      return new t(a.n).div(a.d).times(a.s);
    },
    null: function(a) {
      return new t(0);
    },
    "Array | Matrix": e.referToSelf((n) => (a) => je(a, n))
  });
}), qA = "complex", LA = ["typed", "Complex"], zA = /* @__PURE__ */ q(qA, LA, (r) => {
  var {
    typed: e,
    Complex: t
  } = r;
  return e("complex", {
    "": function() {
      return t.ZERO;
    },
    number: function(a) {
      return new t(a, 0);
    },
    "number, number": function(a, i) {
      return new t(a, i);
    },
    // TODO: this signature should be redundant
    "BigNumber, BigNumber": function(a, i) {
      return new t(a.toNumber(), i.toNumber());
    },
    Fraction: function(a) {
      return new t(a.valueOf(), 0);
    },
    Complex: function(a) {
      return a.clone();
    },
    string: function(a) {
      return t(a);
    },
    null: function(a) {
      return t(0);
    },
    Object: function(a) {
      if ("re" in a && "im" in a)
        return new t(a.re, a.im);
      if ("r" in a && "phi" in a || "abs" in a && "arg" in a)
        return new t(a);
      throw new Error("Expected object with properties (re and im) or (r and phi) or (abs and arg)");
    },
    "Array | Matrix": e.referToSelf((n) => (a) => je(a, n))
  });
}), UA = "fraction", kA = ["typed", "Fraction"], GA = /* @__PURE__ */ q(UA, kA, (r) => {
  var {
    typed: e,
    Fraction: t
  } = r;
  return e("fraction", {
    number: function(a) {
      if (!isFinite(a) || isNaN(a))
        throw new Error(a + " cannot be represented as a fraction");
      return new t(a);
    },
    string: function(a) {
      return new t(a);
    },
    "number, number": function(a, i) {
      return new t(a, i);
    },
    null: function(a) {
      return new t(0);
    },
    BigNumber: function(a) {
      return new t(a.toString());
    },
    Fraction: function(a) {
      return a;
    },
    Unit: e.referToSelf((n) => (a) => {
      var i = a.clone();
      return i.value = n(a.value), i;
    }),
    Object: function(a) {
      return new t(a);
    },
    "Array | Matrix": e.referToSelf((n) => (a) => je(a, n))
  });
}), Cf = "matrix", VA = ["typed", "Matrix", "DenseMatrix", "SparseMatrix"], HA = /* @__PURE__ */ q(Cf, VA, (r) => {
  var {
    typed: e,
    Matrix: t,
    DenseMatrix: n,
    SparseMatrix: a
  } = r;
  return e(Cf, {
    "": function() {
      return i([]);
    },
    string: function(f) {
      return i([], f);
    },
    "string, string": function(f, l) {
      return i([], f, l);
    },
    Array: function(f) {
      return i(f);
    },
    Matrix: function(f) {
      return i(f, f.storage());
    },
    "Array | Matrix, string": i,
    "Array | Matrix, string, string": i
  });
  function i(o, f, l) {
    if (f === "dense" || f === "default" || f === void 0)
      return new n(o, l);
    if (f === "sparse")
      return new a(o, l);
    throw new TypeError("Unknown matrix type " + JSON.stringify(f) + ".");
  }
}), Mf = "matrixFromFunction", ZA = ["typed", "matrix", "isZero"], YA = /* @__PURE__ */ q(Mf, ZA, (r) => {
  var {
    typed: e,
    matrix: t,
    isZero: n
  } = r;
  return e(Mf, {
    "Array | Matrix, function, string, string": function(o, f, l, u) {
      return a(o, f, l, u);
    },
    "Array | Matrix, function, string": function(o, f, l) {
      return a(o, f, l);
    },
    "Matrix, function": function(o, f) {
      return a(o, f, "dense");
    },
    "Array, function": function(o, f) {
      return a(o, f, "dense").toArray();
    },
    "Array | Matrix, string, function": function(o, f, l) {
      return a(o, l, f);
    },
    "Array | Matrix, string, string, function": function(o, f, l, u) {
      return a(o, u, f, l);
    }
  });
  function a(i, o, f, l) {
    var u;
    return l !== void 0 ? u = t(f, l) : u = t(f), u.resize(i), u.forEach(function(s, c) {
      var m = o(c);
      n(m) || u.set(c, m);
    }), u;
  }
}), Of = "matrixFromRows", WA = ["typed", "matrix", "flatten", "size"], JA = /* @__PURE__ */ q(Of, WA, (r) => {
  var {
    typed: e,
    matrix: t,
    flatten: n,
    size: a
  } = r;
  return e(Of, {
    "...Array": function(l) {
      return i(l);
    },
    "...Matrix": function(l) {
      return t(i(l.map((u) => u.toArray())));
    }
    // TODO implement this properly for SparseMatrix
  });
  function i(f) {
    if (f.length === 0)
      throw new TypeError("At least one row is needed to construct a matrix.");
    var l = o(f[0]), u = [];
    for (var s of f) {
      var c = o(s);
      if (c !== l)
        throw new TypeError("The vectors had different length: " + (l | 0) + " ≠ " + (c | 0));
      u.push(n(s));
    }
    return u;
  }
  function o(f) {
    var l = a(f);
    if (l.length === 1)
      return l[0];
    if (l.length === 2) {
      if (l[0] === 1)
        return l[1];
      if (l[1] === 1)
        return l[0];
      throw new TypeError("At least one of the arguments is not a vector.");
    } else
      throw new TypeError("Only one- or two-dimensional vectors are supported.");
  }
}), Tf = "matrixFromColumns", XA = ["typed", "matrix", "flatten", "size"], KA = /* @__PURE__ */ q(Tf, XA, (r) => {
  var {
    typed: e,
    matrix: t,
    flatten: n,
    size: a
  } = r;
  return e(Tf, {
    "...Array": function(l) {
      return i(l);
    },
    "...Matrix": function(l) {
      return t(i(l.map((u) => u.toArray())));
    }
    // TODO implement this properly for SparseMatrix
  });
  function i(f) {
    if (f.length === 0)
      throw new TypeError("At least one column is needed to construct a matrix.");
    for (var l = o(f[0]), u = [], s = 0; s < l; s++)
      u[s] = [];
    for (var c of f) {
      var m = o(c);
      if (m !== l)
        throw new TypeError("The vectors had different length: " + (l | 0) + " ≠ " + (m | 0));
      for (var v = n(c), d = 0; d < l; d++)
        u[d].push(v[d]);
    }
    return u;
  }
  function o(f) {
    var l = a(f);
    if (l.length === 1)
      return l[0];
    if (l.length === 2) {
      if (l[0] === 1)
        return l[1];
      if (l[1] === 1)
        return l[0];
      throw new TypeError("At least one of the arguments is not a vector.");
    } else
      throw new TypeError("Only one- or two-dimensional vectors are supported.");
  }
}), Bf = "splitUnit", QA = ["typed"], jA = /* @__PURE__ */ q(Bf, QA, (r) => {
  var {
    typed: e
  } = r;
  return e(Bf, {
    "Unit, Array": function(n, a) {
      return n.splitUnit(a);
    }
  });
}), _f = "unaryMinus", eE = ["typed"], rE = /* @__PURE__ */ q(_f, eE, (r) => {
  var {
    typed: e
  } = r;
  return e(_f, {
    number: Qh,
    "Complex | BigNumber | Fraction": (t) => t.neg(),
    Unit: e.referToSelf((t) => (n) => {
      var a = n.clone();
      return a.value = e.find(t, a.valueType())(n.value), a;
    }),
    // deep map collection, skip zeros since unaryMinus(0) = 0
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
    // TODO: add support for string
  });
}), Ff = "unaryPlus", tE = ["typed", "config", "BigNumber"], nE = /* @__PURE__ */ q(Ff, tE, (r) => {
  var {
    typed: e,
    config: t,
    BigNumber: n
  } = r;
  return e(Ff, {
    number: jh,
    Complex: function(i) {
      return i;
    },
    BigNumber: function(i) {
      return i;
    },
    Fraction: function(i) {
      return i;
    },
    Unit: function(i) {
      return i.clone();
    },
    // deep map collection, skip zeros since unaryPlus(0) = 0
    "Array | Matrix": e.referToSelf((a) => (i) => je(i, a)),
    "boolean | string": function(i) {
      return t.number === "BigNumber" ? new n(+i) : +i;
    }
  });
}), $f = "abs", aE = ["typed"], iE = /* @__PURE__ */ q($f, aE, (r) => {
  var {
    typed: e
  } = r;
  return e($f, {
    number: Wh,
    "Complex | BigNumber | Fraction | Unit": (t) => t.abs(),
    // deep map collection, skip zeros since abs(0) = 0
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), Rf = "apply", oE = ["typed", "isInteger"], Pc = /* @__PURE__ */ q(Rf, oE, (r) => {
  var {
    typed: e,
    isInteger: t
  } = r;
  return e(Rf, {
    "Array | Matrix, number | BigNumber, function": function(a, i, o) {
      if (!t(i))
        throw new TypeError("Integer number expected for dimension");
      var f = Array.isArray(a) ? Ye(a) : a.size();
      if (i < 0 || i >= f.length)
        throw new Rt(i, f.length);
      return Le(a) ? a.create(ko(a.valueOf(), i, o)) : ko(a, i, o);
    }
  });
});
function ko(r, e, t) {
  var n, a, i;
  if (e <= 0)
    if (Array.isArray(r[0])) {
      for (i = sE(r), a = [], n = 0; n < i.length; n++)
        a[n] = ko(i[n], e - 1, t);
      return a;
    } else
      return t(r);
  else {
    for (a = [], n = 0; n < r.length; n++)
      a[n] = ko(r[n], e - 1, t);
    return a;
  }
}
function sE(r) {
  var e = r.length, t = r[0].length, n, a, i = [];
  for (a = 0; a < t; a++) {
    var o = [];
    for (n = 0; n < e; n++)
      o.push(r[n][a]);
    i.push(o);
  }
  return i;
}
var If = "addScalar", uE = ["typed"], cE = /* @__PURE__ */ q(If, uE, (r) => {
  var {
    typed: e
  } = r;
  return e(If, {
    "number, number": Jh,
    "Complex, Complex": function(n, a) {
      return n.add(a);
    },
    "BigNumber, BigNumber": function(n, a) {
      return n.plus(a);
    },
    "Fraction, Fraction": function(n, a) {
      return n.add(a);
    },
    "Unit, Unit": e.referToSelf((t) => (n, a) => {
      if (n.value === null || n.value === void 0)
        throw new Error("Parameter x contains a unit with undefined value");
      if (a.value === null || a.value === void 0)
        throw new Error("Parameter y contains a unit with undefined value");
      if (!n.equalBase(a))
        throw new Error("Units do not match");
      var i = n.clone();
      return i.value = e.find(t, [i.valueType(), a.valueType()])(i.value, a.value), i.fixPrefix = !1, i;
    })
  });
}), Pf = "subtractScalar", lE = ["typed"], fE = /* @__PURE__ */ q(Pf, lE, (r) => {
  var {
    typed: e
  } = r;
  return e(Pf, {
    "number, number": Xh,
    "Complex, Complex": function(n, a) {
      return n.sub(a);
    },
    "BigNumber, BigNumber": function(n, a) {
      return n.minus(a);
    },
    "Fraction, Fraction": function(n, a) {
      return n.sub(a);
    },
    "Unit, Unit": e.referToSelf((t) => (n, a) => {
      if (n.value === null || n.value === void 0)
        throw new Error("Parameter x contains a unit with undefined value");
      if (a.value === null || a.value === void 0)
        throw new Error("Parameter y contains a unit with undefined value");
      if (!n.equalBase(a))
        throw new Error("Units do not match");
      var i = n.clone();
      return i.value = e.find(t, [i.valueType(), a.valueType()])(i.value, a.value), i.fixPrefix = !1, i;
    })
  });
}), qf = "cbrt", mE = ["config", "typed", "isNegative", "unaryMinus", "matrix", "Complex", "BigNumber", "Fraction"], vE = /* @__PURE__ */ q(qf, mE, (r) => {
  var {
    config: e,
    typed: t,
    isNegative: n,
    unaryMinus: a,
    matrix: i,
    Complex: o,
    BigNumber: f,
    Fraction: l
  } = r;
  return t(qf, {
    number: di,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    Complex: u,
    "Complex, boolean": u,
    BigNumber: function(m) {
      return m.cbrt();
    },
    Unit: s
  });
  function u(c, m) {
    var v = c.arg() / 3, d = c.abs(), p = new o(di(d), 0).mul(new o(0, v).exp());
    if (m) {
      var b = [p, new o(di(d), 0).mul(new o(0, v + Math.PI * 2 / 3).exp()), new o(di(d), 0).mul(new o(0, v - Math.PI * 2 / 3).exp())];
      return e.matrix === "Array" ? b : i(b);
    } else
      return p;
  }
  function s(c) {
    if (c.value && on(c.value)) {
      var m = c.clone();
      return m.value = 1, m = m.pow(1 / 3), m.value = u(c.value), m;
    } else {
      var v = n(c.value);
      v && (c.value = a(c.value));
      var d;
      rr(c.value) ? d = new f(1).div(3) : Si(c.value) ? d = new l(1, 3) : d = 1 / 3;
      var p = c.pow(d);
      return v && (p.value = a(p.value)), p;
    }
  }
}), pE = "matAlgo11xS0s", dE = ["typed", "equalScalar"], Gr = /* @__PURE__ */ q(pE, dE, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o, f) {
    var l = a._values, u = a._index, s = a._ptr, c = a._size, m = a._datatype;
    if (!l)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var v = c[0], d = c[1], p, b = t, g = 0, N = o;
    typeof m == "string" && (p = m, b = e.find(t, [p, p]), g = e.convert(0, p), i = e.convert(i, p), N = e.find(o, [p, p]));
    for (var h = [], w = [], x = [], y = 0; y < d; y++) {
      x[y] = w.length;
      for (var E = s[y], D = s[y + 1], S = E; S < D; S++) {
        var A = u[S], C = f ? N(i, l[S]) : N(l[S], i);
        b(C, g) || (w.push(A), h.push(C));
      }
    }
    return x[d] = w.length, a.createSparseMatrix({
      values: h,
      index: w,
      ptr: x,
      size: [v, d],
      datatype: p
    });
  };
}), hE = "matAlgo12xSfs", gE = ["typed", "DenseMatrix"], Fr = /* @__PURE__ */ q(hE, gE, (r) => {
  var {
    typed: e,
    DenseMatrix: t
  } = r;
  return function(a, i, o, f) {
    var l = a._values, u = a._index, s = a._ptr, c = a._size, m = a._datatype;
    if (!l)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var v = c[0], d = c[1], p, b = o;
    typeof m == "string" && (p = m, i = e.convert(i, p), b = e.find(o, [p, p]));
    for (var g = [], N = [], h = [], w = 0; w < d; w++) {
      for (var x = w + 1, y = s[w], E = s[w + 1], D = y; D < E; D++) {
        var S = u[D];
        N[S] = l[D], h[S] = x;
      }
      for (var A = 0; A < v; A++)
        w === 0 && (g[A] = []), h[A] === x ? g[A][w] = f ? b(i, N[A]) : b(N[A], i) : g[A][w] = f ? b(i, 0) : b(0, i);
    }
    return new t({
      data: g,
      size: [v, d],
      datatype: p
    });
  };
}), yE = "matAlgo14xDs", bE = ["typed"], Pt = /* @__PURE__ */ q(yE, bE, (r) => {
  var {
    typed: e
  } = r;
  return function(a, i, o, f) {
    var l = a._data, u = a._size, s = a._datatype, c, m = o;
    typeof s == "string" && (c = s, i = e.convert(i, c), m = e.find(o, [c, c]));
    var v = u.length > 0 ? t(m, 0, u, u[0], l, i, f) : [];
    return a.createDenseMatrix({
      data: v,
      size: Ge(u),
      datatype: c
    });
  };
  function t(n, a, i, o, f, l, u) {
    var s = [];
    if (a === i.length - 1)
      for (var c = 0; c < o; c++)
        s[c] = u ? n(l, f[c]) : n(f[c], l);
    else
      for (var m = 0; m < o; m++)
        s[m] = t(n, a + 1, i, i[a + 1], f[m], l, u);
    return s;
  }
}), nc = "ceil", xE = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "DenseMatrix"], wE = /* @__PURE__ */ q(nc, ["typed", "config", "round"], (r) => {
  var {
    typed: e,
    config: t,
    round: n
  } = r;
  return e(nc, {
    number: function(i) {
      return dt(i, n(i), t.epsilon) ? n(i) : Math.ceil(i);
    },
    "number, number": function(i, o) {
      if (dt(i, n(i, o), t.epsilon))
        return n(i, o);
      var [f, l] = "".concat(i, "e").split("e"), u = Math.ceil(Number("".concat(f, "e").concat(Number(l) + o)));
      return [f, l] = "".concat(u, "e").split("e"), Number("".concat(f, "e").concat(Number(l) - o));
    }
  });
}), NE = /* @__PURE__ */ q(nc, xE, (r) => {
  var {
    typed: e,
    config: t,
    round: n,
    matrix: a,
    equalScalar: i,
    zeros: o,
    DenseMatrix: f
  } = r, l = Gr({
    typed: e,
    equalScalar: i
  }), u = Fr({
    typed: e,
    DenseMatrix: f
  }), s = Pt({
    typed: e
  }), c = wE({
    typed: e,
    config: t,
    round: n
  });
  return e("ceil", {
    number: c.signatures.number,
    "number,number": c.signatures["number,number"],
    Complex: function(v) {
      return v.ceil();
    },
    "Complex, number": function(v, d) {
      return v.ceil(d);
    },
    "Complex, BigNumber": function(v, d) {
      return v.ceil(d.toNumber());
    },
    BigNumber: function(v) {
      return Wt(v, n(v), t.epsilon) ? n(v) : v.ceil();
    },
    "BigNumber, BigNumber": function(v, d) {
      return Wt(v, n(v, d), t.epsilon) ? n(v, d) : v.toDecimalPlaces(d.toNumber(), Tn.ROUND_CEIL);
    },
    Fraction: function(v) {
      return v.ceil();
    },
    "Fraction, number": function(v, d) {
      return v.ceil(d);
    },
    "Fraction, BigNumber": function(v, d) {
      return v.ceil(d.toNumber());
    },
    "Array | Matrix": e.referToSelf((m) => (v) => je(v, m)),
    "Array, number | BigNumber": e.referToSelf((m) => (v, d) => je(v, (p) => m(p, d))),
    "SparseMatrix, number | BigNumber": e.referToSelf((m) => (v, d) => l(v, d, m, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((m) => (v, d) => s(v, d, m, !1)),
    "number | Complex | Fraction | BigNumber, Array": e.referToSelf((m) => (v, d) => s(a(d), v, m, !0).valueOf()),
    "number | Complex | Fraction | BigNumber, Matrix": e.referToSelf((m) => (v, d) => i(v, 0) ? o(d.size(), d.storage()) : d.storage() === "dense" ? s(d, v, m, !0) : u(d, v, m, !0))
  });
}), Lf = "cube", AE = ["typed"], EE = /* @__PURE__ */ q(Lf, AE, (r) => {
  var {
    typed: e
  } = r;
  return e(Lf, {
    number: e0,
    Complex: function(n) {
      return n.mul(n).mul(n);
    },
    BigNumber: function(n) {
      return n.times(n).times(n);
    },
    Fraction: function(n) {
      return n.pow(3);
    },
    Unit: function(n) {
      return n.pow(3);
    }
  });
}), zf = "exp", DE = ["typed"], SE = /* @__PURE__ */ q(zf, DE, (r) => {
  var {
    typed: e
  } = r;
  return e(zf, {
    number: r0,
    Complex: function(n) {
      return n.exp();
    },
    BigNumber: function(n) {
      return n.exp();
    }
  });
}), Uf = "expm1", CE = ["typed", "Complex"], ME = /* @__PURE__ */ q(Uf, CE, (r) => {
  var {
    typed: e,
    Complex: t
  } = r;
  return e(Uf, {
    number: t0,
    Complex: function(a) {
      var i = Math.exp(a.re);
      return new t(i * Math.cos(a.im) - 1, i * Math.sin(a.im));
    },
    BigNumber: function(a) {
      return a.exp().minus(1);
    }
  });
}), ac = "fix", OE = ["typed", "Complex", "matrix", "ceil", "floor", "equalScalar", "zeros", "DenseMatrix"], TE = /* @__PURE__ */ q(ac, ["typed", "ceil", "floor"], (r) => {
  var {
    typed: e,
    ceil: t,
    floor: n
  } = r;
  return e(ac, {
    number: function(i) {
      return i > 0 ? n(i) : t(i);
    },
    "number, number": function(i, o) {
      return i > 0 ? n(i, o) : t(i, o);
    }
  });
}), BE = /* @__PURE__ */ q(ac, OE, (r) => {
  var {
    typed: e,
    Complex: t,
    matrix: n,
    ceil: a,
    floor: i,
    equalScalar: o,
    zeros: f,
    DenseMatrix: l
  } = r, u = Fr({
    typed: e,
    DenseMatrix: l
  }), s = Pt({
    typed: e
  }), c = TE({
    typed: e,
    ceil: a,
    floor: i
  });
  return e("fix", {
    number: c.signatures.number,
    "number, number | BigNumber": c.signatures["number,number"],
    Complex: function(v) {
      return new t(v.re > 0 ? Math.floor(v.re) : Math.ceil(v.re), v.im > 0 ? Math.floor(v.im) : Math.ceil(v.im));
    },
    "Complex, number": function(v, d) {
      return new t(v.re > 0 ? i(v.re, d) : a(v.re, d), v.im > 0 ? i(v.im, d) : a(v.im, d));
    },
    "Complex, BigNumber": function(v, d) {
      var p = d.toNumber();
      return new t(v.re > 0 ? i(v.re, p) : a(v.re, p), v.im > 0 ? i(v.im, p) : a(v.im, p));
    },
    BigNumber: function(v) {
      return v.isNegative() ? a(v) : i(v);
    },
    "BigNumber, number | BigNumber": function(v, d) {
      return v.isNegative() ? a(v, d) : i(v, d);
    },
    Fraction: function(v) {
      return v.s < 0 ? v.ceil() : v.floor();
    },
    "Fraction, number | BigNumber": function(v, d) {
      return v.s < 0 ? a(v, d) : i(v, d);
    },
    "Array | Matrix": e.referToSelf((m) => (v) => je(v, m)),
    "Array | Matrix, number | BigNumber": e.referToSelf((m) => (v, d) => je(v, (p) => m(p, d))),
    "number | Complex | Fraction | BigNumber, Array": e.referToSelf((m) => (v, d) => s(n(d), v, m, !0).valueOf()),
    "number | Complex | Fraction | BigNumber, Matrix": e.referToSelf((m) => (v, d) => o(v, 0) ? f(d.size(), d.storage()) : d.storage() === "dense" ? s(d, v, m, !0) : u(d, v, m, !0))
  });
}), ic = "floor", _E = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "DenseMatrix"], FE = /* @__PURE__ */ q(ic, ["typed", "config", "round"], (r) => {
  var {
    typed: e,
    config: t,
    round: n
  } = r;
  return e(ic, {
    number: function(i) {
      return dt(i, n(i), t.epsilon) ? n(i) : Math.floor(i);
    },
    "number, number": function(i, o) {
      if (dt(i, n(i, o), t.epsilon))
        return n(i, o);
      var [f, l] = "".concat(i, "e").split("e"), u = Math.floor(Number("".concat(f, "e").concat(Number(l) + o)));
      return [f, l] = "".concat(u, "e").split("e"), Number("".concat(f, "e").concat(Number(l) - o));
    }
  });
}), G0 = /* @__PURE__ */ q(ic, _E, (r) => {
  var {
    typed: e,
    config: t,
    round: n,
    matrix: a,
    equalScalar: i,
    zeros: o,
    DenseMatrix: f
  } = r, l = Gr({
    typed: e,
    equalScalar: i
  }), u = Fr({
    typed: e,
    DenseMatrix: f
  }), s = Pt({
    typed: e
  }), c = FE({
    typed: e,
    config: t,
    round: n
  });
  return e("floor", {
    number: c.signatures.number,
    "number,number": c.signatures["number,number"],
    Complex: function(v) {
      return v.floor();
    },
    "Complex, number": function(v, d) {
      return v.floor(d);
    },
    "Complex, BigNumber": function(v, d) {
      return v.floor(d.toNumber());
    },
    BigNumber: function(v) {
      return Wt(v, n(v), t.epsilon) ? n(v) : v.floor();
    },
    "BigNumber, BigNumber": function(v, d) {
      return Wt(v, n(v, d), t.epsilon) ? n(v, d) : v.toDecimalPlaces(d.toNumber(), Tn.ROUND_FLOOR);
    },
    Fraction: function(v) {
      return v.floor();
    },
    "Fraction, number": function(v, d) {
      return v.floor(d);
    },
    "Fraction, BigNumber": function(v, d) {
      return v.floor(d.toNumber());
    },
    "Array | Matrix": e.referToSelf((m) => (v) => je(v, m)),
    "Array, number | BigNumber": e.referToSelf((m) => (v, d) => je(v, (p) => m(p, d))),
    "SparseMatrix, number | BigNumber": e.referToSelf((m) => (v, d) => l(v, d, m, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((m) => (v, d) => s(v, d, m, !1)),
    "number | Complex | Fraction | BigNumber, Array": e.referToSelf((m) => (v, d) => s(a(d), v, m, !0).valueOf()),
    "number | Complex | Fraction | BigNumber, Matrix": e.referToSelf((m) => (v, d) => i(v, 0) ? o(d.size(), d.storage()) : d.storage() === "dense" ? s(d, v, m, !0) : u(d, v, m, !0))
  });
}), $E = "matAlgo02xDS0", RE = ["typed", "equalScalar"], qt = /* @__PURE__ */ q($E, RE, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o, f) {
    var l = a._data, u = a._size, s = a._datatype, c = i._values, m = i._index, v = i._ptr, d = i._size, p = i._datatype;
    if (u.length !== d.length)
      throw new Ke(u.length, d.length);
    if (u[0] !== d[0] || u[1] !== d[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + u + ") must match Matrix B (" + d + ")");
    if (!c)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var b = u[0], g = u[1], N, h = t, w = 0, x = o;
    typeof s == "string" && s === p && (N = s, h = e.find(t, [N, N]), w = e.convert(0, N), x = e.find(o, [N, N]));
    for (var y = [], E = [], D = [], S = 0; S < g; S++) {
      D[S] = E.length;
      for (var A = v[S], C = v[S + 1], T = A; T < C; T++) {
        var $ = m[T], I = f ? x(c[T], l[$][S]) : x(l[$][S], c[T]);
        h(I, w) || (E.push($), y.push(I));
      }
    }
    return D[g] = E.length, i.createSparseMatrix({
      values: y,
      index: E,
      ptr: D,
      size: [b, g],
      datatype: N
    });
  };
}), IE = "matAlgo03xDSf", PE = ["typed"], ot = /* @__PURE__ */ q(IE, PE, (r) => {
  var {
    typed: e
  } = r;
  return function(n, a, i, o) {
    var f = n._data, l = n._size, u = n._datatype, s = a._values, c = a._index, m = a._ptr, v = a._size, d = a._datatype;
    if (l.length !== v.length)
      throw new Ke(l.length, v.length);
    if (l[0] !== v[0] || l[1] !== v[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + v + ")");
    if (!s)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var p = l[0], b = l[1], g, N = 0, h = i;
    typeof u == "string" && u === d && (g = u, N = e.convert(0, g), h = e.find(i, [g, g]));
    for (var w = [], x = 0; x < p; x++)
      w[x] = [];
    for (var y = [], E = [], D = 0; D < b; D++) {
      for (var S = D + 1, A = m[D], C = m[D + 1], T = A; T < C; T++) {
        var $ = c[T];
        y[$] = o ? h(s[T], f[$][D]) : h(f[$][D], s[T]), E[$] = S;
      }
      for (var I = 0; I < p; I++)
        E[I] === S ? w[I][D] = y[I] : w[I][D] = o ? h(N, f[I][D]) : h(f[I][D], N);
    }
    return n.createDenseMatrix({
      data: w,
      size: [p, b],
      datatype: g
    });
  };
}), qE = "matAlgo05xSfSf", LE = ["typed", "equalScalar"], ds = /* @__PURE__ */ q(qE, LE, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o) {
    var f = a._values, l = a._index, u = a._ptr, s = a._size, c = a._datatype, m = i._values, v = i._index, d = i._ptr, p = i._size, b = i._datatype;
    if (s.length !== p.length)
      throw new Ke(s.length, p.length);
    if (s[0] !== p[0] || s[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + s + ") must match Matrix B (" + p + ")");
    var g = s[0], N = s[1], h, w = t, x = 0, y = o;
    typeof c == "string" && c === b && (h = c, w = e.find(t, [h, h]), x = e.convert(0, h), y = e.find(o, [h, h]));
    var E = f && m ? [] : void 0, D = [], S = [], A = E ? [] : void 0, C = E ? [] : void 0, T = [], $ = [], I, R, B, O;
    for (R = 0; R < N; R++) {
      S[R] = D.length;
      var G = R + 1;
      for (B = u[R], O = u[R + 1]; B < O; B++)
        I = l[B], D.push(I), T[I] = G, A && (A[I] = f[B]);
      for (B = d[R], O = d[R + 1]; B < O; B++)
        I = v[B], T[I] !== G && D.push(I), $[I] = G, C && (C[I] = m[B]);
      if (E)
        for (B = S[R]; B < D.length; ) {
          I = D[B];
          var _ = T[I], U = $[I];
          if (_ === G || U === G) {
            var K = _ === G ? A[I] : x, j = U === G ? C[I] : x, z = y(K, j);
            w(z, x) ? D.splice(B, 1) : (E.push(z), B++);
          }
        }
    }
    return S[N] = D.length, a.createSparseMatrix({
      values: E,
      index: D,
      ptr: S,
      size: [g, N],
      datatype: h
    });
  };
}), zE = "matAlgo13xDD", UE = ["typed"], kE = /* @__PURE__ */ q(zE, UE, (r) => {
  var {
    typed: e
  } = r;
  return function(a, i, o) {
    var f = a._data, l = a._size, u = a._datatype, s = i._data, c = i._size, m = i._datatype, v = [];
    if (l.length !== c.length)
      throw new Ke(l.length, c.length);
    for (var d = 0; d < l.length; d++) {
      if (l[d] !== c[d])
        throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + c + ")");
      v[d] = l[d];
    }
    var p, b = o;
    typeof u == "string" && u === m && (p = u, b = e.find(o, [p, p]));
    var g = v.length > 0 ? t(b, 0, v, v[0], f, s) : [];
    return a.createDenseMatrix({
      data: g,
      size: v,
      datatype: p
    });
  };
  function t(n, a, i, o, f, l) {
    var u = [];
    if (a === i.length - 1)
      for (var s = 0; s < o; s++)
        u[s] = n(f[s], l[s]);
    else
      for (var c = 0; c < o; c++)
        u[c] = t(n, a + 1, i, i[a + 1], f[c], l[c]);
    return u;
  }
}), GE = "broadcast", VE = ["concat"], HE = /* @__PURE__ */ q(GE, VE, (r) => {
  var {
    concat: e
  } = r;
  return function(a, i) {
    var o = Math.max(a._size.length, i._size.length);
    if (a._size.length === i._size.length && a._size.every((d, p) => d === i._size[p]))
      return [a, i];
    for (var f = t(a._size, o, 0), l = t(i._size, o, 0), u = [], s = 0; s < o; s++)
      u[s] = Math.max(f[s], l[s]);
    $o(f, u), $o(l, u);
    var c = a.clone(), m = i.clone();
    c._size.length < o ? c.reshape(t(c._size, o, 1)) : m._size.length < o && m.reshape(t(m._size, o, 1));
    for (var v = 0; v < o; v++)
      c._size[v] < u[v] && (c = n(c, u[v], v)), m._size[v] < u[v] && (m = n(m, u[v], v));
    return [c, m];
  };
  function t(a, i, o) {
    return [...Array(i - a.length).fill(o), ...a];
  }
  function n(a, i, o) {
    return e(...Array(i).fill(a), o);
  }
}), ZE = "matrixAlgorithmSuite", YE = ["typed", "matrix", "concat"], br = /* @__PURE__ */ q(ZE, YE, (r) => {
  var {
    typed: e,
    matrix: t,
    concat: n
  } = r, a = kE({
    typed: e
  }), i = Pt({
    typed: e
  }), o = HE({
    concat: n
  });
  return function(l) {
    var u = l.elop, s = l.SD || l.DS, c;
    u ? (c = {
      "DenseMatrix, DenseMatrix": (p, b) => a(...o(p, b), u),
      "Array, Array": (p, b) => a(...o(t(p), t(b)), u).valueOf(),
      "Array, DenseMatrix": (p, b) => a(...o(t(p), b), u),
      "DenseMatrix, Array": (p, b) => a(...o(p, t(b)), u)
    }, l.SS && (c["SparseMatrix, SparseMatrix"] = (p, b) => l.SS(...o(p, b), u, !1)), l.DS && (c["DenseMatrix, SparseMatrix"] = (p, b) => l.DS(...o(p, b), u, !1), c["Array, SparseMatrix"] = (p, b) => l.DS(...o(t(p), b), u, !1)), s && (c["SparseMatrix, DenseMatrix"] = (p, b) => s(...o(b, p), u, !0), c["SparseMatrix, Array"] = (p, b) => s(...o(t(b), p), u, !0))) : (c = {
      "DenseMatrix, DenseMatrix": e.referToSelf((p) => (b, g) => a(...o(b, g), p)),
      "Array, Array": e.referToSelf((p) => (b, g) => a(...o(t(b), t(g)), p).valueOf()),
      "Array, DenseMatrix": e.referToSelf((p) => (b, g) => a(...o(t(b), g), p)),
      "DenseMatrix, Array": e.referToSelf((p) => (b, g) => a(...o(b, t(g)), p))
    }, l.SS && (c["SparseMatrix, SparseMatrix"] = e.referToSelf((p) => (b, g) => l.SS(...o(b, g), p, !1))), l.DS && (c["DenseMatrix, SparseMatrix"] = e.referToSelf((p) => (b, g) => l.DS(...o(b, g), p, !1)), c["Array, SparseMatrix"] = e.referToSelf((p) => (b, g) => l.DS(...o(t(b), g), p, !1))), s && (c["SparseMatrix, DenseMatrix"] = e.referToSelf((p) => (b, g) => s(...o(g, b), p, !0)), c["SparseMatrix, Array"] = e.referToSelf((p) => (b, g) => s(...o(t(g), b), p, !0))));
    var m = l.scalar || "any", v = l.Ds || l.Ss;
    v && (u ? (c["DenseMatrix," + m] = (p, b) => i(p, b, u, !1), c[m + ", DenseMatrix"] = (p, b) => i(b, p, u, !0), c["Array," + m] = (p, b) => i(t(p), b, u, !1).valueOf(), c[m + ", Array"] = (p, b) => i(t(b), p, u, !0).valueOf()) : (c["DenseMatrix," + m] = e.referToSelf((p) => (b, g) => i(b, g, p, !1)), c[m + ", DenseMatrix"] = e.referToSelf((p) => (b, g) => i(g, b, p, !0)), c["Array," + m] = e.referToSelf((p) => (b, g) => i(t(b), g, p, !1).valueOf()), c[m + ", Array"] = e.referToSelf((p) => (b, g) => i(t(g), b, p, !0).valueOf())));
    var d = l.sS !== void 0 ? l.sS : l.Ss;
    return u ? (l.Ss && (c["SparseMatrix," + m] = (p, b) => l.Ss(p, b, u, !1)), d && (c[m + ", SparseMatrix"] = (p, b) => d(b, p, u, !0))) : (l.Ss && (c["SparseMatrix," + m] = e.referToSelf((p) => (b, g) => l.Ss(b, g, p, !1))), d && (c[m + ", SparseMatrix"] = e.referToSelf((p) => (b, g) => d(g, b, p, !0)))), u && u.signatures && gh(c, u.signatures), c;
  };
}), kf = "mod", WE = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], V0 = /* @__PURE__ */ q(kf, WE, (r) => {
  var {
    typed: e,
    config: t,
    round: n,
    matrix: a,
    equalScalar: i,
    zeros: o,
    DenseMatrix: f,
    concat: l
  } = r, u = G0({
    typed: e,
    config: t,
    round: n,
    matrix: a,
    equalScalar: i,
    zeros: o,
    DenseMatrix: f
  }), s = qt({
    typed: e,
    equalScalar: i
  }), c = ot({
    typed: e
  }), m = ds({
    typed: e,
    equalScalar: i
  }), v = Gr({
    typed: e,
    equalScalar: i
  }), d = Fr({
    typed: e,
    DenseMatrix: f
  }), p = br({
    typed: e,
    matrix: a,
    concat: l
  });
  return e(kf, {
    "number, number": b,
    "BigNumber, BigNumber": function(N, h) {
      if (h.isNeg())
        throw new Error("Cannot calculate mod for a negative divisor");
      return h.isZero() ? N : N.mod(h);
    },
    "Fraction, Fraction": function(N, h) {
      if (h.compare(0) < 0)
        throw new Error("Cannot calculate mod for a negative divisor");
      return N.compare(0) >= 0 ? N.mod(h) : N.mod(h).add(h).mod(h);
    }
  }, p({
    SS: m,
    DS: c,
    SD: s,
    Ss: v,
    sS: d
  }));
  function b(g, N) {
    return N === 0 ? g : g - N * u(g / N);
  }
}), JE = "matAlgo01xDSid", XE = ["typed"], _n = /* @__PURE__ */ q(JE, XE, (r) => {
  var {
    typed: e
  } = r;
  return function(n, a, i, o) {
    var f = n._data, l = n._size, u = n._datatype, s = a._values, c = a._index, m = a._ptr, v = a._size, d = a._datatype;
    if (l.length !== v.length)
      throw new Ke(l.length, v.length);
    if (l[0] !== v[0] || l[1] !== v[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + v + ")");
    if (!s)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var p = l[0], b = l[1], g = typeof u == "string" && u === d ? u : void 0, N = g ? e.find(i, [g, g]) : i, h, w, x = [];
    for (h = 0; h < p; h++)
      x[h] = [];
    var y = [], E = [];
    for (w = 0; w < b; w++) {
      for (var D = w + 1, S = m[w], A = m[w + 1], C = S; C < A; C++)
        h = c[C], y[h] = o ? N(s[C], f[h][w]) : N(f[h][w], s[C]), E[h] = D;
      for (h = 0; h < p; h++)
        E[h] === D ? x[h][w] = y[h] : x[h][w] = f[h][w];
    }
    return n.createDenseMatrix({
      data: x,
      size: [p, b],
      datatype: g
    });
  };
}), KE = "matAlgo04xSidSid", QE = ["typed", "equalScalar"], qc = /* @__PURE__ */ q(KE, QE, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o) {
    var f = a._values, l = a._index, u = a._ptr, s = a._size, c = a._datatype, m = i._values, v = i._index, d = i._ptr, p = i._size, b = i._datatype;
    if (s.length !== p.length)
      throw new Ke(s.length, p.length);
    if (s[0] !== p[0] || s[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + s + ") must match Matrix B (" + p + ")");
    var g = s[0], N = s[1], h, w = t, x = 0, y = o;
    typeof c == "string" && c === b && (h = c, w = e.find(t, [h, h]), x = e.convert(0, h), y = e.find(o, [h, h]));
    var E = f && m ? [] : void 0, D = [], S = [], A = f && m ? [] : void 0, C = f && m ? [] : void 0, T = [], $ = [], I, R, B, O, G;
    for (R = 0; R < N; R++) {
      S[R] = D.length;
      var _ = R + 1;
      for (O = u[R], G = u[R + 1], B = O; B < G; B++)
        I = l[B], D.push(I), T[I] = _, A && (A[I] = f[B]);
      for (O = d[R], G = d[R + 1], B = O; B < G; B++)
        if (I = v[B], T[I] === _) {
          if (A) {
            var U = y(A[I], m[B]);
            w(U, x) ? T[I] = null : A[I] = U;
          }
        } else
          D.push(I), $[I] = _, C && (C[I] = m[B]);
      if (A && C)
        for (B = S[R]; B < D.length; )
          I = D[B], T[I] === _ ? (E[B] = A[I], B++) : $[I] === _ ? (E[B] = C[I], B++) : D.splice(B, 1);
    }
    return S[N] = D.length, a.createSparseMatrix({
      values: E,
      index: D,
      ptr: S,
      size: [g, N],
      datatype: h
    });
  };
}), jE = "matAlgo10xSids", e2 = ["typed", "DenseMatrix"], Kn = /* @__PURE__ */ q(jE, e2, (r) => {
  var {
    typed: e,
    DenseMatrix: t
  } = r;
  return function(a, i, o, f) {
    var l = a._values, u = a._index, s = a._ptr, c = a._size, m = a._datatype;
    if (!l)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var v = c[0], d = c[1], p, b = o;
    typeof m == "string" && (p = m, i = e.convert(i, p), b = e.find(o, [p, p]));
    for (var g = [], N = [], h = [], w = 0; w < d; w++) {
      for (var x = w + 1, y = s[w], E = s[w + 1], D = y; D < E; D++) {
        var S = u[D];
        N[S] = l[D], h[S] = x;
      }
      for (var A = 0; A < v; A++)
        w === 0 && (g[A] = []), h[A] === x ? g[A][w] = f ? b(i, N[A]) : b(N[A], i) : g[A][w] = i;
    }
    return new t({
      data: g,
      size: [v, d],
      datatype: p
    });
  };
});
function Qn(r, e, t, n) {
  if (!(this instanceof Qn))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.fn = r, this.count = e, this.min = t, this.max = n, this.message = "Wrong number of arguments in function " + r + " (" + e + " provided, " + t + (n != null ? "-" + n : "") + " expected)", this.stack = new Error().stack;
}
Qn.prototype = new Error();
Qn.prototype.constructor = Error;
Qn.prototype.name = "ArgumentsError";
Qn.prototype.isArgumentsError = !0;
var Gf = "gcd", r2 = ["typed", "config", "round", "matrix", "equalScalar", "zeros", "BigNumber", "DenseMatrix", "concat"], du = "number | BigNumber | Fraction | Matrix | Array", t2 = "".concat(du, ", ").concat(du, ", ...").concat(du);
function Vf(r) {
  return !r.some((e) => Array.isArray(e));
}
var n2 = /* @__PURE__ */ q(Gf, r2, (r) => {
  var {
    typed: e,
    matrix: t,
    config: n,
    round: a,
    equalScalar: i,
    zeros: o,
    BigNumber: f,
    DenseMatrix: l,
    concat: u
  } = r, s = V0({
    typed: e,
    config: n,
    round: a,
    matrix: t,
    equalScalar: i,
    zeros: o,
    DenseMatrix: l,
    concat: u
  }), c = _n({
    typed: e
  }), m = qc({
    typed: e,
    equalScalar: i
  }), v = Kn({
    typed: e,
    DenseMatrix: l
  }), d = br({
    typed: e,
    matrix: t,
    concat: u
  });
  return e(Gf, {
    "number, number": p,
    "BigNumber, BigNumber": b,
    "Fraction, Fraction": (g, N) => g.gcd(N)
  }, d({
    SS: m,
    DS: c,
    Ss: v
  }), {
    [t2]: e.referToSelf((g) => (N, h, w) => {
      for (var x = g(N, h), y = 0; y < w.length; y++)
        x = g(x, w[y]);
      return x;
    }),
    Array: e.referToSelf((g) => (N) => {
      if (N.length === 1 && Array.isArray(N[0]) && Vf(N[0]))
        return g(...N[0]);
      if (Vf(N))
        return g(...N);
      throw new Qn("gcd() supports only 1d matrices!");
    }),
    Matrix: e.referToSelf((g) => (N) => g(N.toArray()))
  });
  function p(g, N) {
    if (!Ie(g) || !Ie(N))
      throw new Error("Parameters in function gcd must be integer numbers");
    for (var h; N !== 0; )
      h = s(g, N), g = N, N = h;
    return g < 0 ? -g : g;
  }
  function b(g, N) {
    if (!g.isInt() || !N.isInt())
      throw new Error("Parameters in function gcd must be integer numbers");
    for (var h = new f(0); !N.isZero(); ) {
      var w = s(g, N);
      g = N, N = w;
    }
    return g.lt(h) ? g.neg() : g;
  }
}), a2 = "matAlgo06xS0S0", i2 = ["typed", "equalScalar"], hs = /* @__PURE__ */ q(a2, i2, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o) {
    var f = a._values, l = a._size, u = a._datatype, s = i._values, c = i._size, m = i._datatype;
    if (l.length !== c.length)
      throw new Ke(l.length, c.length);
    if (l[0] !== c[0] || l[1] !== c[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + c + ")");
    var v = l[0], d = l[1], p, b = t, g = 0, N = o;
    typeof u == "string" && u === m && (p = u, b = e.find(t, [p, p]), g = e.convert(0, p), N = e.find(o, [p, p]));
    for (var h = f && s ? [] : void 0, w = [], x = [], y = h ? [] : void 0, E = [], D = [], S = 0; S < d; S++) {
      x[S] = w.length;
      var A = S + 1;
      if (vf(a, S, E, y, D, A, w, N), vf(i, S, E, y, D, A, w, N), y)
        for (var C = x[S]; C < w.length; ) {
          var T = w[C];
          if (D[T] === A) {
            var $ = y[T];
            b($, g) ? w.splice(C, 1) : (h.push($), C++);
          } else
            w.splice(C, 1);
        }
      else
        for (var I = x[S]; I < w.length; ) {
          var R = w[I];
          D[R] !== A ? w.splice(I, 1) : I++;
        }
    }
    return x[d] = w.length, a.createSparseMatrix({
      values: h,
      index: w,
      ptr: x,
      size: [v, d],
      datatype: p
    });
  };
}), Hf = "lcm", o2 = ["typed", "matrix", "equalScalar", "concat"], s2 = /* @__PURE__ */ q(Hf, o2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    concat: a
  } = r, i = qt({
    typed: e,
    equalScalar: n
  }), o = hs({
    typed: e,
    equalScalar: n
  }), f = Gr({
    typed: e,
    equalScalar: n
  }), l = br({
    typed: e,
    matrix: t,
    concat: a
  }), u = "number | BigNumber | Fraction | Matrix | Array", s = {};
  return s["".concat(u, ", ").concat(u, ", ...").concat(u)] = e.referToSelf((m) => (v, d, p) => {
    for (var b = m(v, d), g = 0; g < p.length; g++)
      b = m(b, p[g]);
    return b;
  }), e(Hf, {
    "number, number": n0,
    "BigNumber, BigNumber": c,
    "Fraction, Fraction": (m, v) => m.lcm(v)
  }, l({
    SS: o,
    DS: i,
    Ss: f
  }), s);
  function c(m, v) {
    if (!m.isInt() || !v.isInt())
      throw new Error("Parameters in function lcm must be integer numbers");
    if (m.isZero())
      return m;
    if (v.isZero())
      return v;
    for (var d = m.times(v); !v.isZero(); ) {
      var p = v;
      v = m.mod(p), m = p;
    }
    return d.div(m).abs();
  }
}), Zf = "log10", u2 = ["typed", "config", "Complex"], c2 = /* @__PURE__ */ q(Zf, u2, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Zf, {
    number: function(i) {
      return i >= 0 || t.predictable ? a0(i) : new n(i, 0).log().div(Math.LN10);
    },
    Complex: function(i) {
      return new n(i).log().div(Math.LN10);
    },
    BigNumber: function(i) {
      return !i.isNegative() || t.predictable ? i.log() : new n(i.toNumber(), 0).log().div(Math.LN10);
    },
    "Array | Matrix": e.referToSelf((a) => (i) => je(i, a))
  });
}), Yf = "log2", l2 = ["typed", "config", "Complex"], f2 = /* @__PURE__ */ q(Yf, l2, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Yf, {
    number: function(o) {
      return o >= 0 || t.predictable ? i0(o) : a(new n(o, 0));
    },
    Complex: a,
    BigNumber: function(o) {
      return !o.isNegative() || t.predictable ? o.log(2) : a(new n(o.toNumber(), 0));
    },
    "Array | Matrix": e.referToSelf((i) => (o) => je(o, i))
  });
  function a(i) {
    var o = Math.sqrt(i.re * i.re + i.im * i.im);
    return new n(Math.log2 ? Math.log2(o) : Math.log(o) / Math.LN2, Math.atan2(i.im, i.re) / Math.LN2);
  }
}), m2 = "multiplyScalar", v2 = ["typed"], p2 = /* @__PURE__ */ q(m2, v2, (r) => {
  var {
    typed: e
  } = r;
  return e("multiplyScalar", {
    "number, number": Kh,
    "Complex, Complex": function(n, a) {
      return n.mul(a);
    },
    "BigNumber, BigNumber": function(n, a) {
      return n.times(a);
    },
    "Fraction, Fraction": function(n, a) {
      return n.mul(a);
    },
    "number | Fraction | BigNumber | Complex, Unit": (t, n) => n.multiply(t),
    "Unit, number | Fraction | BigNumber | Complex | Unit": (t, n) => t.multiply(n)
  });
}), Wf = "multiply", d2 = ["typed", "matrix", "addScalar", "multiplyScalar", "equalScalar", "dot"], h2 = /* @__PURE__ */ q(Wf, d2, (r) => {
  var {
    typed: e,
    matrix: t,
    addScalar: n,
    multiplyScalar: a,
    equalScalar: i,
    dot: o
  } = r, f = Gr({
    typed: e,
    equalScalar: i
  }), l = Pt({
    typed: e
  });
  function u(x, y) {
    switch (x.length) {
      case 1:
        switch (y.length) {
          case 1:
            if (x[0] !== y[0])
              throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");
            break;
          case 2:
            if (x[0] !== y[0])
              throw new RangeError("Dimension mismatch in multiplication. Vector length (" + x[0] + ") must match Matrix rows (" + y[0] + ")");
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + y.length + " dimensions)");
        }
        break;
      case 2:
        switch (y.length) {
          case 1:
            if (x[1] !== y[0])
              throw new RangeError("Dimension mismatch in multiplication. Matrix columns (" + x[1] + ") must match Vector length (" + y[0] + ")");
            break;
          case 2:
            if (x[1] !== y[0])
              throw new RangeError("Dimension mismatch in multiplication. Matrix A columns (" + x[1] + ") must match Matrix B rows (" + y[0] + ")");
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + y.length + " dimensions)");
        }
        break;
      default:
        throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has " + x.length + " dimensions)");
    }
  }
  function s(x, y, E) {
    if (E === 0)
      throw new Error("Cannot multiply two empty vectors");
    return o(x, y);
  }
  function c(x, y) {
    if (y.storage() !== "dense")
      throw new Error("Support for SparseMatrix not implemented");
    return m(x, y);
  }
  function m(x, y) {
    var E = x._data, D = x._size, S = x._datatype, A = y._data, C = y._size, T = y._datatype, $ = D[0], I = C[1], R, B = n, O = a;
    S && T && S === T && typeof S == "string" && (R = S, B = e.find(n, [R, R]), O = e.find(a, [R, R]));
    for (var G = [], _ = 0; _ < I; _++) {
      for (var U = O(E[0], A[0][_]), K = 1; K < $; K++)
        U = B(U, O(E[K], A[K][_]));
      G[_] = U;
    }
    return x.createDenseMatrix({
      data: G,
      size: [I],
      datatype: R
    });
  }
  var v = e("_multiplyMatrixVector", {
    "DenseMatrix, any": p,
    "SparseMatrix, any": N
  }), d = e("_multiplyMatrixMatrix", {
    "DenseMatrix, DenseMatrix": b,
    "DenseMatrix, SparseMatrix": g,
    "SparseMatrix, DenseMatrix": h,
    "SparseMatrix, SparseMatrix": w
  });
  function p(x, y) {
    var E = x._data, D = x._size, S = x._datatype, A = y._data, C = y._datatype, T = D[0], $ = D[1], I, R = n, B = a;
    S && C && S === C && typeof S == "string" && (I = S, R = e.find(n, [I, I]), B = e.find(a, [I, I]));
    for (var O = [], G = 0; G < T; G++) {
      for (var _ = E[G], U = B(_[0], A[0]), K = 1; K < $; K++)
        U = R(U, B(_[K], A[K]));
      O[G] = U;
    }
    return x.createDenseMatrix({
      data: O,
      size: [T],
      datatype: I
    });
  }
  function b(x, y) {
    var E = x._data, D = x._size, S = x._datatype, A = y._data, C = y._size, T = y._datatype, $ = D[0], I = D[1], R = C[1], B, O = n, G = a;
    S && T && S === T && typeof S == "string" && (B = S, O = e.find(n, [B, B]), G = e.find(a, [B, B]));
    for (var _ = [], U = 0; U < $; U++) {
      var K = E[U];
      _[U] = [];
      for (var j = 0; j < R; j++) {
        for (var z = G(K[0], A[0][j]), Q = 1; Q < I; Q++)
          z = O(z, G(K[Q], A[Q][j]));
        _[U][j] = z;
      }
    }
    return x.createDenseMatrix({
      data: _,
      size: [$, R],
      datatype: B
    });
  }
  function g(x, y) {
    var E = x._data, D = x._size, S = x._datatype, A = y._values, C = y._index, T = y._ptr, $ = y._size, I = y._datatype;
    if (!A)
      throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");
    var R = D[0], B = $[1], O, G = n, _ = a, U = i, K = 0;
    S && I && S === I && typeof S == "string" && (O = S, G = e.find(n, [O, O]), _ = e.find(a, [O, O]), U = e.find(i, [O, O]), K = e.convert(0, O));
    for (var j = [], z = [], Q = [], ae = y.createSparseMatrix({
      values: j,
      index: z,
      ptr: Q,
      size: [R, B],
      datatype: O
    }), re = 0; re < B; re++) {
      Q[re] = z.length;
      var fe = T[re], de = T[re + 1];
      if (de > fe)
        for (var le = 0, ie = 0; ie < R; ie++) {
          for (var ye = ie + 1, _e = void 0, De = fe; De < de; De++) {
            var Be = C[De];
            le !== ye ? (_e = _(E[ie][Be], A[De]), le = ye) : _e = G(_e, _(E[ie][Be], A[De]));
          }
          le === ye && !U(_e, K) && (z.push(ie), j.push(_e));
        }
    }
    return Q[B] = z.length, ae;
  }
  function N(x, y) {
    var E = x._values, D = x._index, S = x._ptr, A = x._datatype;
    if (!E)
      throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
    var C = y._data, T = y._datatype, $ = x._size[0], I = y._size[0], R = [], B = [], O = [], G, _ = n, U = a, K = i, j = 0;
    A && T && A === T && typeof A == "string" && (G = A, _ = e.find(n, [G, G]), U = e.find(a, [G, G]), K = e.find(i, [G, G]), j = e.convert(0, G));
    var z = [], Q = [];
    O[0] = 0;
    for (var ae = 0; ae < I; ae++) {
      var re = C[ae];
      if (!K(re, j))
        for (var fe = S[ae], de = S[ae + 1], le = fe; le < de; le++) {
          var ie = D[le];
          Q[ie] ? z[ie] = _(z[ie], U(re, E[le])) : (Q[ie] = !0, B.push(ie), z[ie] = U(re, E[le]));
        }
    }
    for (var ye = B.length, _e = 0; _e < ye; _e++) {
      var De = B[_e];
      R[_e] = z[De];
    }
    return O[1] = B.length, x.createSparseMatrix({
      values: R,
      index: B,
      ptr: O,
      size: [$, 1],
      datatype: G
    });
  }
  function h(x, y) {
    var E = x._values, D = x._index, S = x._ptr, A = x._datatype;
    if (!E)
      throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
    var C = y._data, T = y._datatype, $ = x._size[0], I = y._size[0], R = y._size[1], B, O = n, G = a, _ = i, U = 0;
    A && T && A === T && typeof A == "string" && (B = A, O = e.find(n, [B, B]), G = e.find(a, [B, B]), _ = e.find(i, [B, B]), U = e.convert(0, B));
    for (var K = [], j = [], z = [], Q = x.createSparseMatrix({
      values: K,
      index: j,
      ptr: z,
      size: [$, R],
      datatype: B
    }), ae = [], re = [], fe = 0; fe < R; fe++) {
      z[fe] = j.length;
      for (var de = fe + 1, le = 0; le < I; le++) {
        var ie = C[le][fe];
        if (!_(ie, U))
          for (var ye = S[le], _e = S[le + 1], De = ye; De < _e; De++) {
            var Be = D[De];
            re[Be] !== de ? (re[Be] = de, j.push(Be), ae[Be] = G(ie, E[De])) : ae[Be] = O(ae[Be], G(ie, E[De]));
          }
      }
      for (var k = z[fe], Z = j.length, oe = k; oe < Z; oe++) {
        var H = j[oe];
        K[oe] = ae[H];
      }
    }
    return z[R] = j.length, Q;
  }
  function w(x, y) {
    var E = x._values, D = x._index, S = x._ptr, A = x._datatype, C = y._values, T = y._index, $ = y._ptr, I = y._datatype, R = x._size[0], B = y._size[1], O = E && C, G, _ = n, U = a;
    A && I && A === I && typeof A == "string" && (G = A, _ = e.find(n, [G, G]), U = e.find(a, [G, G]));
    for (var K = O ? [] : void 0, j = [], z = [], Q = x.createSparseMatrix({
      values: K,
      index: j,
      ptr: z,
      size: [R, B],
      datatype: G
    }), ae = O ? [] : void 0, re = [], fe, de, le, ie, ye, _e, De, Be, k = 0; k < B; k++) {
      z[k] = j.length;
      var Z = k + 1;
      for (ye = $[k], _e = $[k + 1], ie = ye; ie < _e; ie++)
        if (Be = T[ie], O)
          for (de = S[Be], le = S[Be + 1], fe = de; fe < le; fe++)
            De = D[fe], re[De] !== Z ? (re[De] = Z, j.push(De), ae[De] = U(C[ie], E[fe])) : ae[De] = _(ae[De], U(C[ie], E[fe]));
        else
          for (de = S[Be], le = S[Be + 1], fe = de; fe < le; fe++)
            De = D[fe], re[De] !== Z && (re[De] = Z, j.push(De));
      if (O)
        for (var oe = z[k], H = j.length, W = oe; W < H; W++) {
          var te = j[W];
          K[W] = ae[te];
        }
    }
    return z[B] = j.length, Q;
  }
  return e(Wf, a, {
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    "Array, Array": e.referTo("Matrix, Matrix", (x) => (y, E) => {
      u(Ye(y), Ye(E));
      var D = x(t(y), t(E));
      return Le(D) ? D.valueOf() : D;
    }),
    "Matrix, Matrix": function(y, E) {
      var D = y.size(), S = E.size();
      return u(D, S), D.length === 1 ? S.length === 1 ? s(y, E, D[0]) : c(y, E) : S.length === 1 ? v(y, E) : d(y, E);
    },
    "Matrix, Array": e.referTo("Matrix,Matrix", (x) => (y, E) => x(y, t(E))),
    "Array, Matrix": e.referToSelf((x) => (y, E) => x(t(y, E.storage()), E)),
    "SparseMatrix, any": function(y, E) {
      return f(y, E, a, !1);
    },
    "DenseMatrix, any": function(y, E) {
      return l(y, E, a, !1);
    },
    "any, SparseMatrix": function(y, E) {
      return f(E, y, a, !0);
    },
    "any, DenseMatrix": function(y, E) {
      return l(E, y, a, !0);
    },
    "Array, any": function(y, E) {
      return l(t(y), E, a, !1).valueOf();
    },
    "any, Array": function(y, E) {
      return l(t(E), y, a, !0).valueOf();
    },
    "any, any": a,
    "any, any, ...any": e.referToSelf((x) => (y, E, D) => {
      for (var S = x(y, E), A = 0; A < D.length; A++)
        S = x(S, D[A]);
      return S;
    })
  });
}), Jf = "nthRoot", g2 = ["typed", "matrix", "equalScalar", "BigNumber", "concat"], y2 = /* @__PURE__ */ q(Jf, g2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    BigNumber: a,
    concat: i
  } = r, o = _n({
    typed: e
  }), f = qt({
    typed: e,
    equalScalar: n
  }), l = hs({
    typed: e,
    equalScalar: n
  }), u = Gr({
    typed: e,
    equalScalar: n
  }), s = br({
    typed: e,
    matrix: t,
    concat: i
  });
  function c() {
    throw new Error("Complex number not supported in function nthRoot. Use nthRoots instead.");
  }
  return e(Jf, {
    number: df,
    "number, number": df,
    BigNumber: (v) => m(v, new a(2)),
    "BigNumber, BigNumber": m,
    Complex: c,
    "Complex, number": c,
    Array: e.referTo("DenseMatrix,number", (v) => (d) => v(t(d), 2).valueOf()),
    DenseMatrix: e.referTo("DenseMatrix,number", (v) => (d) => v(d, 2)),
    SparseMatrix: e.referTo("SparseMatrix,number", (v) => (d) => v(d, 2)),
    "SparseMatrix, SparseMatrix": e.referToSelf((v) => (d, p) => {
      if (p.density() === 1)
        return l(d, p, v);
      throw new Error("Root must be non-zero");
    }),
    "DenseMatrix, SparseMatrix": e.referToSelf((v) => (d, p) => {
      if (p.density() === 1)
        return o(d, p, v, !1);
      throw new Error("Root must be non-zero");
    }),
    "Array, SparseMatrix": e.referTo("DenseMatrix,SparseMatrix", (v) => (d, p) => v(t(d), p)),
    "number | BigNumber, SparseMatrix": e.referToSelf((v) => (d, p) => {
      if (p.density() === 1)
        return u(p, d, v, !0);
      throw new Error("Root must be non-zero");
    })
  }, s({
    scalar: "number | BigNumber",
    SD: f,
    Ss: u,
    sS: !1
  }));
  function m(v, d) {
    var p = a.precision, b = a.clone({
      precision: p + 2
    }), g = new a(0), N = new b(1), h = d.isNegative();
    if (h && (d = d.neg()), d.isZero())
      throw new Error("Root must be non-zero");
    if (v.isNegative() && !d.abs().mod(2).equals(1))
      throw new Error("Root must be odd when a is negative.");
    if (v.isZero())
      return h ? new b(1 / 0) : 0;
    if (!v.isFinite())
      return h ? g : v;
    var w = v.abs().pow(N.div(d));
    return w = v.isNeg() ? w.neg() : w, new a((h ? N.div(w) : w).toPrecision(p));
  }
}), Xf = "sign", b2 = ["typed", "BigNumber", "Fraction", "complex"], x2 = /* @__PURE__ */ q(Xf, b2, (r) => {
  var {
    typed: e,
    BigNumber: t,
    complex: n,
    Fraction: a
  } = r;
  return e(Xf, {
    number: tc,
    Complex: function(o) {
      return o.im === 0 ? n(tc(o.re)) : o.sign();
    },
    BigNumber: function(o) {
      return new t(o.cmp(0));
    },
    Fraction: function(o) {
      return new a(o.s, 1);
    },
    // deep map collection, skip zeros since sign(0) = 0
    "Array | Matrix": e.referToSelf((i) => (o) => je(o, i)),
    Unit: e.referToSelf((i) => (o) => {
      if (!o._isDerived() && o.units[0].unit.offset !== 0)
        throw new TypeError("sign is ambiguous for units with offset");
      return e.find(i, o.valueType())(o.value);
    })
  });
}), w2 = "sqrt", N2 = ["config", "typed", "Complex"], A2 = /* @__PURE__ */ q(w2, N2, (r) => {
  var {
    config: e,
    typed: t,
    Complex: n
  } = r;
  return t("sqrt", {
    number: a,
    Complex: function(o) {
      return o.sqrt();
    },
    BigNumber: function(o) {
      return !o.isNegative() || e.predictable ? o.sqrt() : a(o.toNumber());
    },
    Unit: function(o) {
      return o.pow(0.5);
    }
  });
  function a(i) {
    return isNaN(i) ? NaN : i >= 0 || e.predictable ? Math.sqrt(i) : new n(i, 0).sqrt();
  }
}), Kf = "square", E2 = ["typed"], D2 = /* @__PURE__ */ q(Kf, E2, (r) => {
  var {
    typed: e
  } = r;
  return e(Kf, {
    number: o0,
    Complex: function(n) {
      return n.mul(n);
    },
    BigNumber: function(n) {
      return n.times(n);
    },
    Fraction: function(n) {
      return n.mul(n);
    },
    Unit: function(n) {
      return n.pow(2);
    }
  });
}), Qf = "subtract", S2 = ["typed", "matrix", "equalScalar", "subtractScalar", "unaryMinus", "DenseMatrix", "concat"], C2 = /* @__PURE__ */ q(Qf, S2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    subtractScalar: a,
    unaryMinus: i,
    DenseMatrix: o,
    concat: f
  } = r, l = _n({
    typed: e
  }), u = ot({
    typed: e
  }), s = ds({
    typed: e,
    equalScalar: n
  }), c = Kn({
    typed: e,
    DenseMatrix: o
  }), m = Fr({
    typed: e,
    DenseMatrix: o
  }), v = br({
    typed: e,
    matrix: t,
    concat: f
  });
  return e(Qf, {
    "any, any": a
  }, v({
    elop: a,
    SS: s,
    DS: l,
    SD: u,
    Ss: m,
    sS: c
  }));
}), jf = "xgcd", M2 = ["typed", "config", "matrix", "BigNumber"], O2 = /* @__PURE__ */ q(jf, M2, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: a
  } = r;
  return e(jf, {
    "number, number": function(f, l) {
      var u = s0(f, l);
      return t.matrix === "Array" ? u : n(u);
    },
    "BigNumber, BigNumber": i
    // TODO: implement support for Fraction
  });
  function i(o, f) {
    var l, u, s, c = new a(0), m = new a(1), v = c, d = m, p = m, b = c;
    if (!o.isInt() || !f.isInt())
      throw new Error("Parameters in function xgcd must be integer numbers");
    for (; !f.isZero(); )
      u = o.div(f).floor(), s = o.mod(f), l = v, v = d.minus(u.times(v)), d = l, l = p, p = b.minus(u.times(p)), b = l, o = f, f = s;
    var g;
    return o.lt(c) ? g = [o.neg(), d.neg(), b.neg()] : g = [o, o.isZero() ? 0 : d, b], t.matrix === "Array" ? g : n(g);
  }
}), em = "invmod", T2 = ["typed", "config", "BigNumber", "xgcd", "equal", "smaller", "mod", "add", "isInteger"], B2 = /* @__PURE__ */ q(em, T2, (r) => {
  var {
    typed: e,
    config: t,
    BigNumber: n,
    xgcd: a,
    equal: i,
    smaller: o,
    mod: f,
    add: l,
    isInteger: u
  } = r;
  return e(em, {
    "number, number": s,
    "BigNumber, BigNumber": s
  });
  function s(c, m) {
    if (!u(c) || !u(m))
      throw new Error("Parameters in function invmod must be integer numbers");
    if (c = f(c, m), i(m, 0))
      throw new Error("Divisor must be non zero");
    var v = a(c, m);
    v = v.valueOf();
    var [d, p] = v;
    return i(d, n(1)) ? (p = f(p, m), o(p, n(0)) && (p = l(p, m)), p) : NaN;
  }
}), _2 = "matAlgo09xS0Sf", F2 = ["typed", "equalScalar"], H0 = /* @__PURE__ */ q(_2, F2, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o) {
    var f = a._values, l = a._index, u = a._ptr, s = a._size, c = a._datatype, m = i._values, v = i._index, d = i._ptr, p = i._size, b = i._datatype;
    if (s.length !== p.length)
      throw new Ke(s.length, p.length);
    if (s[0] !== p[0] || s[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + s + ") must match Matrix B (" + p + ")");
    var g = s[0], N = s[1], h, w = t, x = 0, y = o;
    typeof c == "string" && c === b && (h = c, w = e.find(t, [h, h]), x = e.convert(0, h), y = e.find(o, [h, h]));
    var E = f && m ? [] : void 0, D = [], S = [], A = E ? [] : void 0, C = [], T, $, I, R, B;
    for ($ = 0; $ < N; $++) {
      S[$] = D.length;
      var O = $ + 1;
      if (A)
        for (R = d[$], B = d[$ + 1], I = R; I < B; I++)
          T = v[I], C[T] = O, A[T] = m[I];
      for (R = u[$], B = u[$ + 1], I = R; I < B; I++)
        if (T = l[I], A) {
          var G = C[T] === O ? A[T] : x, _ = y(f[I], G);
          w(_, x) || (D.push(T), E.push(_));
        } else
          D.push(T);
    }
    return S[N] = D.length, a.createSparseMatrix({
      values: E,
      index: D,
      ptr: S,
      size: [g, N],
      datatype: h
    });
  };
}), rm = "dotMultiply", $2 = ["typed", "matrix", "equalScalar", "multiplyScalar", "concat"], R2 = /* @__PURE__ */ q(rm, $2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    multiplyScalar: a,
    concat: i
  } = r, o = qt({
    typed: e,
    equalScalar: n
  }), f = H0({
    typed: e,
    equalScalar: n
  }), l = Gr({
    typed: e,
    equalScalar: n
  }), u = br({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(rm, u({
    elop: a,
    SS: f,
    DS: o,
    Ss: l
  }));
});
function I2(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function bitAnd");
  var t = r.constructor;
  if (r.isNaN() || e.isNaN())
    return new t(NaN);
  if (r.isZero() || e.eq(-1) || r.eq(e))
    return r;
  if (e.isZero() || r.eq(-1))
    return e;
  if (!r.isFinite() || !e.isFinite()) {
    if (!r.isFinite() && !e.isFinite())
      return r.isNegative() === e.isNegative() ? r : new t(0);
    if (!r.isFinite())
      return e.isNegative() ? r : r.isNegative() ? new t(0) : e;
    if (!e.isFinite())
      return r.isNegative() ? e : e.isNegative() ? new t(0) : r;
  }
  return Lc(r, e, function(n, a) {
    return n & a;
  });
}
function Ai(r) {
  if (r.isFinite() && !r.isInteger())
    throw new Error("Integer expected in function bitNot");
  var e = r.constructor, t = e.precision;
  e.config({
    precision: 1e9
  });
  var n = r.plus(new e(1));
  return n.s = -n.s || null, e.config({
    precision: t
  }), n;
}
function P2(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function bitOr");
  var t = r.constructor;
  if (r.isNaN() || e.isNaN())
    return new t(NaN);
  var n = new t(-1);
  return r.isZero() || e.eq(n) || r.eq(e) ? e : e.isZero() || r.eq(n) ? r : !r.isFinite() || !e.isFinite() ? !r.isFinite() && !r.isNegative() && e.isNegative() || r.isNegative() && !e.isNegative() && !e.isFinite() ? n : r.isNegative() && e.isNegative() ? r.isFinite() ? r : e : r.isFinite() ? e : r : Lc(r, e, function(a, i) {
    return a | i;
  });
}
function Lc(r, e, t) {
  var n = r.constructor, a, i, o = +(r.s < 0), f = +(e.s < 0);
  if (o) {
    a = ro(Ai(r));
    for (var l = 0; l < a.length; ++l)
      a[l] ^= 1;
  } else
    a = ro(r);
  if (f) {
    i = ro(Ai(e));
    for (var u = 0; u < i.length; ++u)
      i[u] ^= 1;
  } else
    i = ro(e);
  var s, c, m;
  a.length <= i.length ? (s = a, c = i, m = o) : (s = i, c = a, m = f);
  var v = s.length, d = c.length, p = t(o, f) ^ 1, b = new n(p ^ 1), g = new n(1), N = new n(2), h = n.precision;
  for (n.config({
    precision: 1e9
  }); v > 0; )
    t(s[--v], c[--d]) === p && (b = b.plus(g)), g = g.times(N);
  for (; d > 0; )
    t(m, c[--d]) === p && (b = b.plus(g)), g = g.times(N);
  return n.config({
    precision: h
  }), p === 0 && (b.s = -b.s), b;
}
function ro(r) {
  for (var e = r.d, t = e[0] + "", n = 1; n < e.length; ++n) {
    for (var a = e[n] + "", i = 7 - a.length; i--; )
      a = "0" + a;
    t += a;
  }
  for (var o = t.length; t.charAt(o) === "0"; )
    o--;
  var f = r.e, l = t.slice(0, o + 1 || 1), u = l.length;
  if (f > 0)
    if (++f > u)
      for (f -= u; f--; )
        l += "0";
    else
      f < u && (l = l.slice(0, f) + "." + l.slice(f));
  for (var s = [0], c = 0; c < l.length; ) {
    for (var m = s.length; m--; )
      s[m] *= 10;
    s[0] += parseInt(l.charAt(c++));
    for (var v = 0; v < s.length; ++v)
      s[v] > 1 && ((s[v + 1] === null || s[v + 1] === void 0) && (s[v + 1] = 0), s[v + 1] += s[v] >> 1, s[v] &= 1);
  }
  return s.reverse();
}
function q2(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function bitXor");
  var t = r.constructor;
  if (r.isNaN() || e.isNaN())
    return new t(NaN);
  if (r.isZero())
    return e;
  if (e.isZero())
    return r;
  if (r.eq(e))
    return new t(0);
  var n = new t(-1);
  return r.eq(n) ? Ai(e) : e.eq(n) ? Ai(r) : !r.isFinite() || !e.isFinite() ? !r.isFinite() && !e.isFinite() ? n : new t(r.isNegative() === e.isNegative() ? 1 / 0 : -1 / 0) : Lc(r, e, function(a, i) {
    return a ^ i;
  });
}
function L2(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function leftShift");
  var t = r.constructor;
  return r.isNaN() || e.isNaN() || e.isNegative() && !e.isZero() ? new t(NaN) : r.isZero() || e.isZero() ? r : !r.isFinite() && !e.isFinite() ? new t(NaN) : e.lt(55) ? r.times(Math.pow(2, e.toNumber()) + "") : r.times(new t(2).pow(e));
}
function z2(r, e) {
  if (r.isFinite() && !r.isInteger() || e.isFinite() && !e.isInteger())
    throw new Error("Integers expected in function rightArithShift");
  var t = r.constructor;
  return r.isNaN() || e.isNaN() || e.isNegative() && !e.isZero() ? new t(NaN) : r.isZero() || e.isZero() ? r : e.isFinite() ? e.lt(55) ? r.div(Math.pow(2, e.toNumber()) + "").floor() : r.div(new t(2).pow(e)).floor() : r.isNegative() ? new t(-1) : r.isFinite() ? new t(0) : new t(NaN);
}
var tm = "bitAnd", U2 = ["typed", "matrix", "equalScalar", "concat"], k2 = /* @__PURE__ */ q(tm, U2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    concat: a
  } = r, i = qt({
    typed: e,
    equalScalar: n
  }), o = hs({
    typed: e,
    equalScalar: n
  }), f = Gr({
    typed: e,
    equalScalar: n
  }), l = br({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(tm, {
    "number, number": c0,
    "BigNumber, BigNumber": I2
  }, l({
    SS: o,
    DS: i,
    Ss: f
  }));
}), nm = "bitNot", G2 = ["typed"], V2 = /* @__PURE__ */ q(nm, G2, (r) => {
  var {
    typed: e
  } = r;
  return e(nm, {
    number: l0,
    BigNumber: Ai,
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), am = "bitOr", H2 = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], Z2 = /* @__PURE__ */ q(am, H2, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: a,
    concat: i
  } = r, o = _n({
    typed: e
  }), f = qc({
    typed: e,
    equalScalar: n
  }), l = Kn({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(am, {
    "number, number": f0,
    "BigNumber, BigNumber": P2
  }, u({
    SS: f,
    DS: o,
    Ss: l
  }));
}), Y2 = "matAlgo07xSSf", W2 = ["typed", "DenseMatrix"], Jt = /* @__PURE__ */ q(Y2, W2, (r) => {
  var {
    typed: e,
    DenseMatrix: t
  } = r;
  return function(i, o, f) {
    var l = i._size, u = i._datatype, s = o._size, c = o._datatype;
    if (l.length !== s.length)
      throw new Ke(l.length, s.length);
    if (l[0] !== s[0] || l[1] !== s[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + l + ") must match Matrix B (" + s + ")");
    var m = l[0], v = l[1], d, p = 0, b = f;
    typeof u == "string" && u === c && (d = u, p = e.convert(0, d), b = e.find(f, [d, d]));
    var g, N, h = [];
    for (g = 0; g < m; g++)
      h[g] = [];
    var w = [], x = [], y = [], E = [];
    for (N = 0; N < v; N++) {
      var D = N + 1;
      for (n(i, N, y, w, D), n(o, N, E, x, D), g = 0; g < m; g++) {
        var S = y[g] === D ? w[g] : p, A = E[g] === D ? x[g] : p;
        h[g][N] = b(S, A);
      }
    }
    return new t({
      data: h,
      size: [m, v],
      datatype: d
    });
  };
  function n(a, i, o, f, l) {
    for (var u = a._values, s = a._index, c = a._ptr, m = c[i], v = c[i + 1]; m < v; m++) {
      var d = s[m];
      o[d] = l, f[d] = u[m];
    }
  }
}), im = "bitXor", J2 = ["typed", "matrix", "DenseMatrix", "concat"], X2 = /* @__PURE__ */ q(im, J2, (r) => {
  var {
    typed: e,
    matrix: t,
    DenseMatrix: n,
    concat: a
  } = r, i = ot({
    typed: e
  }), o = Jt({
    typed: e,
    DenseMatrix: n
  }), f = Fr({
    typed: e,
    DenseMatrix: n
  }), l = br({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(im, {
    "number, number": m0,
    "BigNumber, BigNumber": q2
  }, l({
    SS: o,
    DS: i,
    Ss: f
  }));
}), om = "arg", K2 = ["typed"], Q2 = /* @__PURE__ */ q(om, K2, (r) => {
  var {
    typed: e
  } = r;
  return e(om, {
    number: function(n) {
      return Math.atan2(0, n);
    },
    BigNumber: function(n) {
      return n.constructor.atan2(0, n);
    },
    Complex: function(n) {
      return n.arg();
    },
    // TODO: implement BigNumber support for function arg
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), sm = "conj", j2 = ["typed"], eD = /* @__PURE__ */ q(sm, j2, (r) => {
  var {
    typed: e
  } = r;
  return e(sm, {
    "number | BigNumber | Fraction": (t) => t,
    Complex: (t) => t.conjugate(),
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), um = "im", rD = ["typed"], tD = /* @__PURE__ */ q(um, rD, (r) => {
  var {
    typed: e
  } = r;
  return e(um, {
    number: () => 0,
    "BigNumber | Fraction": (t) => t.mul(0),
    Complex: (t) => t.im,
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), cm = "re", nD = ["typed"], aD = /* @__PURE__ */ q(cm, nD, (r) => {
  var {
    typed: e
  } = r;
  return e(cm, {
    "number | BigNumber | Fraction": (t) => t,
    Complex: (t) => t.re,
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), lm = "not", iD = ["typed"], oD = /* @__PURE__ */ q(lm, iD, (r) => {
  var {
    typed: e
  } = r;
  return e(lm, {
    "null | undefined": () => !0,
    number: g0,
    Complex: function(n) {
      return n.re === 0 && n.im === 0;
    },
    BigNumber: function(n) {
      return n.isZero() || n.isNaN();
    },
    Unit: e.referToSelf((t) => (n) => e.find(t, n.valueType())(n.value)),
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), fm = "or", sD = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], uD = /* @__PURE__ */ q(fm, sD, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: a,
    concat: i
  } = r, o = ot({
    typed: e
  }), f = ds({
    typed: e,
    equalScalar: n
  }), l = Fr({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(fm, {
    "number, number": y0,
    "Complex, Complex": function(c, m) {
      return c.re !== 0 || c.im !== 0 || m.re !== 0 || m.im !== 0;
    },
    "BigNumber, BigNumber": function(c, m) {
      return !c.isZero() && !c.isNaN() || !m.isZero() && !m.isNaN();
    },
    "Unit, Unit": e.referToSelf((s) => (c, m) => s(c.value || 0, m.value || 0))
  }, u({
    SS: f,
    DS: o,
    Ss: l
  }));
}), mm = "xor", cD = ["typed", "matrix", "DenseMatrix", "concat"], lD = /* @__PURE__ */ q(mm, cD, (r) => {
  var {
    typed: e,
    matrix: t,
    DenseMatrix: n,
    concat: a
  } = r, i = ot({
    typed: e
  }), o = Jt({
    typed: e,
    DenseMatrix: n
  }), f = Fr({
    typed: e,
    DenseMatrix: n
  }), l = br({
    typed: e,
    matrix: t,
    concat: a
  });
  return e(mm, {
    "number, number": b0,
    "Complex, Complex": function(s, c) {
      return (s.re !== 0 || s.im !== 0) != (c.re !== 0 || c.im !== 0);
    },
    "BigNumber, BigNumber": function(s, c) {
      return (!s.isZero() && !s.isNaN()) != (!c.isZero() && !c.isNaN());
    },
    "Unit, Unit": e.referToSelf((u) => (s, c) => u(s.value || 0, c.value || 0))
  }, l({
    SS: o,
    DS: i,
    Ss: f
  }));
}), vm = "concat", fD = ["typed", "matrix", "isInteger"], Z0 = /* @__PURE__ */ q(vm, fD, (r) => {
  var {
    typed: e,
    matrix: t,
    isInteger: n
  } = r;
  return e(vm, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    "...Array | Matrix | number | BigNumber": function(i) {
      var o, f = i.length, l = -1, u, s = !1, c = [];
      for (o = 0; o < f; o++) {
        var m = i[o];
        if (Le(m) && (s = !0), Xe(m) || rr(m)) {
          if (o !== f - 1)
            throw new Error("Dimension must be specified as last argument");
          if (u = l, l = m.valueOf(), !n(l))
            throw new TypeError("Integer number expected for dimension");
          if (l < 0 || o > 0 && l > u)
            throw new Rt(l, u + 1);
        } else {
          var v = Ge(m).valueOf(), d = Ye(v);
          if (c[o] = v, u = l, l = d.length - 1, o > 0 && l !== u)
            throw new Ke(u + 1, l + 1);
        }
      }
      if (c.length === 0)
        throw new SyntaxError("At least one matrix expected");
      for (var p = c.shift(); c.length; )
        p = Oh(p, c.shift(), l);
      return s ? t(p) : p;
    },
    "...string": function(i) {
      return i.join("");
    }
  });
}), pm = "column", mD = ["typed", "Index", "matrix", "range"], Y0 = /* @__PURE__ */ q(pm, mD, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: a
  } = r;
  return e(pm, {
    "Matrix, number": i,
    "Array, number": function(f, l) {
      return i(n(Ge(f)), l).valueOf();
    }
  });
  function i(o, f) {
    if (o.size().length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    pr(f, o.size()[1]);
    var l = a(0, o.size()[0]), u = new t(l, f), s = o.subset(u);
    return Le(s) ? s : n([[s]]);
  }
}), dm = "count", vD = ["typed", "size", "prod"], pD = /* @__PURE__ */ q(dm, vD, (r) => {
  var {
    typed: e,
    size: t,
    prod: n
  } = r;
  return e(dm, {
    string: function(i) {
      return i.length;
    },
    "Matrix | Array": function(i) {
      return n(t(i));
    }
  });
}), hm = "cross", dD = ["typed", "matrix", "subtract", "multiply"], hD = /* @__PURE__ */ q(hm, dD, (r) => {
  var {
    typed: e,
    matrix: t,
    subtract: n,
    multiply: a
  } = r;
  return e(hm, {
    "Matrix, Matrix": function(f, l) {
      return t(i(f.toArray(), l.toArray()));
    },
    "Matrix, Array": function(f, l) {
      return t(i(f.toArray(), l));
    },
    "Array, Matrix": function(f, l) {
      return t(i(f, l.toArray()));
    },
    "Array, Array": i
  });
  function i(o, f) {
    var l = Math.max(Ye(o).length, Ye(f).length);
    o = Bo(o), f = Bo(f);
    var u = Ye(o), s = Ye(f);
    if (u.length !== 1 || s.length !== 1 || u[0] !== 3 || s[0] !== 3)
      throw new RangeError("Vectors with length 3 expected (Size A = [" + u.join(", ") + "], B = [" + s.join(", ") + "])");
    var c = [n(a(o[1], f[2]), a(o[2], f[1])), n(a(o[2], f[0]), a(o[0], f[2])), n(a(o[0], f[1]), a(o[1], f[0]))];
    return l > 1 ? [c] : c;
  }
}), gm = "diag", gD = ["typed", "matrix", "DenseMatrix", "SparseMatrix"], yD = /* @__PURE__ */ q(gm, gD, (r) => {
  var {
    typed: e,
    matrix: t,
    DenseMatrix: n,
    SparseMatrix: a
  } = r;
  return e(gm, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    Array: function(u) {
      return i(u, 0, Ye(u), null);
    },
    "Array, number": function(u, s) {
      return i(u, s, Ye(u), null);
    },
    "Array, BigNumber": function(u, s) {
      return i(u, s.toNumber(), Ye(u), null);
    },
    "Array, string": function(u, s) {
      return i(u, 0, Ye(u), s);
    },
    "Array, number, string": function(u, s, c) {
      return i(u, s, Ye(u), c);
    },
    "Array, BigNumber, string": function(u, s, c) {
      return i(u, s.toNumber(), Ye(u), c);
    },
    Matrix: function(u) {
      return i(u, 0, u.size(), u.storage());
    },
    "Matrix, number": function(u, s) {
      return i(u, s, u.size(), u.storage());
    },
    "Matrix, BigNumber": function(u, s) {
      return i(u, s.toNumber(), u.size(), u.storage());
    },
    "Matrix, string": function(u, s) {
      return i(u, 0, u.size(), s);
    },
    "Matrix, number, string": function(u, s, c) {
      return i(u, s, u.size(), c);
    },
    "Matrix, BigNumber, string": function(u, s, c) {
      return i(u, s.toNumber(), u.size(), c);
    }
  });
  function i(l, u, s, c) {
    if (!Ie(u))
      throw new TypeError("Second parameter in function diag must be an integer");
    var m = u > 0 ? u : 0, v = u < 0 ? -u : 0;
    switch (s.length) {
      case 1:
        return o(l, u, c, s[0], v, m);
      case 2:
        return f(l, u, c, s, v, m);
    }
    throw new RangeError("Matrix for function diag must be 2 dimensional");
  }
  function o(l, u, s, c, m, v) {
    var d = [c + m, c + v];
    if (s && s !== "sparse" && s !== "dense")
      throw new TypeError("Unknown matrix type ".concat(s, '"'));
    var p = s === "sparse" ? a.diagonal(d, l, u) : n.diagonal(d, l, u);
    return s !== null ? p : p.valueOf();
  }
  function f(l, u, s, c, m, v) {
    if (Le(l)) {
      var d = l.diagonal(u);
      return s !== null ? s !== d.storage() ? t(d, s) : d : d.valueOf();
    }
    for (var p = Math.min(c[0] - m, c[1] - v), b = [], g = 0; g < p; g++)
      b[g] = l[g + m][g + v];
    return s !== null ? t(b) : b;
  }
});
function Qa(r, e, t, n, a) {
  if (Ea.isTypedFunction(r)) {
    var i = [e, t, n], o = Ea.resolve(r, i);
    if (o)
      return c(o.implementation, i);
    var f = [e, t], l = Ea.resolve(r, f);
    if (l)
      return c(l.implementation, f);
    var u = [e], s = Ea.resolve(r, u);
    return s ? c(s.implementation, u) : c(r, i);
  } else
    return r(e, t, n);
  function c(m, v) {
    try {
      return m.apply(m, v);
    } catch (b) {
      var d;
      if (b instanceof TypeError && ((d = b.data) === null || d === void 0 ? void 0 : d.category) === "wrongType") {
        var p = [];
        throw p.push("value: ".concat(hr(e))), v.length >= 2 && p.push("index: ".concat(hr(t))), v.length >= 3 && p.push("array: ".concat(hr(n))), new TypeError("Function ".concat(a, " cannot apply callback arguments ") + "".concat(r.name, "(").concat(p.join(", "), ") at index ").concat(JSON.stringify(t)));
      } else
        throw new TypeError("Function ".concat(a, " cannot apply callback arguments ") + "to function ".concat(r.name, ": ").concat(b.message));
    }
  }
}
var bD = "filter", xD = ["typed"], wD = /* @__PURE__ */ q(bD, xD, (r) => {
  var {
    typed: e
  } = r;
  return e("filter", {
    "Array, function": ym,
    "Matrix, function": function(n, a) {
      return n.create(ym(n.toArray(), a));
    },
    "Array, RegExp": _o,
    "Matrix, RegExp": function(n, a) {
      return n.create(_o(n.toArray(), a));
    }
  });
});
function ym(r, e) {
  return Ch(r, function(t, n, a) {
    return Qa(e, t, [n], a, "filter");
  });
}
var bm = "flatten", ND = ["typed", "matrix"], AD = /* @__PURE__ */ q(bm, ND, (r) => {
  var {
    typed: e,
    matrix: t
  } = r;
  return e(bm, {
    Array: function(a) {
      return or(a);
    },
    Matrix: function(a) {
      var i = or(a.toArray());
      return t(i);
    }
  });
}), xm = "forEach", ED = ["typed"], DD = /* @__PURE__ */ q(xm, ED, (r) => {
  var {
    typed: e
  } = r;
  return e(xm, {
    "Array, function": SD,
    "Matrix, function": function(n, a) {
      n.forEach(a);
    }
  });
});
function SD(r, e) {
  var t = function n(a, i) {
    if (Array.isArray(a))
      cs(a, function(o, f) {
        n(o, i.concat(f));
      });
    else
      return Qa(e, a, i, r, "forEach");
  };
  t(r, []);
}
var wm = "getMatrixDataType", CD = ["typed"], MD = /* @__PURE__ */ q(wm, CD, (r) => {
  var {
    typed: e
  } = r;
  return e(wm, {
    Array: function(n) {
      return wi(n, hr);
    },
    Matrix: function(n) {
      return n.getDataType();
    }
  });
}), Nm = "identity", OD = ["typed", "config", "matrix", "BigNumber", "DenseMatrix", "SparseMatrix"], TD = /* @__PURE__ */ q(Nm, OD, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: a,
    DenseMatrix: i,
    SparseMatrix: o
  } = r;
  return e(Nm, {
    "": function() {
      return t.matrix === "Matrix" ? n([]) : [];
    },
    string: function(s) {
      return n(s);
    },
    "number | BigNumber": function(s) {
      return l(s, s, t.matrix === "Matrix" ? "dense" : void 0);
    },
    "number | BigNumber, string": function(s, c) {
      return l(s, s, c);
    },
    "number | BigNumber, number | BigNumber": function(s, c) {
      return l(s, c, t.matrix === "Matrix" ? "dense" : void 0);
    },
    "number | BigNumber, number | BigNumber, string": function(s, c, m) {
      return l(s, c, m);
    },
    Array: function(s) {
      return f(s);
    },
    "Array, string": function(s, c) {
      return f(s, c);
    },
    Matrix: function(s) {
      return f(s.valueOf(), s.storage());
    },
    "Matrix, string": function(s, c) {
      return f(s.valueOf(), c);
    }
  });
  function f(u, s) {
    switch (u.length) {
      case 0:
        return s ? n(s) : [];
      case 1:
        return l(u[0], u[0], s);
      case 2:
        return l(u[0], u[1], s);
      default:
        throw new Error("Vector containing two values expected");
    }
  }
  function l(u, s, c) {
    var m = rr(u) || rr(s) ? a : null;
    if (rr(u) && (u = u.toNumber()), rr(s) && (s = s.toNumber()), !Ie(u) || u < 1)
      throw new Error("Parameters in function identity must be positive integers");
    if (!Ie(s) || s < 1)
      throw new Error("Parameters in function identity must be positive integers");
    var v = m ? new a(1) : 1, d = m ? new m(0) : 0, p = [u, s];
    if (c) {
      if (c === "sparse")
        return o.diagonal(p, v, 0, d);
      if (c === "dense")
        return i.diagonal(p, v, 0, d);
      throw new TypeError('Unknown matrix type "'.concat(c, '"'));
    }
    for (var b = Pa([], p, d), g = u < s ? u : s, N = 0; N < g; N++)
      b[N][N] = v;
    return b;
  }
}), Am = "kron", BD = ["typed", "matrix", "multiplyScalar"], _D = /* @__PURE__ */ q(Am, BD, (r) => {
  var {
    typed: e,
    matrix: t,
    multiplyScalar: n
  } = r;
  return e(Am, {
    "Matrix, Matrix": function(o, f) {
      return t(a(o.toArray(), f.toArray()));
    },
    "Matrix, Array": function(o, f) {
      return t(a(o.toArray(), f));
    },
    "Array, Matrix": function(o, f) {
      return t(a(o, f.toArray()));
    },
    "Array, Array": a
  });
  function a(i, o) {
    if (Ye(i).length === 1 && (i = [i]), Ye(o).length === 1 && (o = [o]), Ye(i).length > 2 || Ye(o).length > 2)
      throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = " + JSON.stringify(i.length) + ", y = " + JSON.stringify(o.length) + ")");
    var f = [], l = [];
    return i.map(function(u) {
      return o.map(function(s) {
        return l = [], f.push(l), u.map(function(c) {
          return s.map(function(m) {
            return l.push(n(c, m));
          });
        });
      });
    }) && f;
  }
}), Em = "map", FD = ["typed"], $D = /* @__PURE__ */ q(Em, FD, (r) => {
  var {
    typed: e
  } = r;
  return e(Em, {
    "Array, function": RD,
    "Matrix, function": function(n, a) {
      return n.map(a);
    }
  });
});
function RD(r, e) {
  var t = function n(a, i) {
    return Array.isArray(a) ? a.map(function(o, f) {
      return n(o, i.concat(f));
    }) : Qa(e, a, i, r, "map");
  };
  return t(r, []);
}
var Dm = "diff", ID = ["typed", "matrix", "subtract", "number"], W0 = /* @__PURE__ */ q(Dm, ID, (r) => {
  var {
    typed: e,
    matrix: t,
    subtract: n,
    number: a
  } = r;
  return e(Dm, {
    "Array | Matrix": function(s) {
      return Le(s) ? t(o(s.toArray())) : o(s);
    },
    "Array | Matrix, number": function(s, c) {
      if (!Ie(c))
        throw new RangeError("Dimension must be a whole number");
      return Le(s) ? t(i(s.toArray(), c)) : i(s, c);
    },
    "Array, BigNumber": e.referTo("Array,number", (u) => (s, c) => u(s, a(c))),
    "Matrix, BigNumber": e.referTo("Matrix,number", (u) => (s, c) => u(s, a(c)))
  });
  function i(u, s) {
    if (Le(u) && (u = u.toArray()), !Array.isArray(u))
      throw RangeError("Array/Matrix does not have that many dimensions");
    if (s > 0) {
      var c = [];
      return u.forEach((m) => {
        c.push(i(m, s - 1));
      }), c;
    } else {
      if (s === 0)
        return o(u);
      throw RangeError("Cannot have negative dimension");
    }
  }
  function o(u) {
    for (var s = [], c = u.length, m = 1; m < c; m++)
      s.push(f(u[m - 1], u[m]));
    return s;
  }
  function f(u, s) {
    Le(u) && (u = u.toArray()), Le(s) && (s = s.toArray());
    var c = Array.isArray(u), m = Array.isArray(s);
    if (c && m)
      return l(u, s);
    if (!c && !m)
      return n(s, u);
    throw TypeError("Cannot calculate difference between 1 array and 1 non-array");
  }
  function l(u, s) {
    if (u.length !== s.length)
      throw RangeError("Not all sub-arrays have the same length");
    for (var c = [], m = u.length, v = 0; v < m; v++)
      c.push(f(u[v], s[v]));
    return c;
  }
}), PD = "ones", qD = ["typed", "config", "matrix", "BigNumber"], LD = /* @__PURE__ */ q(PD, qD, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: a
  } = r;
  return e("ones", {
    "": function() {
      return t.matrix === "Array" ? i([]) : i([], "default");
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    "...number | BigNumber | string": function(u) {
      var s = u[u.length - 1];
      if (typeof s == "string") {
        var c = u.pop();
        return i(u, c);
      } else
        return t.matrix === "Array" ? i(u) : i(u, "default");
    },
    Array: i,
    Matrix: function(u) {
      var s = u.storage();
      return i(u.valueOf(), s);
    },
    "Array | Matrix, string": function(u, s) {
      return i(u.valueOf(), s);
    }
  });
  function i(l, u) {
    var s = o(l), c = s ? new a(1) : 1;
    if (f(l), u) {
      var m = n(u);
      return l.length > 0 ? m.resize(l, c) : m;
    } else {
      var v = [];
      return l.length > 0 ? Pa(v, l, c) : v;
    }
  }
  function o(l) {
    var u = !1;
    return l.forEach(function(s, c, m) {
      rr(s) && (u = !0, m[c] = s.toNumber());
    }), u;
  }
  function f(l) {
    l.forEach(function(u) {
      if (typeof u != "number" || !Ie(u) || u < 0)
        throw new Error("Parameters in function ones must be positive integers");
    });
  }
});
function zc() {
  throw new Error('No "bignumber" implementation available');
}
function J0() {
  throw new Error('No "fraction" implementation available');
}
function X0() {
  throw new Error('No "matrix" implementation available');
}
var Sm = "range", zD = ["typed", "config", "?matrix", "?bignumber", "smaller", "smallerEq", "larger", "largerEq", "add", "isPositive"], K0 = /* @__PURE__ */ q(Sm, zD, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    bignumber: a,
    smaller: i,
    smallerEq: o,
    larger: f,
    largerEq: l,
    add: u,
    isPositive: s
  } = r;
  return e(Sm, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    string: m,
    "string, boolean": m,
    "number, number": function(b, g) {
      return c(v(b, g, 1, !1));
    },
    "number, number, number": function(b, g, N) {
      return c(v(b, g, N, !1));
    },
    "number, number, boolean": function(b, g, N) {
      return c(v(b, g, 1, N));
    },
    "number, number, number, boolean": function(b, g, N, h) {
      return c(v(b, g, N, h));
    },
    "BigNumber, BigNumber": function(b, g) {
      var N = b.constructor;
      return c(v(b, g, new N(1), !1));
    },
    "BigNumber, BigNumber, BigNumber": function(b, g, N) {
      return c(v(b, g, N, !1));
    },
    "BigNumber, BigNumber, boolean": function(b, g, N) {
      var h = b.constructor;
      return c(v(b, g, new h(1), N));
    },
    "BigNumber, BigNumber, BigNumber, boolean": function(b, g, N, h) {
      return c(v(b, g, N, h));
    },
    "Unit, Unit, Unit": function(b, g, N) {
      return c(v(b, g, N, !1));
    },
    "Unit, Unit, Unit, boolean": function(b, g, N, h) {
      return c(v(b, g, N, h));
    }
  });
  function c(p) {
    return t.matrix === "Matrix" ? n ? n(p) : X0() : p;
  }
  function m(p, b) {
    var g = d(p);
    if (!g)
      throw new SyntaxError('String "' + p + '" is no valid range');
    return t.number === "BigNumber" ? (a === void 0 && zc(), c(v(a(g.start), a(g.end), a(g.step)))) : c(v(g.start, g.end, g.step, b));
  }
  function v(p, b, g, N) {
    for (var h = [], w = s(g) ? N ? o : i : N ? l : f, x = p; w(x, b); )
      h.push(x), x = u(x, g);
    return h;
  }
  function d(p) {
    var b = p.split(":"), g = b.map(function(h) {
      return Number(h);
    }), N = g.some(function(h) {
      return isNaN(h);
    });
    if (N)
      return null;
    switch (g.length) {
      case 2:
        return {
          start: g[0],
          end: g[1],
          step: 1
        };
      case 3:
        return {
          start: g[0],
          end: g[2],
          step: g[1]
        };
      default:
        return null;
    }
  }
}), Cm = "reshape", UD = ["typed", "isInteger", "matrix"], kD = /* @__PURE__ */ q(Cm, UD, (r) => {
  var {
    typed: e,
    isInteger: t
  } = r;
  return e(Cm, {
    "Matrix, Array": function(a, i) {
      return a.reshape(i, !0);
    },
    "Array, Array": function(a, i) {
      return i.forEach(function(o) {
        if (!t(o))
          throw new TypeError("Invalid size for dimension: " + o);
      }), Tc(a, i);
    }
  });
}), GD = "resize", VD = ["config", "matrix"], HD = /* @__PURE__ */ q(GD, VD, (r) => {
  var {
    config: e,
    matrix: t
  } = r;
  return function(i, o, f) {
    if (arguments.length !== 2 && arguments.length !== 3)
      throw new Qn("resize", arguments.length, 2, 3);
    if (Le(o) && (o = o.valueOf()), rr(o[0]) && (o = o.map(function(s) {
      return rr(s) ? s.toNumber() : s;
    })), Le(i))
      return i.resize(o, f, !0);
    if (typeof i == "string")
      return n(i, o, f);
    var l = Array.isArray(i) ? !1 : e.matrix !== "Array";
    if (o.length === 0) {
      for (; Array.isArray(i); )
        i = i[0];
      return Ge(i);
    } else {
      Array.isArray(i) || (i = [i]), i = Ge(i);
      var u = Pa(i, o, f);
      return l ? t(u) : u;
    }
  };
  function n(a, i, o) {
    if (o !== void 0) {
      if (typeof o != "string" || o.length !== 1)
        throw new TypeError("Single character expected as defaultValue");
    } else
      o = " ";
    if (i.length !== 1)
      throw new Ke(i.length, 1);
    var f = i[0];
    if (typeof f != "number" || !Ie(f))
      throw new TypeError("Invalid size, must contain positive integers (size: " + Je(i) + ")");
    if (a.length > f)
      return a.substring(0, f);
    if (a.length < f) {
      for (var l = a, u = 0, s = f - a.length; u < s; u++)
        l += o;
      return l;
    } else
      return a;
  }
}), Mm = "rotate", ZD = ["typed", "multiply", "rotationMatrix"], YD = /* @__PURE__ */ q(Mm, ZD, (r) => {
  var {
    typed: e,
    multiply: t,
    rotationMatrix: n
  } = r;
  return e(Mm, {
    "Array , number | BigNumber | Complex | Unit": function(o, f) {
      a(o, 2);
      var l = t(n(f), o);
      return l.toArray();
    },
    "Matrix , number | BigNumber | Complex | Unit": function(o, f) {
      return a(o, 2), t(n(f), o);
    },
    "Array, number | BigNumber | Complex | Unit, Array | Matrix": function(o, f, l) {
      a(o, 3);
      var u = t(n(f, l), o);
      return u;
    },
    "Matrix, number | BigNumber | Complex | Unit, Array | Matrix": function(o, f, l) {
      return a(o, 3), t(n(f, l), o);
    }
  });
  function a(i, o) {
    var f = Array.isArray(i) ? Ye(i) : i.size();
    if (f.length > 2)
      throw new RangeError("Vector must be of dimensions 1x".concat(o));
    if (f.length === 2 && f[1] !== 1)
      throw new RangeError("Vector must be of dimensions 1x".concat(o));
    if (f[0] !== o)
      throw new RangeError("Vector must be of dimensions 1x".concat(o));
  }
}), Om = "rotationMatrix", WD = ["typed", "config", "multiplyScalar", "addScalar", "unaryMinus", "norm", "matrix", "BigNumber", "DenseMatrix", "SparseMatrix", "cos", "sin"], JD = /* @__PURE__ */ q(Om, WD, (r) => {
  var {
    typed: e,
    config: t,
    multiplyScalar: n,
    addScalar: a,
    unaryMinus: i,
    norm: o,
    BigNumber: f,
    matrix: l,
    DenseMatrix: u,
    SparseMatrix: s,
    cos: c,
    sin: m
  } = r;
  return e(Om, {
    "": function() {
      return t.matrix === "Matrix" ? l([]) : [];
    },
    string: function(h) {
      return l(h);
    },
    "number | BigNumber | Complex | Unit": function(h) {
      return v(h, t.matrix === "Matrix" ? "dense" : void 0);
    },
    "number | BigNumber | Complex | Unit, string": function(h, w) {
      return v(h, w);
    },
    "number | BigNumber | Complex | Unit, Array": function(h, w) {
      var x = l(w);
      return d(x), g(h, x, void 0);
    },
    "number | BigNumber | Complex | Unit, Matrix": function(h, w) {
      d(w);
      var x = w.storage() || (t.matrix === "Matrix" ? "dense" : void 0);
      return g(h, w, x);
    },
    "number | BigNumber | Complex | Unit, Array, string": function(h, w, x) {
      var y = l(w);
      return d(y), g(h, y, x);
    },
    "number | BigNumber | Complex | Unit, Matrix, string": function(h, w, x) {
      return d(w), g(h, w, x);
    }
  });
  function v(N, h) {
    var w = rr(N), x = w ? new f(-1) : -1, y = c(N), E = m(N), D = [[y, n(x, E)], [E, y]];
    return b(D, h);
  }
  function d(N) {
    var h = N.size();
    if (h.length < 1 || h[0] !== 3)
      throw new RangeError("Vector must be of dimensions 1x3");
  }
  function p(N) {
    return N.reduce((h, w) => n(h, w));
  }
  function b(N, h) {
    if (h) {
      if (h === "sparse")
        return new s(N);
      if (h === "dense")
        return new u(N);
      throw new TypeError('Unknown matrix type "'.concat(h, '"'));
    }
    return N;
  }
  function g(N, h, w) {
    var x = o(h);
    if (x === 0)
      throw new RangeError("Rotation around zero vector");
    var y = rr(N) ? f : null, E = y ? new y(1) : 1, D = y ? new y(-1) : -1, S = y ? new y(h.get([0]) / x) : h.get([0]) / x, A = y ? new y(h.get([1]) / x) : h.get([1]) / x, C = y ? new y(h.get([2]) / x) : h.get([2]) / x, T = c(N), $ = a(E, i(T)), I = m(N), R = a(T, p([S, S, $])), B = a(p([S, A, $]), p([D, C, I])), O = a(p([S, C, $]), p([A, I])), G = a(p([S, A, $]), p([C, I])), _ = a(T, p([A, A, $])), U = a(p([A, C, $]), p([D, S, I])), K = a(p([S, C, $]), p([D, A, I])), j = a(p([A, C, $]), p([S, I])), z = a(T, p([C, C, $])), Q = [[R, B, O], [G, _, U], [K, j, z]];
    return b(Q, w);
  }
}), Tm = "row", XD = ["typed", "Index", "matrix", "range"], Q0 = /* @__PURE__ */ q(Tm, XD, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: a
  } = r;
  return e(Tm, {
    "Matrix, number": i,
    "Array, number": function(f, l) {
      return i(n(Ge(f)), l).valueOf();
    }
  });
  function i(o, f) {
    if (o.size().length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    pr(f, o.size()[0]);
    var l = a(0, o.size()[1]), u = new t(f, l), s = o.subset(u);
    return Le(s) ? s : n([[s]]);
  }
}), Bm = "size", KD = ["typed", "config", "?matrix"], QD = /* @__PURE__ */ q(Bm, KD, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n
  } = r;
  return e(Bm, {
    Matrix: function(i) {
      return i.create(i.size());
    },
    Array: Ye,
    string: function(i) {
      return t.matrix === "Array" ? [i.length] : n([i.length]);
    },
    "number | Complex | BigNumber | Unit | boolean | null": function(i) {
      return t.matrix === "Array" ? [] : n ? n([]) : X0();
    }
  });
}), _m = "squeeze", jD = ["typed", "matrix"], eS = /* @__PURE__ */ q(_m, jD, (r) => {
  var {
    typed: e,
    matrix: t
  } = r;
  return e(_m, {
    Array: function(a) {
      return Bo(Ge(a));
    },
    Matrix: function(a) {
      var i = Bo(a.toArray());
      return Array.isArray(i) ? t(i) : i;
    },
    any: function(a) {
      return Ge(a);
    }
  });
}), Fm = "subset", rS = ["typed", "matrix", "zeros", "add"], j0 = /* @__PURE__ */ q(Fm, rS, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    add: a
  } = r;
  return e(Fm, {
    // get subset
    "Matrix, Index": function(f, l) {
      return Ia(l) ? t() : (To(f, l), f.subset(l));
    },
    "Array, Index": e.referTo("Matrix, Index", function(o) {
      return function(f, l) {
        var u = o(t(f), l);
        return l.isScalar() ? u : u.valueOf();
      };
    }),
    "Object, Index": nS,
    "string, Index": tS,
    // set subset
    "Matrix, Index, any, any": function(f, l, u, s) {
      return Ia(l) ? f : (To(f, l), f.clone().subset(l, i(u, l), s));
    },
    "Array, Index, any, any": e.referTo("Matrix, Index, any, any", function(o) {
      return function(f, l, u, s) {
        var c = o(t(f), l, u, s);
        return c.isMatrix ? c.valueOf() : c;
      };
    }),
    "Array, Index, any": e.referTo("Matrix, Index, any, any", function(o) {
      return function(f, l, u) {
        return o(t(f), l, u, void 0).valueOf();
      };
    }),
    "Matrix, Index, any": e.referTo("Matrix, Index, any, any", function(o) {
      return function(f, l, u) {
        return o(f, l, u, void 0);
      };
    }),
    "string, Index, string": $m,
    "string, Index, string, string": $m,
    "Object, Index, any": aS
  });
  function i(o, f) {
    if (typeof o == "string")
      throw new Error("can't boradcast a string");
    if (f._isScalar)
      return o;
    var l = f.size();
    if (l.every((u) => u > 0))
      try {
        return a(o, n(l));
      } catch {
        return o;
      }
    else
      return o;
  }
});
function tS(r, e) {
  if (!as(e))
    throw new TypeError("Index expected");
  if (Ia(e))
    return "";
  if (To(Array.from(r), e), e.size().length !== 1)
    throw new Ke(e.size().length, 1);
  var t = r.length;
  pr(e.min()[0], t), pr(e.max()[0], t);
  var n = e.dimension(0), a = "";
  return n.forEach(function(i) {
    a += r.charAt(i);
  }), a;
}
function $m(r, e, t, n) {
  if (!e || e.isIndex !== !0)
    throw new TypeError("Index expected");
  if (Ia(e))
    return r;
  if (To(Array.from(r), e), e.size().length !== 1)
    throw new Ke(e.size().length, 1);
  if (n !== void 0) {
    if (typeof n != "string" || n.length !== 1)
      throw new TypeError("Single character expected as defaultValue");
  } else
    n = " ";
  var a = e.dimension(0), i = a.size()[0];
  if (i !== t.length)
    throw new Ke(a.size()[0], t.length);
  var o = r.length;
  pr(e.min()[0]), pr(e.max()[0]);
  for (var f = [], l = 0; l < o; l++)
    f[l] = r.charAt(l);
  if (a.forEach(function(c, m) {
    f[c] = t.charAt(m[0]);
  }), f.length > o)
    for (var u = o - 1, s = f.length; u < s; u++)
      f[u] || (f[u] = n);
  return f.join("");
}
function nS(r, e) {
  if (!Ia(e)) {
    if (e.size().length !== 1)
      throw new Ke(e.size(), 1);
    var t = e.dimension(0);
    if (typeof t != "string")
      throw new TypeError("String expected as index to retrieve an object property");
    return rt(r, t);
  }
}
function aS(r, e, t) {
  if (Ia(e))
    return r;
  if (e.size().length !== 1)
    throw new Ke(e.size(), 1);
  var n = e.dimension(0);
  if (typeof n != "string")
    throw new TypeError("String expected as index to retrieve an object property");
  var a = Ge(r);
  return La(a, n, t), a;
}
var Rm = "transpose", iS = ["typed", "matrix"], oS = /* @__PURE__ */ q(Rm, iS, (r) => {
  var {
    typed: e,
    matrix: t
  } = r;
  return e(Rm, {
    Array: (o) => n(t(o)).valueOf(),
    Matrix: n,
    any: Ge
    // scalars
  });
  function n(o) {
    var f = o.size(), l;
    switch (f.length) {
      case 1:
        l = o.clone();
        break;
      case 2:
        {
          var u = f[0], s = f[1];
          if (s === 0)
            throw new RangeError("Cannot transpose a 2D matrix with no columns (size: " + Je(f) + ")");
          switch (o.storage()) {
            case "dense":
              l = a(o, u, s);
              break;
            case "sparse":
              l = i(o, u, s);
              break;
          }
        }
        break;
      default:
        throw new RangeError("Matrix must be a vector or two dimensional (size: " + Je(f) + ")");
    }
    return l;
  }
  function a(o, f, l) {
    for (var u = o._data, s = [], c, m = 0; m < l; m++) {
      c = s[m] = [];
      for (var v = 0; v < f; v++)
        c[v] = Ge(u[v][m]);
    }
    return o.createDenseMatrix({
      data: s,
      size: [l, f],
      datatype: o._datatype
    });
  }
  function i(o, f, l) {
    for (var u = o._values, s = o._index, c = o._ptr, m = u ? [] : void 0, v = [], d = [], p = [], b = 0; b < f; b++)
      p[b] = 0;
    var g, N, h;
    for (g = 0, N = s.length; g < N; g++)
      p[s[g]]++;
    for (var w = 0, x = 0; x < f; x++)
      d.push(w), w += p[x], p[x] = d[x];
    for (d.push(w), h = 0; h < l; h++)
      for (var y = c[h], E = c[h + 1], D = y; D < E; D++) {
        var S = p[s[D]]++;
        v[S] = h, u && (m[S] = Ge(u[D]));
      }
    return o.createSparseMatrix({
      values: m,
      index: v,
      ptr: d,
      size: [l, f],
      datatype: o._datatype
    });
  }
}), Im = "ctranspose", sS = ["typed", "transpose", "conj"], uS = /* @__PURE__ */ q(Im, sS, (r) => {
  var {
    typed: e,
    transpose: t,
    conj: n
  } = r;
  return e(Im, {
    any: function(i) {
      return n(t(i));
    }
  });
}), Pm = "zeros", cS = ["typed", "config", "matrix", "BigNumber"], lS = /* @__PURE__ */ q(Pm, cS, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    BigNumber: a
  } = r;
  return e(Pm, {
    "": function() {
      return t.matrix === "Array" ? i([]) : i([], "default");
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    "...number | BigNumber | string": function(u) {
      var s = u[u.length - 1];
      if (typeof s == "string") {
        var c = u.pop();
        return i(u, c);
      } else
        return t.matrix === "Array" ? i(u) : i(u, "default");
    },
    Array: i,
    Matrix: function(u) {
      var s = u.storage();
      return i(u.valueOf(), s);
    },
    "Array | Matrix, string": function(u, s) {
      return i(u.valueOf(), s);
    }
  });
  function i(l, u) {
    var s = o(l), c = s ? new a(0) : 0;
    if (f(l), u) {
      var m = n(u);
      return l.length > 0 ? m.resize(l, c) : m;
    } else {
      var v = [];
      return l.length > 0 ? Pa(v, l, c) : v;
    }
  }
  function o(l) {
    var u = !1;
    return l.forEach(function(s, c, m) {
      rr(s) && (u = !0, m[c] = s.toNumber());
    }), u;
  }
  function f(l) {
    l.forEach(function(u) {
      if (typeof u != "number" || !Ie(u) || u < 0)
        throw new Error("Parameters in function zeros must be positive integers");
    });
  }
}), qm = "fft", fS = ["typed", "matrix", "addScalar", "multiplyScalar", "divideScalar", "exp", "tau", "i", "dotDivide", "conj", "pow", "ceil", "log2"], mS = /* @__PURE__ */ q(qm, fS, (r) => {
  var {
    typed: e,
    matrix: t,
    addScalar: n,
    multiplyScalar: a,
    divideScalar: i,
    exp: o,
    tau: f,
    i: l,
    dotDivide: u,
    conj: s,
    pow: c,
    ceil: m,
    log2: v
  } = r;
  return e(qm, {
    Array: d,
    Matrix: function(h) {
      return h.create(d(h.toArray()));
    }
  });
  function d(N) {
    var h = Ye(N);
    return h.length === 1 ? g(N, h[0]) : p(N.map((w) => d(w, h.slice(1))), 0);
  }
  function p(N, h) {
    var w = Ye(N);
    if (h !== 0)
      return new Array(w[0]).fill(0).map((y, E) => p(N[E], h - 1));
    if (w.length === 1)
      return g(N);
    function x(y) {
      var E = Ye(y);
      return new Array(E[1]).fill(0).map((D, S) => new Array(E[0]).fill(0).map((A, C) => y[C][S]));
    }
    return x(p(x(N), 1));
  }
  function b(N) {
    for (var h = N.length, w = o(i(a(-1, a(l, f)), h)), x = [], y = 1 - h; y < h; y++)
      x.push(c(w, i(c(y, 2), 2)));
    for (var E = c(2, m(v(h + h - 1))), D = [...new Array(h).fill(0).map((B, O) => a(N[O], x[h - 1 + O])), ...new Array(E - h).fill(0)], S = [...new Array(h + h - 1).fill(0).map((B, O) => i(1, x[O])), ...new Array(E - (h + h - 1)).fill(0)], A = g(D), C = g(S), T = new Array(E).fill(0).map((B, O) => a(A[O], C[O])), $ = u(s(d(s(T))), E), I = [], R = h - 1; R < h + h - 1; R++)
      I.push(a($[R], x[R]));
    return I;
  }
  function g(N) {
    var h = N.length;
    if (h === 1)
      return [N[0]];
    if (h % 2 === 0) {
      for (var w = [...g(N.filter((D, S) => S % 2 === 0)), ...g(N.filter((D, S) => S % 2 === 1))], x = 0; x < h / 2; x++) {
        var y = w[x], E = a(w[x + h / 2], o(a(a(f, l), i(-x, h))));
        w[x] = n(y, E), w[x + h / 2] = n(y, a(-1, E));
      }
      return w;
    } else
      return b(N);
  }
}), Lm = "ifft", vS = ["typed", "fft", "dotDivide", "conj"], pS = /* @__PURE__ */ q(Lm, vS, (r) => {
  var {
    typed: e,
    fft: t,
    dotDivide: n,
    conj: a
  } = r;
  return e(Lm, {
    "Array | Matrix": function(o) {
      var f = Le(o) ? o.size() : Ye(o);
      return n(a(t(a(o))), f.reduce((l, u) => l * u, 1));
    }
  });
});
function Ei(r) {
  "@babel/helpers - typeof";
  return Ei = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, Ei(r);
}
function dS(r, e) {
  if (Ei(r) != "object" || !r)
    return r;
  var t = r[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(r, e || "default");
    if (Ei(n) != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(r);
}
function hS(r) {
  var e = dS(r, "string");
  return Ei(e) == "symbol" ? e : String(e);
}
function _r(r, e, t) {
  return e = hS(e), e in r ? Object.defineProperty(r, e, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : r[e] = t, r;
}
function zm(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(a) {
      return Object.getOwnPropertyDescriptor(r, a).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function gS(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? zm(Object(t), !0).forEach(function(n) {
      _r(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : zm(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var yS = "solveODE", bS = ["typed", "add", "subtract", "multiply", "divide", "max", "map", "abs", "isPositive", "isNegative", "larger", "smaller", "matrix", "bignumber", "unaryMinus"], xS = /* @__PURE__ */ q(yS, bS, (r) => {
  var {
    typed: e,
    add: t,
    subtract: n,
    multiply: a,
    divide: i,
    max: o,
    map: f,
    abs: l,
    isPositive: u,
    isNegative: s,
    larger: c,
    smaller: m,
    matrix: v,
    bignumber: d,
    unaryMinus: p
  } = r;
  function b(D) {
    return function(S, A, C, T) {
      var $ = !(A.length === 2 && (A.every(y) || A.every(xt)));
      if ($)
        throw new Error('"tspan" must be an Array of two numeric values or two units [tStart, tEnd]');
      var I = A[0], R = A[1], B = c(R, I), O = T.firstStep;
      if (O !== void 0 && !u(O))
        throw new Error('"firstStep" must be positive');
      var G = T.maxStep;
      if (G !== void 0 && !u(G))
        throw new Error('"maxStep" must be positive');
      var _ = T.minStep;
      if (_ && s(_))
        throw new Error('"minStep" must be positive or zero');
      var U = [I, R, O, _, G].filter((P) => P !== void 0);
      if (!(U.every(y) || U.every(xt)))
        throw new Error('Inconsistent type of "t" dependant variables');
      for (var K = 1, j = T.tol ? T.tol : 1e-4, z = T.minDelta ? T.minDelta : 0.2, Q = T.maxDelta ? T.maxDelta : 5, ae = T.maxIter ? T.maxIter : 1e4, re = [I, R, ...C, G, _].some(rr), [fe, de, le, ie] = re ? [d(D.a), d(D.c), d(D.b), d(D.bp)] : [D.a, D.c, D.b, D.bp], ye = O ? B ? O : p(O) : i(n(R, I), K), _e = [I], De = [C], Be = n(le, ie), k = 0, Z = 0, oe = w(B), H = x(B); oe(_e[k], R); ) {
        var W = [];
        ye = H(_e[k], R, ye), W.push(S(_e[k], De[k]));
        for (var te = 1; te < de.length; ++te)
          W.push(S(t(_e[k], a(de[te], ye)), t(De[k], a(ye, fe[te], W))));
        var ge = o(l(f(a(Be, W), (P) => xt(P) ? P.value : P)));
        ge < j && j / ge > 1 / 4 && (_e.push(t(_e[k], ye)), De.push(t(De[k], a(ye, le, W))), k++);
        var ve = 0.84 * (j / ge) ** (1 / 5);
        if (m(ve, z) ? ve = z : c(ve, Q) && (ve = Q), ve = re ? d(ve) : ve, ye = a(ye, ve), G && c(l(ye), G) ? ye = B ? G : p(G) : _ && m(l(ye), _) && (ye = B ? _ : p(_)), Z++, Z > ae)
          throw new Error("Maximum number of iterations reached, try changing options");
      }
      return {
        t: _e,
        y: De
      };
    };
  }
  function g(D, S, A, C) {
    var T = [[], [0.5], [0, 0.75], [0.2222222222222222, 0.3333333333333333, 0.4444444444444444]], $ = [null, 1 / 2, 3 / 4, 1], I = [2 / 9, 1 / 3, 4 / 9, 0], R = [7 / 24, 1 / 4, 1 / 3, 1 / 8], B = {
      a: T,
      c: $,
      b: I,
      bp: R
    };
    return b(B)(D, S, A, C);
  }
  function N(D, S, A, C) {
    var T = [[], [0.2], [0.075, 0.225], [0.9777777777777777, -3.7333333333333334, 3.5555555555555554], [2.9525986892242035, -11.595793324188385, 9.822892851699436, -0.2908093278463649], [2.8462752525252526, -10.757575757575758, 8.906422717743473, 0.2784090909090909, -0.2735313036020583], [0.09114583333333333, 0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096]], $ = [null, 1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1], I = [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84, 0], R = [5179 / 57600, 0, 7571 / 16695, 393 / 640, -92097 / 339200, 187 / 2100, 1 / 40], B = {
      a: T,
      c: $,
      b: I,
      bp: R
    };
    return b(B)(D, S, A, C);
  }
  function h(D, S, A, C) {
    var T = C.method ? C.method : "RK45", $ = {
      RK23: g,
      RK45: N
    };
    if (T.toUpperCase() in $) {
      var I = gS({}, C);
      return delete I.method, $[T.toUpperCase()](D, S, A, I);
    } else {
      var R = Object.keys($).map((O) => '"'.concat(O, '"')), B = "".concat(R.slice(0, -1).join(", "), " and ").concat(R.slice(-1));
      throw new Error('Unavailable method "'.concat(T, '". Available methods are ').concat(B));
    }
  }
  function w(D) {
    return D ? m : c;
  }
  function x(D) {
    var S = D ? c : m;
    return function(A, C, T) {
      var $ = t(A, T);
      return S($, C) ? n(C, A) : T;
    };
  }
  function y(D) {
    return rr(D) || Xe(D);
  }
  function E(D, S, A, C) {
    var T = h(D, S.toArray(), A.toArray(), C);
    return {
      t: v(T.t),
      y: v(T.y)
    };
  }
  return e("solveODE", {
    "function, Array, Array, Object": h,
    "function, Matrix, Matrix, Object": E,
    "function, Array, Array": (D, S, A) => h(D, S, A, {}),
    "function, Matrix, Matrix": (D, S, A) => E(D, S, A, {}),
    "function, Array, number | BigNumber | Unit": (D, S, A) => {
      var C = h(D, S, [A], {});
      return {
        t: C.t,
        y: C.y.map((T) => T[0])
      };
    },
    "function, Matrix, number | BigNumber | Unit": (D, S, A) => {
      var C = h(D, S.toArray(), [A], {});
      return {
        t: v(C.t),
        y: v(C.y.map((T) => T[0]))
      };
    },
    "function, Array, number | BigNumber | Unit, Object": (D, S, A, C) => {
      var T = h(D, S, [A], C);
      return {
        t: T.t,
        y: T.y.map(($) => $[0])
      };
    },
    "function, Matrix, number | BigNumber | Unit, Object": (D, S, A, C) => {
      var T = h(D, S.toArray(), [A], C);
      return {
        t: v(T.t),
        y: v(T.y.map(($) => $[0]))
      };
    }
  });
}), wS = "erf", NS = ["typed"], AS = /* @__PURE__ */ q(wS, NS, (r) => {
  var {
    typed: e
  } = r;
  return e("name", {
    number: function(o) {
      var f = Math.abs(o);
      return f >= SS ? An(o) : f <= ES ? An(o) * t(f) : f <= 4 ? An(o) * (1 - n(f)) : An(o) * (1 - a(f));
    },
    "Array | Matrix": e.referToSelf((i) => (o) => je(o, i))
    // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)
  });
  function t(i) {
    var o = i * i, f = en[0][4] * o, l = o, u;
    for (u = 0; u < 3; u += 1)
      f = (f + en[0][u]) * o, l = (l + ba[0][u]) * o;
    return i * (f + en[0][3]) / (l + ba[0][3]);
  }
  function n(i) {
    var o = en[1][8] * i, f = i, l;
    for (l = 0; l < 7; l += 1)
      o = (o + en[1][l]) * i, f = (f + ba[1][l]) * i;
    var u = (o + en[1][7]) / (f + ba[1][7]), s = parseInt(i * 16) / 16, c = (i - s) * (i + s);
    return Math.exp(-s * s) * Math.exp(-c) * u;
  }
  function a(i) {
    var o = 1 / (i * i), f = en[2][5] * o, l = o, u;
    for (u = 0; u < 4; u += 1)
      f = (f + en[2][u]) * o, l = (l + ba[2][u]) * o;
    var s = o * (f + en[2][4]) / (l + ba[2][4]);
    s = (DS - s) / i, o = parseInt(i * 16) / 16;
    var c = (i - o) * (i + o);
    return Math.exp(-o * o) * Math.exp(-c) * s;
  }
}), ES = 0.46875, DS = 0.5641895835477563, en = [[3.1611237438705655, 113.86415415105016, 377.485237685302, 3209.3775891384694, 0.18577770618460315], [0.5641884969886701, 8.883149794388377, 66.11919063714163, 298.6351381974001, 881.952221241769, 1712.0476126340707, 2051.0783778260716, 1230.3393547979972, 21531153547440383e-24], [0.30532663496123236, 0.36034489994980445, 0.12578172611122926, 0.016083785148742275, 6587491615298378e-19, 0.016315387137302097]], ba = [[23.601290952344122, 244.02463793444417, 1282.6165260773723, 2844.236833439171], [15.744926110709835, 117.6939508913125, 537.1811018620099, 1621.3895745666903, 3290.7992357334597, 4362.619090143247, 3439.3676741437216, 1230.3393548037495], [2.568520192289822, 1.8729528499234604, 0.5279051029514285, 0.06051834131244132, 0.0023352049762686918]], SS = Math.pow(2, 53), Um = "zeta", CS = ["typed", "config", "multiply", "pow", "divide", "factorial", "equal", "smallerEq", "isNegative", "gamma", "sin", "subtract", "add", "?Complex", "?BigNumber", "pi"], MS = /* @__PURE__ */ q(Um, CS, (r) => {
  var {
    typed: e,
    config: t,
    multiply: n,
    pow: a,
    divide: i,
    factorial: o,
    equal: f,
    smallerEq: l,
    isNegative: u,
    gamma: s,
    sin: c,
    subtract: m,
    add: v,
    Complex: d,
    BigNumber: p,
    pi: b
  } = r;
  return e(Um, {
    number: (y) => g(y, (E) => E, () => 20),
    BigNumber: (y) => g(y, (E) => new p(E), () => Math.abs(Math.log10(t.epsilon))),
    Complex: N
  });
  function g(y, E, D) {
    return f(y, 0) ? E(-0.5) : f(y, 1) ? E(NaN) : isFinite(y) ? h(y, E, D, (S) => S) : u(y) ? E(NaN) : E(1);
  }
  function N(y) {
    return y.re === 0 && y.im === 0 ? new d(-0.5) : y.re === 1 ? new d(NaN, NaN) : y.re === 1 / 0 && y.im === 0 ? new d(1) : y.im === 1 / 0 || y.re === -1 / 0 ? new d(NaN, NaN) : h(y, (E) => E, (E) => Math.round(1.3 * 15 + 0.9 * Math.abs(E.im)), (E) => E.re);
  }
  function h(y, E, D, S) {
    var A = D(y);
    if (S(y) > -(A - 1) / 2)
      return x(y, E(A), E);
    var C = n(a(2, y), a(E(b), m(y, 1)));
    return C = n(C, c(n(i(E(b), 2), y))), C = n(C, s(m(1, y))), n(C, h(m(1, y), E, D, S));
  }
  function w(y, E) {
    for (var D = y, S = y; l(S, E); S = v(S, 1)) {
      var A = i(n(o(v(E, m(S, 1))), a(4, S)), n(o(m(E, S)), o(n(2, S))));
      D = v(D, A);
    }
    return n(E, D);
  }
  function x(y, E, D) {
    for (var S = i(1, n(w(D(0), E), m(1, a(2, m(1, y))))), A = D(0), C = D(1); l(C, E); C = v(C, 1))
      A = v(A, i(n((-1) ** (C - 1), w(C, E)), a(C, y)));
    return n(S, A);
  }
}), km = "mode", OS = ["typed", "isNaN", "isNumeric"], TS = /* @__PURE__ */ q(km, OS, (r) => {
  var {
    typed: e,
    isNaN: t,
    isNumeric: n
  } = r;
  return e(km, {
    "Array | Matrix": a,
    "...": function(o) {
      return a(o);
    }
  });
  function a(i) {
    i = or(i.valueOf());
    var o = i.length;
    if (o === 0)
      throw new Error("Cannot calculate mode of an empty array");
    for (var f = {}, l = [], u = 0, s = 0; s < i.length; s++) {
      var c = i[s];
      if (n(c) && t(c))
        throw new Error("Cannot calculate mode of an array containing NaN values");
      c in f || (f[c] = 0), f[c]++, f[c] === u ? l.push(c) : f[c] > u && (u = f[c], l = [c]);
    }
    return l;
  }
});
function at(r, e, t) {
  var n;
  return String(r).indexOf("Unexpected type") !== -1 ? (n = arguments.length > 2 ? " (type: " + hr(t) + ", value: " + JSON.stringify(t) + ")" : " (type: " + r.data.actual + ")", new TypeError("Cannot calculate " + e + ", unexpected type of argument" + n)) : String(r).indexOf("complex numbers") !== -1 ? (n = arguments.length > 2 ? " (type: " + hr(t) + ", value: " + JSON.stringify(t) + ")" : "", new TypeError("Cannot calculate " + e + ", no ordering relation is defined for complex numbers" + n)) : r;
}
var Gm = "prod", BS = ["typed", "config", "multiplyScalar", "numeric"], _S = /* @__PURE__ */ q(Gm, BS, (r) => {
  var {
    typed: e,
    config: t,
    multiplyScalar: n,
    numeric: a
  } = r;
  return e(Gm, {
    // prod([a, b, c, d, ...])
    "Array | Matrix": i,
    // prod([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(f, l) {
      throw new Error("prod(A, dim) is not yet supported");
    },
    // prod(a, b, c, d, ...)
    "...": function(f) {
      return i(f);
    }
  });
  function i(o) {
    var f;
    if (ln(o, function(l) {
      try {
        f = f === void 0 ? l : n(f, l);
      } catch (u) {
        throw at(u, "prod", l);
      }
    }), typeof f == "string" && (f = a(f, t.number)), f === void 0)
      throw new Error("Cannot calculate prod of an empty array");
    return f;
  }
}), Vm = "format", FS = ["typed"], $S = /* @__PURE__ */ q(Vm, FS, (r) => {
  var {
    typed: e
  } = r;
  return e(Vm, {
    any: Je,
    "any, Object | function | number": Je
  });
}), Hm = "bin", RS = ["typed", "format"], IS = q(Hm, RS, (r) => {
  var {
    typed: e,
    format: t
  } = r;
  return e(Hm, {
    "number | BigNumber": function(a) {
      return t(a, {
        notation: "bin"
      });
    },
    "number | BigNumber, number": function(a, i) {
      return t(a, {
        notation: "bin",
        wordSize: i
      });
    }
  });
}), Zm = "oct", PS = ["typed", "format"], qS = q(Zm, PS, (r) => {
  var {
    typed: e,
    format: t
  } = r;
  return e(Zm, {
    "number | BigNumber": function(a) {
      return t(a, {
        notation: "oct"
      });
    },
    "number | BigNumber, number": function(a, i) {
      return t(a, {
        notation: "oct",
        wordSize: i
      });
    }
  });
}), Ym = "hex", LS = ["typed", "format"], zS = q(Ym, LS, (r) => {
  var {
    typed: e,
    format: t
  } = r;
  return e(Ym, {
    "number | BigNumber": function(a) {
      return t(a, {
        notation: "hex"
      });
    },
    "number | BigNumber, number": function(a, i) {
      return t(a, {
        notation: "hex",
        wordSize: i
      });
    }
  });
}), eg = /\$([\w.]+)/g, Wm = "print", US = ["typed"], rg = /* @__PURE__ */ q(Wm, US, (r) => {
  var {
    typed: e
  } = r;
  return e(Wm, {
    // note: Matrix will be converted automatically to an Array
    "string, Object | Array": Jm,
    "string, Object | Array, number | Object": Jm
  });
});
function Jm(r, e, t) {
  return r.replace(eg, function(n, a) {
    var i = a.split("."), o = e[i.shift()];
    for (o !== void 0 && o.isMatrix && (o = o.toArray()); i.length && o !== void 0; ) {
      var f = i.shift();
      o = f ? o[f] : o + ".";
    }
    return o !== void 0 ? Hr(o) ? o : Je(o, t) : n;
  });
}
var Xm = "to", kS = ["typed", "matrix", "concat"], GS = /* @__PURE__ */ q(Xm, kS, (r) => {
  var {
    typed: e,
    matrix: t,
    concat: n
  } = r, a = br({
    typed: e,
    matrix: t,
    concat: n
  });
  return e(Xm, {
    "Unit, Unit | string": (i, o) => i.to(o)
  }, a({
    Ds: !0
  }));
}), Km = "isPrime", VS = ["typed"], HS = /* @__PURE__ */ q(Km, VS, (r) => {
  var {
    typed: e
  } = r;
  return e(Km, {
    number: function(n) {
      if (n * 0 !== 0)
        return !1;
      if (n <= 3)
        return n > 1;
      if (n % 2 === 0 || n % 3 === 0)
        return !1;
      for (var a = 5; a * a <= n; a += 6)
        if (n % a === 0 || n % (a + 2) === 0)
          return !1;
      return !0;
    },
    BigNumber: function(n) {
      if (n.toNumber() * 0 !== 0)
        return !1;
      if (n.lte(3))
        return n.gt(1);
      if (n.mod(2).eq(0) || n.mod(3).eq(0))
        return !1;
      if (n.lt(Math.pow(2, 32))) {
        for (var a = n.toNumber(), i = 5; i * i <= a; i += 6)
          if (a % i === 0 || a % (i + 2) === 0)
            return !1;
        return !0;
      }
      function o(N, h, w) {
        for (var x = 1; !h.eq(0); )
          h.mod(2).eq(0) ? (h = h.div(2), N = N.mul(N).mod(w)) : (h = h.sub(1), x = N.mul(x).mod(w));
        return x;
      }
      var f = n.constructor.clone({
        precision: n.toFixed(0).length * 2
      });
      n = new f(n);
      for (var l = 0, u = n.sub(1); u.mod(2).eq(0); )
        u = u.div(2), l += 1;
      var s = null;
      if (n.lt("3317044064679887385961981"))
        s = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter((N) => N < n);
      else {
        var c = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));
        s = [];
        for (var m = 2; m <= c; m += 1)
          s.push(c);
      }
      for (var v = 0; v < s.length; v += 1) {
        var d = s[v], p = o(n.sub(n).add(d), u, n);
        if (!p.eq(1)) {
          for (var b = 0, g = p; !g.eq(n.sub(1)); b += 1, g = g.mul(g).mod(n))
            if (b === l - 1)
              return !1;
        }
      }
      return !0;
    },
    "Array | Matrix": e.referToSelf((t) => (n) => je(n, t))
  });
}), ZS = "numeric", YS = ["number", "?bignumber", "?fraction"], WS = /* @__PURE__ */ q(ZS, YS, (r) => {
  var {
    number: e,
    bignumber: t,
    fraction: n
  } = r, a = {
    string: !0,
    number: !0,
    BigNumber: !0,
    Fraction: !0
  }, i = {
    number: (o) => e(o),
    BigNumber: t ? (o) => t(o) : zc,
    Fraction: n ? (o) => n(o) : J0
  };
  return function(f) {
    var l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "number", u = arguments.length > 2 ? arguments[2] : void 0;
    if (u !== void 0)
      throw new SyntaxError("numeric() takes one or two arguments");
    var s = hr(f);
    if (!(s in a))
      throw new TypeError("Cannot convert " + f + ' of type "' + s + '"; valid input types are ' + Object.keys(a).join(", "));
    if (!(l in i))
      throw new TypeError("Cannot convert " + f + ' to type "' + l + '"; valid output types are ' + Object.keys(i).join(", "));
    return l === s ? f : i[l](f);
  };
}), Qm = "divideScalar", JS = ["typed", "numeric"], XS = /* @__PURE__ */ q(Qm, JS, (r) => {
  var {
    typed: e,
    numeric: t
  } = r;
  return e(Qm, {
    "number, number": function(a, i) {
      return a / i;
    },
    "Complex, Complex": function(a, i) {
      return a.div(i);
    },
    "BigNumber, BigNumber": function(a, i) {
      return a.div(i);
    },
    "Fraction, Fraction": function(a, i) {
      return a.div(i);
    },
    "Unit, number | Complex | Fraction | BigNumber | Unit": (n, a) => n.divide(a),
    "number | Fraction | Complex | BigNumber, Unit": (n, a) => a.divideInto(n)
  });
}), jm = "pow", KS = ["typed", "config", "identity", "multiply", "matrix", "inv", "fraction", "number", "Complex"], QS = /* @__PURE__ */ q(jm, KS, (r) => {
  var {
    typed: e,
    config: t,
    identity: n,
    multiply: a,
    matrix: i,
    inv: o,
    number: f,
    fraction: l,
    Complex: u
  } = r;
  return e(jm, {
    "number, number": s,
    "Complex, Complex": function(d, p) {
      return d.pow(p);
    },
    "BigNumber, BigNumber": function(d, p) {
      return p.isInteger() || d >= 0 || t.predictable ? d.pow(p) : new u(d.toNumber(), 0).pow(p.toNumber(), 0);
    },
    "Fraction, Fraction": function(d, p) {
      var b = d.pow(p);
      if (b != null)
        return b;
      if (t.predictable)
        throw new Error("Result of pow is non-rational and cannot be expressed as a fraction");
      return s(d.valueOf(), p.valueOf());
    },
    "Array, number": c,
    "Array, BigNumber": function(d, p) {
      return c(d, p.toNumber());
    },
    "Matrix, number": m,
    "Matrix, BigNumber": function(d, p) {
      return m(d, p.toNumber());
    },
    "Unit, number | BigNumber": function(d, p) {
      return d.pow(p);
    }
  });
  function s(v, d) {
    if (t.predictable && !Ie(d) && v < 0)
      try {
        var p = l(d), b = f(p);
        if ((d === b || Math.abs((d - b) / d) < 1e-14) && p.d % 2 === 1)
          return (p.n % 2 === 0 ? 1 : -1) * Math.pow(-v, d);
      } catch {
      }
    return t.predictable && (v < -1 && d === 1 / 0 || v > -1 && v < 0 && d === -1 / 0) ? NaN : Ie(d) || v >= 0 || t.predictable ? u0(v, d) : v * v < 1 && d === 1 / 0 || v * v > 1 && d === -1 / 0 ? 0 : new u(v, 0).pow(d, 0);
  }
  function c(v, d) {
    if (!Ie(d))
      throw new TypeError("For A^b, b must be an integer (value is " + d + ")");
    var p = Ye(v);
    if (p.length !== 2)
      throw new Error("For A^b, A must be 2 dimensional (A has " + p.length + " dimensions)");
    if (p[0] !== p[1])
      throw new Error("For A^b, A must be square (size is " + p[0] + "x" + p[1] + ")");
    if (d < 0)
      try {
        return c(o(v), -d);
      } catch (N) {
        throw N.message === "Cannot calculate inverse, determinant is zero" ? new TypeError("For A^b, when A is not invertible, b must be a positive integer (value is " + d + ")") : N;
      }
    for (var b = n(p[0]).valueOf(), g = v; d >= 1; )
      (d & 1) === 1 && (b = a(g, b)), d >>= 1, g = a(g, g);
    return b;
  }
  function m(v, d) {
    return i(c(v.valueOf(), d));
  }
}), xa = "Number of decimals in function round must be an integer", ev = "round", jS = ["typed", "matrix", "equalScalar", "zeros", "BigNumber", "DenseMatrix"], eC = /* @__PURE__ */ q(ev, jS, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: a,
    BigNumber: i,
    DenseMatrix: o
  } = r, f = Gr({
    typed: e,
    equalScalar: n
  }), l = Fr({
    typed: e,
    DenseMatrix: o
  }), u = Pt({
    typed: e
  });
  return e(ev, {
    number: hf,
    "number, number": hf,
    "number, BigNumber": function(c, m) {
      if (!m.isInteger())
        throw new TypeError(xa);
      return new i(c).toDecimalPlaces(m.toNumber());
    },
    Complex: function(c) {
      return c.round();
    },
    "Complex, number": function(c, m) {
      if (m % 1)
        throw new TypeError(xa);
      return c.round(m);
    },
    "Complex, BigNumber": function(c, m) {
      if (!m.isInteger())
        throw new TypeError(xa);
      var v = m.toNumber();
      return c.round(v);
    },
    BigNumber: function(c) {
      return c.toDecimalPlaces(0);
    },
    "BigNumber, BigNumber": function(c, m) {
      if (!m.isInteger())
        throw new TypeError(xa);
      return c.toDecimalPlaces(m.toNumber());
    },
    Fraction: function(c) {
      return c.round();
    },
    "Fraction, number": function(c, m) {
      if (m % 1)
        throw new TypeError(xa);
      return c.round(m);
    },
    "Fraction, BigNumber": function(c, m) {
      if (!m.isInteger())
        throw new TypeError(xa);
      return c.round(m.toNumber());
    },
    // deep map collection, skip zeros since round(0) = 0
    "Array | Matrix": e.referToSelf((s) => (c) => je(c, s)),
    "SparseMatrix, number | BigNumber": e.referToSelf((s) => (c, m) => f(c, m, s, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((s) => (c, m) => u(c, m, s, !1)),
    "Array, number | BigNumber": e.referToSelf((s) => (c, m) => u(t(c), m, s, !1).valueOf()),
    "number | Complex | BigNumber | Fraction, SparseMatrix": e.referToSelf((s) => (c, m) => n(c, 0) ? a(m.size(), m.storage()) : l(m, c, s, !0)),
    "number | Complex | BigNumber | Fraction, DenseMatrix": e.referToSelf((s) => (c, m) => n(c, 0) ? a(m.size(), m.storage()) : u(m, c, s, !0)),
    "number | Complex | BigNumber | Fraction, Array": e.referToSelf((s) => (c, m) => u(t(m), c, s, !0).valueOf())
  });
}), rv = "log", rC = ["config", "typed", "divideScalar", "Complex"], tC = /* @__PURE__ */ q(rv, rC, (r) => {
  var {
    typed: e,
    config: t,
    divideScalar: n,
    Complex: a
  } = r;
  return e(rv, {
    number: function(o) {
      return o >= 0 || t.predictable ? KN(o) : new a(o, 0).log();
    },
    Complex: function(o) {
      return o.log();
    },
    BigNumber: function(o) {
      return !o.isNegative() || t.predictable ? o.ln() : new a(o.toNumber(), 0).log();
    },
    "any, any": e.referToSelf((i) => (o, f) => n(i(o), i(f)))
  });
}), tv = "log1p", nC = ["typed", "config", "divideScalar", "log", "Complex"], aC = /* @__PURE__ */ q(tv, nC, (r) => {
  var {
    typed: e,
    config: t,
    divideScalar: n,
    log: a,
    Complex: i
  } = r;
  return e(tv, {
    number: function(l) {
      return l >= -1 || t.predictable ? Jx(l) : o(new i(l, 0));
    },
    Complex: o,
    BigNumber: function(l) {
      var u = l.plus(1);
      return !u.isNegative() || t.predictable ? u.ln() : o(new i(l.toNumber(), 0));
    },
    "Array | Matrix": e.referToSelf((f) => (l) => je(l, f)),
    "any, any": e.referToSelf((f) => (l, u) => n(f(l), a(u)))
  });
  function o(f) {
    var l = f.re + 1;
    return new i(Math.log(Math.sqrt(l * l + f.im * f.im)), Math.atan2(f.im, l));
  }
}), nv = "nthRoots", iC = ["config", "typed", "divideScalar", "Complex"], oC = /* @__PURE__ */ q(nv, iC, (r) => {
  var {
    typed: e,
    config: t,
    divideScalar: n,
    Complex: a
  } = r, i = [function(l) {
    return new a(l, 0);
  }, function(l) {
    return new a(0, l);
  }, function(l) {
    return new a(-l, 0);
  }, function(l) {
    return new a(0, -l);
  }];
  function o(f, l) {
    if (l < 0)
      throw new Error("Root must be greater than zero");
    if (l === 0)
      throw new Error("Root must be non-zero");
    if (l % 1 !== 0)
      throw new Error("Root must be an integer");
    if (f === 0 || f.abs() === 0)
      return [new a(0, 0)];
    var u = typeof f == "number", s;
    (u || f.re === 0 || f.im === 0) && (u ? s = 2 * +(f < 0) : f.im === 0 ? s = 2 * +(f.re < 0) : s = 2 * +(f.im < 0) + 1);
    for (var c = f.arg(), m = f.abs(), v = [], d = Math.pow(m, 1 / l), p = 0; p < l; p++) {
      var b = (s + 4 * p) / l;
      if (b === Math.round(b)) {
        v.push(i[b % 4](d));
        continue;
      }
      v.push(new a({
        r: d,
        phi: (c + 2 * Math.PI * p) / l
      }));
    }
    return v;
  }
  return e(nv, {
    Complex: function(l) {
      return o(l, 2);
    },
    "Complex, number": o
  });
}), av = "dotPow", sC = ["typed", "equalScalar", "matrix", "pow", "DenseMatrix", "concat"], uC = /* @__PURE__ */ q(av, sC, (r) => {
  var {
    typed: e,
    equalScalar: t,
    matrix: n,
    pow: a,
    DenseMatrix: i,
    concat: o
  } = r, f = ot({
    typed: e
  }), l = Jt({
    typed: e,
    DenseMatrix: i
  }), u = Gr({
    typed: e,
    equalScalar: t
  }), s = Fr({
    typed: e,
    DenseMatrix: i
  }), c = br({
    typed: e,
    matrix: n,
    concat: o
  }), m = {};
  for (var v in a.signatures)
    Object.prototype.hasOwnProperty.call(a.signatures, v) && !v.includes("Matrix") && !v.includes("Array") && (m[v] = a.signatures[v]);
  var d = e(m);
  return e(av, c({
    elop: d,
    SS: l,
    DS: f,
    Ss: u,
    sS: s
  }));
}), iv = "dotDivide", cC = ["typed", "matrix", "equalScalar", "divideScalar", "DenseMatrix", "concat"], lC = /* @__PURE__ */ q(iv, cC, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    divideScalar: a,
    DenseMatrix: i,
    concat: o
  } = r, f = qt({
    typed: e,
    equalScalar: n
  }), l = ot({
    typed: e
  }), u = Jt({
    typed: e,
    DenseMatrix: i
  }), s = Gr({
    typed: e,
    equalScalar: n
  }), c = Fr({
    typed: e,
    DenseMatrix: i
  }), m = br({
    typed: e,
    matrix: t,
    concat: o
  });
  return e(iv, m({
    elop: a,
    SS: u,
    DS: l,
    SD: f,
    Ss: s,
    sS: c
  }));
});
function Oi(r) {
  var {
    DenseMatrix: e
  } = r;
  return function(n, a, i) {
    var o = n.size();
    if (o.length !== 2)
      throw new RangeError("Matrix must be two dimensional (size: " + Je(o) + ")");
    var f = o[0], l = o[1];
    if (f !== l)
      throw new RangeError("Matrix must be square (size: " + Je(o) + ")");
    var u = [];
    if (Le(a)) {
      var s = a.size(), c = a._data;
      if (s.length === 1) {
        if (s[0] !== f)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        for (var m = 0; m < f; m++)
          u[m] = [c[m]];
        return new e({
          data: u,
          size: [f, 1],
          datatype: a._datatype
        });
      }
      if (s.length === 2) {
        if (s[0] !== f || s[1] !== 1)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        if (Oo(a)) {
          if (i) {
            u = [];
            for (var v = 0; v < f; v++)
              u[v] = [c[v][0]];
            return new e({
              data: u,
              size: [f, 1],
              datatype: a._datatype
            });
          }
          return a;
        }
        if (Vn(a)) {
          for (var d = 0; d < f; d++)
            u[d] = [0];
          for (var p = a._values, b = a._index, g = a._ptr, N = g[1], h = g[0]; h < N; h++) {
            var w = b[h];
            u[w][0] = p[h];
          }
          return new e({
            data: u,
            size: [f, 1],
            datatype: a._datatype
          });
        }
      }
      throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.");
    }
    if (sr(a)) {
      var x = Ye(a);
      if (x.length === 1) {
        if (x[0] !== f)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        for (var y = 0; y < f; y++)
          u[y] = [a[y]];
        return new e({
          data: u,
          size: [f, 1]
        });
      }
      if (x.length === 2) {
        if (x[0] !== f || x[1] !== 1)
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        for (var E = 0; E < f; E++)
          u[E] = [a[E][0]];
        return new e({
          data: u,
          size: [f, 1]
        });
      }
      throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.");
    }
  };
}
var ov = "lsolve", fC = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], mC = /* @__PURE__ */ q(ov, fC, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: a,
    subtractScalar: i,
    equalScalar: o,
    DenseMatrix: f
  } = r, l = Oi({
    DenseMatrix: f
  });
  return e(ov, {
    "SparseMatrix, Array | Matrix": function(m, v) {
      return s(m, v);
    },
    "DenseMatrix, Array | Matrix": function(m, v) {
      return u(m, v);
    },
    "Array, Array | Matrix": function(m, v) {
      var d = t(m), p = u(d, v);
      return p.valueOf();
    }
  });
  function u(c, m) {
    m = l(c, m, !0);
    for (var v = m._data, d = c._size[0], p = c._size[1], b = [], g = c._data, N = 0; N < p; N++) {
      var h = v[N][0] || 0, w = void 0;
      if (o(h, 0))
        w = 0;
      else {
        var x = g[N][N];
        if (o(x, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        w = n(h, x);
        for (var y = N + 1; y < d; y++)
          v[y] = [i(v[y][0] || 0, a(w, g[y][N]))];
      }
      b[N] = [w];
    }
    return new f({
      data: b,
      size: [d, 1]
    });
  }
  function s(c, m) {
    m = l(c, m, !0);
    for (var v = m._data, d = c._size[0], p = c._size[1], b = c._values, g = c._index, N = c._ptr, h = [], w = 0; w < p; w++) {
      var x = v[w][0] || 0;
      if (o(x, 0))
        h[w] = [0];
      else {
        for (var y = 0, E = [], D = [], S = N[w], A = N[w + 1], C = S; C < A; C++) {
          var T = g[C];
          T === w ? y = b[C] : T > w && (E.push(b[C]), D.push(T));
        }
        if (o(y, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        for (var $ = n(x, y), I = 0, R = D.length; I < R; I++) {
          var B = D[I];
          v[B] = [i(v[B][0] || 0, a($, E[I]))];
        }
        h[w] = [$];
      }
    }
    return new f({
      data: h,
      size: [d, 1]
    });
  }
}), sv = "usolve", vC = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], pC = /* @__PURE__ */ q(sv, vC, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: a,
    subtractScalar: i,
    equalScalar: o,
    DenseMatrix: f
  } = r, l = Oi({
    DenseMatrix: f
  });
  return e(sv, {
    "SparseMatrix, Array | Matrix": function(m, v) {
      return s(m, v);
    },
    "DenseMatrix, Array | Matrix": function(m, v) {
      return u(m, v);
    },
    "Array, Array | Matrix": function(m, v) {
      var d = t(m), p = u(d, v);
      return p.valueOf();
    }
  });
  function u(c, m) {
    m = l(c, m, !0);
    for (var v = m._data, d = c._size[0], p = c._size[1], b = [], g = c._data, N = p - 1; N >= 0; N--) {
      var h = v[N][0] || 0, w = void 0;
      if (o(h, 0))
        w = 0;
      else {
        var x = g[N][N];
        if (o(x, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        w = n(h, x);
        for (var y = N - 1; y >= 0; y--)
          v[y] = [i(v[y][0] || 0, a(w, g[y][N]))];
      }
      b[N] = [w];
    }
    return new f({
      data: b,
      size: [d, 1]
    });
  }
  function s(c, m) {
    m = l(c, m, !0);
    for (var v = m._data, d = c._size[0], p = c._size[1], b = c._values, g = c._index, N = c._ptr, h = [], w = p - 1; w >= 0; w--) {
      var x = v[w][0] || 0;
      if (o(x, 0))
        h[w] = [0];
      else {
        for (var y = 0, E = [], D = [], S = N[w], A = N[w + 1], C = A - 1; C >= S; C--) {
          var T = g[C];
          T === w ? y = b[C] : T < w && (E.push(b[C]), D.push(T));
        }
        if (o(y, 0))
          throw new Error("Linear system cannot be solved since matrix is singular");
        for (var $ = n(x, y), I = 0, R = D.length; I < R; I++) {
          var B = D[I];
          v[B] = [i(v[B][0], a($, E[I]))];
        }
        h[w] = [$];
      }
    }
    return new f({
      data: h,
      size: [d, 1]
    });
  }
}), uv = "lsolveAll", dC = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], hC = /* @__PURE__ */ q(uv, dC, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: a,
    subtractScalar: i,
    equalScalar: o,
    DenseMatrix: f
  } = r, l = Oi({
    DenseMatrix: f
  });
  return e(uv, {
    "SparseMatrix, Array | Matrix": function(m, v) {
      return s(m, v);
    },
    "DenseMatrix, Array | Matrix": function(m, v) {
      return u(m, v);
    },
    "Array, Array | Matrix": function(m, v) {
      var d = t(m), p = u(d, v);
      return p.map((b) => b.valueOf());
    }
  });
  function u(c, m) {
    for (var v = [l(c, m, !0)._data.map((D) => D[0])], d = c._data, p = c._size[0], b = c._size[1], g = 0; g < b; g++)
      for (var N = v.length, h = 0; h < N; h++) {
        var w = v[h];
        if (o(d[g][g], 0))
          if (o(w[g], 0)) {
            if (h === 0) {
              var y = [...w];
              y[g] = 1;
              for (var E = g + 1; E < b; E++)
                y[E] = i(y[E], d[E][g]);
              v.push(y);
            }
          } else {
            if (h === 0)
              return [];
            v.splice(h, 1), h -= 1, N -= 1;
          }
        else {
          w[g] = n(w[g], d[g][g]);
          for (var x = g + 1; x < b; x++)
            w[x] = i(w[x], a(w[g], d[x][g]));
        }
      }
    return v.map((D) => new f({
      data: D.map((S) => [S]),
      size: [p, 1]
    }));
  }
  function s(c, m) {
    for (var v = [l(c, m, !0)._data.map((K) => K[0])], d = c._size[0], p = c._size[1], b = c._values, g = c._index, N = c._ptr, h = 0; h < p; h++)
      for (var w = v.length, x = 0; x < w; x++) {
        for (var y = v[x], E = [], D = [], S = N[h], A = N[h + 1], C = 0, T = S; T < A; T++) {
          var $ = g[T];
          $ === h ? C = b[T] : $ > h && (E.push(b[T]), D.push($));
        }
        if (o(C, 0))
          if (o(y[h], 0)) {
            if (x === 0) {
              var O = [...y];
              O[h] = 1;
              for (var G = 0, _ = D.length; G < _; G++) {
                var U = D[G];
                O[U] = i(O[U], E[G]);
              }
              v.push(O);
            }
          } else {
            if (x === 0)
              return [];
            v.splice(x, 1), x -= 1, w -= 1;
          }
        else {
          y[h] = n(y[h], C);
          for (var I = 0, R = D.length; I < R; I++) {
            var B = D[I];
            y[B] = i(y[B], a(y[h], E[I]));
          }
        }
      }
    return v.map((K) => new f({
      data: K.map((j) => [j]),
      size: [d, 1]
    }));
  }
}), cv = "usolveAll", gC = ["typed", "matrix", "divideScalar", "multiplyScalar", "subtractScalar", "equalScalar", "DenseMatrix"], yC = /* @__PURE__ */ q(cv, gC, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    multiplyScalar: a,
    subtractScalar: i,
    equalScalar: o,
    DenseMatrix: f
  } = r, l = Oi({
    DenseMatrix: f
  });
  return e(cv, {
    "SparseMatrix, Array | Matrix": function(m, v) {
      return s(m, v);
    },
    "DenseMatrix, Array | Matrix": function(m, v) {
      return u(m, v);
    },
    "Array, Array | Matrix": function(m, v) {
      var d = t(m), p = u(d, v);
      return p.map((b) => b.valueOf());
    }
  });
  function u(c, m) {
    for (var v = [l(c, m, !0)._data.map((D) => D[0])], d = c._data, p = c._size[0], b = c._size[1], g = b - 1; g >= 0; g--)
      for (var N = v.length, h = 0; h < N; h++) {
        var w = v[h];
        if (o(d[g][g], 0))
          if (o(w[g], 0)) {
            if (h === 0) {
              var y = [...w];
              y[g] = 1;
              for (var E = g - 1; E >= 0; E--)
                y[E] = i(y[E], d[E][g]);
              v.push(y);
            }
          } else {
            if (h === 0)
              return [];
            v.splice(h, 1), h -= 1, N -= 1;
          }
        else {
          w[g] = n(w[g], d[g][g]);
          for (var x = g - 1; x >= 0; x--)
            w[x] = i(w[x], a(w[g], d[x][g]));
        }
      }
    return v.map((D) => new f({
      data: D.map((S) => [S]),
      size: [p, 1]
    }));
  }
  function s(c, m) {
    for (var v = [l(c, m, !0)._data.map((K) => K[0])], d = c._size[0], p = c._size[1], b = c._values, g = c._index, N = c._ptr, h = p - 1; h >= 0; h--)
      for (var w = v.length, x = 0; x < w; x++) {
        for (var y = v[x], E = [], D = [], S = N[h], A = N[h + 1], C = 0, T = A - 1; T >= S; T--) {
          var $ = g[T];
          $ === h ? C = b[T] : $ < h && (E.push(b[T]), D.push($));
        }
        if (o(C, 0))
          if (o(y[h], 0)) {
            if (x === 0) {
              var O = [...y];
              O[h] = 1;
              for (var G = 0, _ = D.length; G < _; G++) {
                var U = D[G];
                O[U] = i(O[U], E[G]);
              }
              v.push(O);
            }
          } else {
            if (x === 0)
              return [];
            v.splice(x, 1), x -= 1, w -= 1;
          }
        else {
          y[h] = n(y[h], C);
          for (var I = 0, R = D.length; I < R; I++) {
            var B = D[I];
            y[B] = i(y[B], a(y[h], E[I]));
          }
        }
      }
    return v.map((K) => new f({
      data: K.map((j) => [j]),
      size: [d, 1]
    }));
  }
}), bC = "matAlgo08xS0Sid", xC = ["typed", "equalScalar"], Uc = /* @__PURE__ */ q(bC, xC, (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return function(a, i, o) {
    var f = a._values, l = a._index, u = a._ptr, s = a._size, c = a._datatype, m = i._values, v = i._index, d = i._ptr, p = i._size, b = i._datatype;
    if (s.length !== p.length)
      throw new Ke(s.length, p.length);
    if (s[0] !== p[0] || s[1] !== p[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + s + ") must match Matrix B (" + p + ")");
    if (!f || !m)
      throw new Error("Cannot perform operation on Pattern Sparse Matrices");
    var g = s[0], N = s[1], h, w = t, x = 0, y = o;
    typeof c == "string" && c === b && (h = c, w = e.find(t, [h, h]), x = e.convert(0, h), y = e.find(o, [h, h]));
    for (var E = [], D = [], S = [], A = [], C = [], T, $, I, R, B = 0; B < N; B++) {
      S[B] = D.length;
      var O = B + 1;
      for ($ = u[B], I = u[B + 1], T = $; T < I; T++)
        R = l[T], C[R] = O, A[R] = f[T], D.push(R);
      for ($ = d[B], I = d[B + 1], T = $; T < I; T++)
        R = v[T], C[R] === O && (A[R] = y(A[R], m[T]));
      for (T = S[B]; T < D.length; ) {
        R = D[T];
        var G = A[R];
        w(G, x) ? D.splice(T, 1) : (E.push(G), T++);
      }
    }
    return S[N] = D.length, a.createSparseMatrix({
      values: E,
      index: D,
      ptr: S,
      size: [g, N],
      datatype: h
    });
  };
}), kc = /* @__PURE__ */ q("useMatrixForArrayScalar", ["typed", "matrix"], (r) => {
  var {
    typed: e,
    matrix: t
  } = r;
  return {
    "Array, number": e.referTo("DenseMatrix, number", (n) => (a, i) => n(t(a), i).valueOf()),
    "Array, BigNumber": e.referTo("DenseMatrix, BigNumber", (n) => (a, i) => n(t(a), i).valueOf()),
    "number, Array": e.referTo("number, DenseMatrix", (n) => (a, i) => n(a, t(i)).valueOf()),
    "BigNumber, Array": e.referTo("BigNumber, DenseMatrix", (n) => (a, i) => n(a, t(i)).valueOf())
  };
}), lv = "leftShift", wC = ["typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], NC = /* @__PURE__ */ q(lv, wC, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: a,
    DenseMatrix: i,
    concat: o
  } = r, f = _n({
    typed: e
  }), l = qt({
    typed: e,
    equalScalar: n
  }), u = Uc({
    typed: e,
    equalScalar: n
  }), s = Kn({
    typed: e,
    DenseMatrix: i
  }), c = Gr({
    typed: e,
    equalScalar: n
  }), m = Pt({
    typed: e
  }), v = br({
    typed: e,
    matrix: t,
    concat: o
  }), d = kc({
    typed: e,
    matrix: t
  });
  return e(lv, {
    "number, number": v0,
    "BigNumber, BigNumber": L2,
    "SparseMatrix, number | BigNumber": e.referToSelf((p) => (b, g) => n(g, 0) ? b.clone() : c(b, g, p, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((p) => (b, g) => n(g, 0) ? b.clone() : m(b, g, p, !1)),
    "number | BigNumber, SparseMatrix": e.referToSelf((p) => (b, g) => n(b, 0) ? a(g.size(), g.storage()) : s(g, b, p, !0)),
    "number | BigNumber, DenseMatrix": e.referToSelf((p) => (b, g) => n(b, 0) ? a(g.size(), g.storage()) : m(g, b, p, !0))
  }, d, v({
    SS: u,
    DS: f,
    SD: l
  }));
}), fv = "rightArithShift", AC = ["typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], EC = /* @__PURE__ */ q(fv, AC, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: a,
    DenseMatrix: i,
    concat: o
  } = r, f = _n({
    typed: e
  }), l = qt({
    typed: e,
    equalScalar: n
  }), u = Uc({
    typed: e,
    equalScalar: n
  }), s = Kn({
    typed: e,
    DenseMatrix: i
  }), c = Gr({
    typed: e,
    equalScalar: n
  }), m = Pt({
    typed: e
  }), v = br({
    typed: e,
    matrix: t,
    concat: o
  }), d = kc({
    typed: e,
    matrix: t
  });
  return e(fv, {
    "number, number": p0,
    "BigNumber, BigNumber": z2,
    "SparseMatrix, number | BigNumber": e.referToSelf((p) => (b, g) => n(g, 0) ? b.clone() : c(b, g, p, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((p) => (b, g) => n(g, 0) ? b.clone() : m(b, g, p, !1)),
    "number | BigNumber, SparseMatrix": e.referToSelf((p) => (b, g) => n(b, 0) ? a(g.size(), g.storage()) : s(g, b, p, !0)),
    "number | BigNumber, DenseMatrix": e.referToSelf((p) => (b, g) => n(b, 0) ? a(g.size(), g.storage()) : m(g, b, p, !0))
  }, d, v({
    SS: u,
    DS: f,
    SD: l
  }));
}), mv = "rightLogShift", DC = ["typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "concat"], SC = /* @__PURE__ */ q(mv, DC, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: a,
    DenseMatrix: i,
    concat: o
  } = r, f = _n({
    typed: e
  }), l = qt({
    typed: e,
    equalScalar: n
  }), u = Uc({
    typed: e,
    equalScalar: n
  }), s = Kn({
    typed: e,
    DenseMatrix: i
  }), c = Gr({
    typed: e,
    equalScalar: n
  }), m = Pt({
    typed: e
  }), v = br({
    typed: e,
    matrix: t,
    concat: o
  }), d = kc({
    typed: e,
    matrix: t
  });
  return e(mv, {
    "number, number": d0,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    "SparseMatrix, number | BigNumber": e.referToSelf((p) => (b, g) => n(g, 0) ? b.clone() : c(b, g, p, !1)),
    "DenseMatrix, number | BigNumber": e.referToSelf((p) => (b, g) => n(g, 0) ? b.clone() : m(b, g, p, !1)),
    "number | BigNumber, SparseMatrix": e.referToSelf((p) => (b, g) => n(b, 0) ? a(g.size(), g.storage()) : s(g, b, p, !0)),
    "number | BigNumber, DenseMatrix": e.referToSelf((p) => (b, g) => n(b, 0) ? a(g.size(), g.storage()) : m(g, b, p, !0))
  }, d, v({
    SS: u,
    DS: f,
    SD: l
  }));
}), vv = "and", CC = ["typed", "matrix", "equalScalar", "zeros", "not", "concat"], MC = /* @__PURE__ */ q(vv, CC, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    zeros: a,
    not: i,
    concat: o
  } = r, f = qt({
    typed: e,
    equalScalar: n
  }), l = hs({
    typed: e,
    equalScalar: n
  }), u = Gr({
    typed: e,
    equalScalar: n
  }), s = Pt({
    typed: e
  }), c = br({
    typed: e,
    matrix: t,
    concat: o
  });
  return e(vv, {
    "number, number": x0,
    "Complex, Complex": function(v, d) {
      return (v.re !== 0 || v.im !== 0) && (d.re !== 0 || d.im !== 0);
    },
    "BigNumber, BigNumber": function(v, d) {
      return !v.isZero() && !d.isZero() && !v.isNaN() && !d.isNaN();
    },
    "Unit, Unit": e.referToSelf((m) => (v, d) => m(v.value || 0, d.value || 0)),
    "SparseMatrix, any": e.referToSelf((m) => (v, d) => i(d) ? a(v.size(), v.storage()) : u(v, d, m, !1)),
    "DenseMatrix, any": e.referToSelf((m) => (v, d) => i(d) ? a(v.size(), v.storage()) : s(v, d, m, !1)),
    "any, SparseMatrix": e.referToSelf((m) => (v, d) => i(v) ? a(v.size(), v.storage()) : u(d, v, m, !0)),
    "any, DenseMatrix": e.referToSelf((m) => (v, d) => i(v) ? a(v.size(), v.storage()) : s(d, v, m, !0)),
    "Array, any": e.referToSelf((m) => (v, d) => m(t(v), d).valueOf()),
    "any, Array": e.referToSelf((m) => (v, d) => m(v, t(d)).valueOf())
  }, c({
    SS: l,
    DS: f
  }));
}), Go = "compare", OC = ["typed", "config", "matrix", "equalScalar", "BigNumber", "Fraction", "DenseMatrix", "concat"], TC = /* @__PURE__ */ q(Go, OC, (r) => {
  var {
    typed: e,
    config: t,
    equalScalar: n,
    matrix: a,
    BigNumber: i,
    Fraction: o,
    DenseMatrix: f,
    concat: l
  } = r, u = ot({
    typed: e
  }), s = ds({
    typed: e,
    equalScalar: n
  }), c = Fr({
    typed: e,
    DenseMatrix: f
  }), m = br({
    typed: e,
    matrix: a,
    concat: l
  }), v = Ka({
    typed: e
  });
  return e(Go, BC({
    typed: e,
    config: t
  }), {
    "boolean, boolean": function(p, b) {
      return p === b ? 0 : p > b ? 1 : -1;
    },
    "BigNumber, BigNumber": function(p, b) {
      return Wt(p, b, t.epsilon) ? new i(0) : new i(p.cmp(b));
    },
    "Fraction, Fraction": function(p, b) {
      return new o(p.compare(b));
    },
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, v, m({
    SS: s,
    DS: u,
    Ss: c
  }));
}), BC = /* @__PURE__ */ q(Go, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Go, {
    "number, number": function(a, i) {
      return dt(a, i, t.epsilon) ? 0 : a > i ? 1 : -1;
    }
  });
}), _C = function r(e, t) {
  var n = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, a = /(^[ ]*|[ ]*$)/g, i = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/, o = /^0x[0-9a-f]+$/i, f = /^0/, l = function(h) {
    return r.insensitive && ("" + h).toLowerCase() || "" + h;
  }, u = l(e).replace(a, "") || "", s = l(t).replace(a, "") || "", c = u.replace(n, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"), m = s.replace(n, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"), v = parseInt(u.match(o), 16) || c.length !== 1 && u.match(i) && Date.parse(u), d = parseInt(s.match(o), 16) || v && s.match(i) && Date.parse(s) || null, p, b;
  if (d) {
    if (v < d)
      return -1;
    if (v > d)
      return 1;
  }
  for (var g = 0, N = Math.max(c.length, m.length); g < N; g++) {
    if (p = !(c[g] || "").match(f) && parseFloat(c[g]) || c[g] || 0, b = !(m[g] || "").match(f) && parseFloat(m[g]) || m[g] || 0, isNaN(p) !== isNaN(b))
      return isNaN(p) ? 1 : -1;
    if (typeof p != typeof b && (p += "", b += ""), p < b)
      return -1;
    if (p > b)
      return 1;
  }
  return 0;
};
const wa = /* @__PURE__ */ Di(_C);
var pv = "compareNatural", FC = ["typed", "compare"], $C = /* @__PURE__ */ q(pv, FC, (r) => {
  var {
    typed: e,
    compare: t
  } = r, n = t.signatures["boolean,boolean"];
  return e(pv, {
    "any, any": a
  });
  function a(l, u) {
    var s = hr(l), c = hr(u), m;
    if ((s === "number" || s === "BigNumber" || s === "Fraction") && (c === "number" || c === "BigNumber" || c === "Fraction"))
      return m = t(l, u), m.toString() !== "0" ? m > 0 ? 1 : -1 : wa(s, c);
    var v = ["Array", "DenseMatrix", "SparseMatrix"];
    if (v.includes(s) || v.includes(c))
      return m = i(a, l, u), m !== 0 ? m : wa(s, c);
    if (s !== c)
      return wa(s, c);
    if (s === "Complex")
      return RC(l, u);
    if (s === "Unit")
      return l.equalBase(u) ? a(l.value, u.value) : o(a, l.formatUnits(), u.formatUnits());
    if (s === "boolean")
      return n(l, u);
    if (s === "string")
      return wa(l, u);
    if (s === "Object")
      return f(a, l, u);
    if (s === "null" || s === "undefined")
      return 0;
    throw new TypeError('Unsupported type of value "' + s + '"');
  }
  function i(l, u, s) {
    return Vn(u) && Vn(s) ? o(l, u.toJSON().values, s.toJSON().values) : Vn(u) ? i(l, u.toArray(), s) : Vn(s) ? i(l, u, s.toArray()) : Oo(u) ? i(l, u.toJSON().data, s) : Oo(s) ? i(l, u, s.toJSON().data) : Array.isArray(u) ? Array.isArray(s) ? o(l, u, s) : i(l, u, [s]) : i(l, [u], s);
  }
  function o(l, u, s) {
    for (var c = 0, m = Math.min(u.length, s.length); c < m; c++) {
      var v = l(u[c], s[c]);
      if (v !== 0)
        return v;
    }
    return u.length > s.length ? 1 : u.length < s.length ? -1 : 0;
  }
  function f(l, u, s) {
    var c = Object.keys(u), m = Object.keys(s);
    c.sort(wa), m.sort(wa);
    var v = o(l, c, m);
    if (v !== 0)
      return v;
    for (var d = 0; d < c.length; d++) {
      var p = l(u[c[d]], s[m[d]]);
      if (p !== 0)
        return p;
    }
    return 0;
  }
});
function RC(r, e) {
  return r.re > e.re ? 1 : r.re < e.re ? -1 : r.im > e.im ? 1 : r.im < e.im ? -1 : 0;
}
var dv = "compareText", IC = ["typed", "matrix", "concat"];
Ju.signature = "any, any";
var PC = /* @__PURE__ */ q(dv, IC, (r) => {
  var {
    typed: e,
    matrix: t,
    concat: n
  } = r, a = br({
    typed: e,
    matrix: t,
    concat: n
  });
  return e(dv, Ju, a({
    elop: Ju,
    Ds: !0
  }));
}), Vo = "equal", qC = ["typed", "matrix", "equalScalar", "DenseMatrix", "concat"], LC = /* @__PURE__ */ q(Vo, qC, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    DenseMatrix: a,
    concat: i
  } = r, o = ot({
    typed: e
  }), f = Jt({
    typed: e,
    DenseMatrix: a
  }), l = Fr({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: t,
    concat: i
  });
  return e(Vo, zC({
    typed: e,
    equalScalar: n
  }), u({
    elop: n,
    SS: f,
    DS: o,
    Ss: l
  }));
}), zC = q(Vo, ["typed", "equalScalar"], (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return e(Vo, {
    "any, any": function(a, i) {
      return a === null ? i === null : i === null ? a === null : a === void 0 ? i === void 0 : i === void 0 ? a === void 0 : t(a, i);
    }
  });
}), hv = "equalText", UC = ["typed", "compareText", "isZero"], kC = /* @__PURE__ */ q(hv, UC, (r) => {
  var {
    typed: e,
    compareText: t,
    isZero: n
  } = r;
  return e(hv, {
    "any, any": function(i, o) {
      return n(t(i, o));
    }
  });
}), Ho = "smaller", GC = ["typed", "config", "matrix", "DenseMatrix", "concat"], VC = /* @__PURE__ */ q(Ho, GC, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    DenseMatrix: a,
    concat: i
  } = r, o = ot({
    typed: e
  }), f = Jt({
    typed: e,
    DenseMatrix: a
  }), l = Fr({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: n,
    concat: i
  }), s = Ka({
    typed: e
  });
  return e(Ho, HC({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (c, m) => c < m,
    "BigNumber, BigNumber": function(m, v) {
      return m.lt(v) && !Wt(m, v, t.epsilon);
    },
    "Fraction, Fraction": (c, m) => c.compare(m) === -1,
    "Complex, Complex": function(m, v) {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, s, u({
    SS: f,
    DS: o,
    Ss: l
  }));
}), HC = /* @__PURE__ */ q(Ho, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Ho, {
    "number, number": function(a, i) {
      return a < i && !dt(a, i, t.epsilon);
    }
  });
}), Zo = "smallerEq", ZC = ["typed", "config", "matrix", "DenseMatrix", "concat"], YC = /* @__PURE__ */ q(Zo, ZC, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    DenseMatrix: a,
    concat: i
  } = r, o = ot({
    typed: e
  }), f = Jt({
    typed: e,
    DenseMatrix: a
  }), l = Fr({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: n,
    concat: i
  }), s = Ka({
    typed: e
  });
  return e(Zo, WC({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (c, m) => c <= m,
    "BigNumber, BigNumber": function(m, v) {
      return m.lte(v) || Wt(m, v, t.epsilon);
    },
    "Fraction, Fraction": (c, m) => c.compare(m) !== 1,
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, s, u({
    SS: f,
    DS: o,
    Ss: l
  }));
}), WC = /* @__PURE__ */ q(Zo, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Zo, {
    "number, number": function(a, i) {
      return a <= i || dt(a, i, t.epsilon);
    }
  });
}), Yo = "larger", JC = ["typed", "config", "matrix", "DenseMatrix", "concat"], XC = /* @__PURE__ */ q(Yo, JC, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    DenseMatrix: a,
    concat: i
  } = r, o = ot({
    typed: e
  }), f = Jt({
    typed: e,
    DenseMatrix: a
  }), l = Fr({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: n,
    concat: i
  }), s = Ka({
    typed: e
  });
  return e(Yo, KC({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (c, m) => c > m,
    "BigNumber, BigNumber": function(m, v) {
      return m.gt(v) && !Wt(m, v, t.epsilon);
    },
    "Fraction, Fraction": (c, m) => c.compare(m) === 1,
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, s, u({
    SS: f,
    DS: o,
    Ss: l
  }));
}), KC = /* @__PURE__ */ q(Yo, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Yo, {
    "number, number": function(a, i) {
      return a > i && !dt(a, i, t.epsilon);
    }
  });
}), Wo = "largerEq", QC = ["typed", "config", "matrix", "DenseMatrix", "concat"], jC = /* @__PURE__ */ q(Wo, QC, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    DenseMatrix: a,
    concat: i
  } = r, o = ot({
    typed: e
  }), f = Jt({
    typed: e,
    DenseMatrix: a
  }), l = Fr({
    typed: e,
    DenseMatrix: a
  }), u = br({
    typed: e,
    matrix: n,
    concat: i
  }), s = Ka({
    typed: e
  });
  return e(Wo, eM({
    typed: e,
    config: t
  }), {
    "boolean, boolean": (c, m) => c >= m,
    "BigNumber, BigNumber": function(m, v) {
      return m.gte(v) || Wt(m, v, t.epsilon);
    },
    "Fraction, Fraction": (c, m) => c.compare(m) !== -1,
    "Complex, Complex": function() {
      throw new TypeError("No ordering relation is defined for complex numbers");
    }
  }, s, u({
    SS: f,
    DS: o,
    Ss: l
  }));
}), eM = /* @__PURE__ */ q(Wo, ["typed", "config"], (r) => {
  var {
    typed: e,
    config: t
  } = r;
  return e(Wo, {
    "number, number": function(a, i) {
      return a >= i || dt(a, i, t.epsilon);
    }
  });
}), gv = "deepEqual", rM = ["typed", "equal"], tM = /* @__PURE__ */ q(gv, rM, (r) => {
  var {
    typed: e,
    equal: t
  } = r;
  return e(gv, {
    "any, any": function(i, o) {
      return n(i.valueOf(), o.valueOf());
    }
  });
  function n(a, i) {
    if (Array.isArray(a))
      if (Array.isArray(i)) {
        var o = a.length;
        if (o !== i.length)
          return !1;
        for (var f = 0; f < o; f++)
          if (!n(a[f], i[f]))
            return !1;
        return !0;
      } else
        return !1;
    else
      return Array.isArray(i) ? !1 : t(a, i);
  }
}), Jo = "unequal", nM = ["typed", "config", "equalScalar", "matrix", "DenseMatrix", "concat"], aM = /* @__PURE__ */ q(Jo, nM, (r) => {
  var {
    typed: e,
    config: t,
    equalScalar: n,
    matrix: a,
    DenseMatrix: i,
    concat: o
  } = r, f = ot({
    typed: e
  }), l = Jt({
    typed: e,
    DenseMatrix: i
  }), u = Fr({
    typed: e,
    DenseMatrix: i
  }), s = br({
    typed: e,
    matrix: a,
    concat: o
  });
  return e(Jo, iM({
    typed: e,
    equalScalar: n
  }), s({
    elop: c,
    SS: l,
    DS: f,
    Ss: u
  }));
  function c(m, v) {
    return !n(m, v);
  }
}), iM = q(Jo, ["typed", "equalScalar"], (r) => {
  var {
    typed: e,
    equalScalar: t
  } = r;
  return e(Jo, {
    "any, any": function(a, i) {
      return a === null ? i !== null : i === null ? a !== null : a === void 0 ? i !== void 0 : i === void 0 ? a !== void 0 : !t(a, i);
    }
  });
}), yv = "partitionSelect", oM = ["typed", "isNumeric", "isNaN", "compare"], sM = /* @__PURE__ */ q(yv, oM, (r) => {
  var {
    typed: e,
    isNumeric: t,
    isNaN: n,
    compare: a
  } = r, i = a, o = (u, s) => -a(u, s);
  return e(yv, {
    "Array | Matrix, number": function(s, c) {
      return f(s, c, i);
    },
    "Array | Matrix, number, string": function(s, c, m) {
      if (m === "asc")
        return f(s, c, i);
      if (m === "desc")
        return f(s, c, o);
      throw new Error('Compare string must be "asc" or "desc"');
    },
    "Array | Matrix, number, function": f
  });
  function f(u, s, c) {
    if (!Ie(s) || s < 0)
      throw new Error("k must be a non-negative integer");
    if (Le(u)) {
      var m = u.size();
      if (m.length > 1)
        throw new Error("Only one dimensional matrices supported");
      return l(u.valueOf(), s, c);
    }
    if (Array.isArray(u))
      return l(u, s, c);
  }
  function l(u, s, c) {
    if (s >= u.length)
      throw new Error("k out of bounds");
    for (var m = 0; m < u.length; m++)
      if (t(u[m]) && n(u[m]))
        return u[m];
    for (var v = 0, d = u.length - 1; v < d; ) {
      for (var p = v, b = d, g = u[Math.floor(Math.random() * (d - v + 1)) + v]; p < b; )
        if (c(u[p], g) >= 0) {
          var N = u[b];
          u[b] = u[p], u[p] = N, --b;
        } else
          ++p;
      c(u[p], g) > 0 && --p, s <= p ? d = p : v = p + 1;
    }
    return u[s];
  }
}), bv = "sort", uM = ["typed", "matrix", "compare", "compareNatural"], cM = /* @__PURE__ */ q(bv, uM, (r) => {
  var {
    typed: e,
    matrix: t,
    compare: n,
    compareNatural: a
  } = r, i = n, o = (s, c) => -n(s, c);
  return e(bv, {
    Array: function(c) {
      return l(c), c.sort(i);
    },
    Matrix: function(c) {
      return u(c), t(c.toArray().sort(i), c.storage());
    },
    "Array, function": function(c, m) {
      return l(c), c.sort(m);
    },
    "Matrix, function": function(c, m) {
      return u(c), t(c.toArray().sort(m), c.storage());
    },
    "Array, string": function(c, m) {
      return l(c), c.sort(f(m));
    },
    "Matrix, string": function(c, m) {
      return u(c), t(c.toArray().sort(f(m)), c.storage());
    }
  });
  function f(s) {
    if (s === "asc")
      return i;
    if (s === "desc")
      return o;
    if (s === "natural")
      return a;
    throw new Error('String "asc", "desc", or "natural" expected');
  }
  function l(s) {
    if (Ye(s).length !== 1)
      throw new Error("One dimensional array expected");
  }
  function u(s) {
    if (s.size().length !== 1)
      throw new Error("One dimensional matrix expected");
  }
}), xv = "max", lM = ["typed", "config", "numeric", "larger"], tg = /* @__PURE__ */ q(xv, lM, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    larger: a
  } = r;
  return e(xv, {
    // max([a, b, c, d, ...])
    "Array | Matrix": o,
    // max([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(l, u) {
      return vs(l, u.valueOf(), i);
    },
    // max(a, b, c, d, ...)
    "...": function(l) {
      if (Wa(l))
        throw new TypeError("Scalar values expected in function max");
      return o(l);
    }
  });
  function i(f, l) {
    try {
      return a(f, l) ? f : l;
    } catch (u) {
      throw at(u, "max", l);
    }
  }
  function o(f) {
    var l;
    if (ln(f, function(u) {
      try {
        isNaN(u) && typeof u == "number" ? l = NaN : (l === void 0 || a(u, l)) && (l = u);
      } catch (s) {
        throw at(s, "max", u);
      }
    }), l === void 0)
      throw new Error("Cannot calculate max of an empty array");
    return typeof l == "string" && (l = n(l, t.number)), l;
  }
}), wv = "min", fM = ["typed", "config", "numeric", "smaller"], ng = /* @__PURE__ */ q(wv, fM, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    smaller: a
  } = r;
  return e(wv, {
    // min([a, b, c, d, ...])
    "Array | Matrix": o,
    // min([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(l, u) {
      return vs(l, u.valueOf(), i);
    },
    // min(a, b, c, d, ...)
    "...": function(l) {
      if (Wa(l))
        throw new TypeError("Scalar values expected in function min");
      return o(l);
    }
  });
  function i(f, l) {
    try {
      return a(f, l) ? f : l;
    } catch (u) {
      throw at(u, "min", l);
    }
  }
  function o(f) {
    var l;
    if (ln(f, function(u) {
      try {
        isNaN(u) && typeof u == "number" ? l = NaN : (l === void 0 || a(u, l)) && (l = u);
      } catch (s) {
        throw at(s, "min", u);
      }
    }), l === void 0)
      throw new Error("Cannot calculate min of an empty array");
    return typeof l == "string" && (l = n(l, t.number)), l;
  }
}), mM = "ImmutableDenseMatrix", vM = ["smaller", "DenseMatrix"], pM = /* @__PURE__ */ q(mM, vM, (r) => {
  var {
    smaller: e,
    DenseMatrix: t
  } = r;
  function n(a, i) {
    if (!(this instanceof n))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (i && !Hr(i))
      throw new Error("Invalid datatype: " + i);
    if (Le(a) || sr(a)) {
      var o = new t(a, i);
      this._data = o._data, this._size = o._size, this._datatype = o._datatype, this._min = null, this._max = null;
    } else if (a && sr(a.data) && sr(a.size))
      this._data = a.data, this._size = a.size, this._datatype = a.datatype, this._min = typeof a.min < "u" ? a.min : null, this._max = typeof a.max < "u" ? a.max : null;
    else {
      if (a)
        throw new TypeError("Unsupported type of data (" + hr(a) + ")");
      this._data = [], this._size = [0], this._datatype = i, this._min = null, this._max = null;
    }
  }
  return n.prototype = new t(), n.prototype.type = "ImmutableDenseMatrix", n.prototype.isImmutableDenseMatrix = !0, n.prototype.subset = function(a) {
    switch (arguments.length) {
      case 1: {
        var i = t.prototype.subset.call(this, a);
        return Le(i) ? new n({
          data: i._data,
          size: i._size,
          datatype: i._datatype
        }) : i;
      }
      case 2:
      case 3:
        throw new Error("Cannot invoke set subset on an Immutable Matrix instance");
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  }, n.prototype.set = function() {
    throw new Error("Cannot invoke set on an Immutable Matrix instance");
  }, n.prototype.resize = function() {
    throw new Error("Cannot invoke resize on an Immutable Matrix instance");
  }, n.prototype.reshape = function() {
    throw new Error("Cannot invoke reshape on an Immutable Matrix instance");
  }, n.prototype.clone = function() {
    return new n({
      data: Ge(this._data),
      size: Ge(this._size),
      datatype: this._datatype
    });
  }, n.prototype.toJSON = function() {
    return {
      mathjs: "ImmutableDenseMatrix",
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  }, n.fromJSON = function(a) {
    return new n(a);
  }, n.prototype.swapRows = function() {
    throw new Error("Cannot invoke swapRows on an Immutable Matrix instance");
  }, n.prototype.min = function() {
    if (this._min === null) {
      var a = null;
      this.forEach(function(i) {
        (a === null || e(i, a)) && (a = i);
      }), this._min = a !== null ? a : void 0;
    }
    return this._min;
  }, n.prototype.max = function() {
    if (this._max === null) {
      var a = null;
      this.forEach(function(i) {
        (a === null || e(a, i)) && (a = i);
      }), this._max = a !== null ? a : void 0;
    }
    return this._max;
  }, n;
}, {
  isClass: !0
}), dM = "Index", hM = ["ImmutableDenseMatrix", "getMatrixDataType"], gM = /* @__PURE__ */ q(dM, hM, (r) => {
  var {
    ImmutableDenseMatrix: e,
    getMatrixDataType: t
  } = r;
  function n(i) {
    if (!(this instanceof n))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._dimensions = [], this._sourceSize = [], this._isScalar = !0;
    for (var o = 0, f = arguments.length; o < f; o++) {
      var l = arguments[o], u = sr(l), s = Le(l), c = null;
      if (Oc(l))
        this._dimensions.push(l), this._isScalar = !1;
      else if (u || s) {
        var m = void 0;
        t(l) === "boolean" ? (u && (m = a(Nv(l).valueOf())), s && (m = a(Nv(l._data).valueOf())), c = l.valueOf().length) : m = a(l.valueOf()), this._dimensions.push(m);
        var v = m.size();
        (v.length !== 1 || v[0] !== 1 || c !== null) && (this._isScalar = !1);
      } else if (typeof l == "number")
        this._dimensions.push(a([l]));
      else if (typeof l == "string")
        this._dimensions.push(l);
      else
        throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");
      this._sourceSize.push(c);
    }
  }
  n.prototype.type = "Index", n.prototype.isIndex = !0;
  function a(i) {
    for (var o = 0, f = i.length; o < f; o++)
      if (typeof i[o] != "number" || !Ie(i[o]))
        throw new TypeError("Index parameters must be positive integer numbers");
    return new e(i);
  }
  return n.prototype.clone = function() {
    var i = new n();
    return i._dimensions = Ge(this._dimensions), i._isScalar = this._isScalar, i._sourceSize = this._sourceSize, i;
  }, n.create = function(i) {
    var o = new n();
    return n.apply(o, i), o;
  }, n.prototype.size = function() {
    for (var i = [], o = 0, f = this._dimensions.length; o < f; o++) {
      var l = this._dimensions[o];
      i[o] = typeof l == "string" ? 1 : l.size()[0];
    }
    return i;
  }, n.prototype.max = function() {
    for (var i = [], o = 0, f = this._dimensions.length; o < f; o++) {
      var l = this._dimensions[o];
      i[o] = typeof l == "string" ? l : l.max();
    }
    return i;
  }, n.prototype.min = function() {
    for (var i = [], o = 0, f = this._dimensions.length; o < f; o++) {
      var l = this._dimensions[o];
      i[o] = typeof l == "string" ? l : l.min();
    }
    return i;
  }, n.prototype.forEach = function(i) {
    for (var o = 0, f = this._dimensions.length; o < f; o++)
      i(this._dimensions[o], o, this);
  }, n.prototype.dimension = function(i) {
    return this._dimensions[i] || null;
  }, n.prototype.isObjectProperty = function() {
    return this._dimensions.length === 1 && typeof this._dimensions[0] == "string";
  }, n.prototype.getObjectProperty = function() {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  }, n.prototype.isScalar = function() {
    return this._isScalar;
  }, n.prototype.toArray = function() {
    for (var i = [], o = 0, f = this._dimensions.length; o < f; o++) {
      var l = this._dimensions[o];
      i.push(typeof l == "string" ? l : l.toArray());
    }
    return i;
  }, n.prototype.valueOf = n.prototype.toArray, n.prototype.toString = function() {
    for (var i = [], o = 0, f = this._dimensions.length; o < f; o++) {
      var l = this._dimensions[o];
      typeof l == "string" ? i.push(JSON.stringify(l)) : i.push(l.toString());
    }
    return "[" + i.join(", ") + "]";
  }, n.prototype.toJSON = function() {
    return {
      mathjs: "Index",
      dimensions: this._dimensions
    };
  }, n.fromJSON = function(i) {
    return n.create(i.dimensions);
  }, n;
}, {
  isClass: !0
});
function Nv(r) {
  var e = [];
  return r.forEach((t, n) => {
    t && e.push(n);
  }), e;
}
var yM = "FibonacciHeap", bM = ["smaller", "larger"], xM = /* @__PURE__ */ q(yM, bM, (r) => {
  var {
    smaller: e,
    larger: t
  } = r, n = 1 / Math.log((1 + Math.sqrt(5)) / 2);
  function a() {
    if (!(this instanceof a))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._minimum = null, this._size = 0;
  }
  a.prototype.type = "FibonacciHeap", a.prototype.isFibonacciHeap = !0, a.prototype.insert = function(s, c) {
    var m = {
      key: s,
      value: c,
      degree: 0
    };
    if (this._minimum) {
      var v = this._minimum;
      m.left = v, m.right = v.right, v.right = m, m.right.left = m, e(s, v.key) && (this._minimum = m);
    } else
      m.left = m, m.right = m, this._minimum = m;
    return this._size++, m;
  }, a.prototype.size = function() {
    return this._size;
  }, a.prototype.clear = function() {
    this._minimum = null, this._size = 0;
  }, a.prototype.isEmpty = function() {
    return this._size === 0;
  }, a.prototype.extractMinimum = function() {
    var s = this._minimum;
    if (s === null)
      return s;
    for (var c = this._minimum, m = s.degree, v = s.child; m > 0; ) {
      var d = v.right;
      v.left.right = v.right, v.right.left = v.left, v.left = c, v.right = c.right, c.right = v, v.right.left = v, v.parent = null, v = d, m--;
    }
    return s.left.right = s.right, s.right.left = s.left, s === s.right ? c = null : (c = s.right, c = u(c, this._size)), this._size--, this._minimum = c, s;
  }, a.prototype.remove = function(s) {
    this._minimum = i(this._minimum, s, -1), this.extractMinimum();
  };
  function i(s, c, m) {
    c.key = m;
    var v = c.parent;
    return v && e(c.key, v.key) && (o(s, c, v), f(s, v)), e(c.key, s.key) && (s = c), s;
  }
  function o(s, c, m) {
    c.left.right = c.right, c.right.left = c.left, m.degree--, m.child === c && (m.child = c.right), m.degree === 0 && (m.child = null), c.left = s, c.right = s.right, s.right = c, c.right.left = c, c.parent = null, c.mark = !1;
  }
  function f(s, c) {
    var m = c.parent;
    m && (c.mark ? (o(s, c, m), f(m)) : c.mark = !0);
  }
  var l = function(c, m) {
    c.left.right = c.right, c.right.left = c.left, c.parent = m, m.child ? (c.left = m.child, c.right = m.child.right, m.child.right = c, c.right.left = c) : (m.child = c, c.right = c, c.left = c), m.degree++, c.mark = !1;
  };
  function u(s, c) {
    var m = Math.floor(Math.log(c) * n) + 1, v = new Array(m), d = 0, p = s;
    if (p)
      for (d++, p = p.right; p !== s; )
        d++, p = p.right;
    for (var b; d > 0; ) {
      for (var g = p.degree, N = p.right; b = v[g], !!b; ) {
        if (t(p.key, b.key)) {
          var h = b;
          b = p, p = h;
        }
        l(b, p), v[g] = null, g++;
      }
      v[g] = p, p = N, d--;
    }
    s = null;
    for (var w = 0; w < m; w++)
      b = v[w], b && (s ? (b.left.right = b.right, b.right.left = b.left, b.left = s, b.right = s.right, s.right = b, b.right.left = b, e(b.key, s.key) && (s = b)) : s = b);
    return s;
  }
  return a;
}, {
  isClass: !0
}), wM = "Spa", NM = ["addScalar", "equalScalar", "FibonacciHeap"], AM = /* @__PURE__ */ q(wM, NM, (r) => {
  var {
    addScalar: e,
    equalScalar: t,
    FibonacciHeap: n
  } = r;
  function a() {
    if (!(this instanceof a))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._values = [], this._heap = new n();
  }
  return a.prototype.type = "Spa", a.prototype.isSpa = !0, a.prototype.set = function(i, o) {
    if (this._values[i])
      this._values[i].value = o;
    else {
      var f = this._heap.insert(i, o);
      this._values[i] = f;
    }
  }, a.prototype.get = function(i) {
    var o = this._values[i];
    return o ? o.value : 0;
  }, a.prototype.accumulate = function(i, o) {
    var f = this._values[i];
    f ? f.value = e(f.value, o) : (f = this._heap.insert(i, o), this._values[i] = f);
  }, a.prototype.forEach = function(i, o, f) {
    var l = this._heap, u = this._values, s = [], c = l.extractMinimum();
    for (c && s.push(c); c && c.key <= o; )
      c.key >= i && (t(c.value, 0) || f(c.key, c.value, this)), c = l.extractMinimum(), c && s.push(c);
    for (var m = 0; m < s.length; m++) {
      var v = s[m];
      c = l.insert(v.key, v.value), u[c.key] = c;
    }
  }, a.prototype.swap = function(i, o) {
    var f = this._values[i], l = this._values[o];
    if (!f && l)
      f = this._heap.insert(i, l.value), this._heap.remove(l), this._values[i] = f, this._values[o] = void 0;
    else if (f && !l)
      l = this._heap.insert(o, f.value), this._heap.remove(f), this._values[o] = l, this._values[i] = void 0;
    else if (f && l) {
      var u = f.value;
      f.value = l.value, l.value = u;
    }
  }, a;
}, {
  isClass: !0
}), EM = Mi(function(r) {
  return new r(1).exp();
}, {
  hasher: gs
}), DM = Mi(function(r) {
  return new r(1).plus(new r(5).sqrt()).div(2);
}, {
  hasher: gs
}), Gc = Mi(function(r) {
  return r.acos(-1);
}, {
  hasher: gs
}), SM = Mi(function(r) {
  return Gc(r).times(2);
}, {
  hasher: gs
});
function gs(r) {
  return r[0].precision;
}
function Av(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(a) {
      return Object.getOwnPropertyDescriptor(r, a).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function hu(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? Av(Object(t), !0).forEach(function(n) {
      _r(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : Av(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var CM = "Unit", MM = ["?on", "config", "addScalar", "subtractScalar", "multiplyScalar", "divideScalar", "pow", "abs", "fix", "round", "equal", "isNumeric", "format", "number", "Complex", "BigNumber", "Fraction"], OM = /* @__PURE__ */ q(CM, MM, (r) => {
  var {
    on: e,
    config: t,
    addScalar: n,
    subtractScalar: a,
    multiplyScalar: i,
    divideScalar: o,
    pow: f,
    abs: l,
    fix: u,
    round: s,
    equal: c,
    isNumeric: m,
    format: v,
    number: d,
    Complex: p,
    BigNumber: b,
    Fraction: g
  } = r, N = d;
  function h(k, Z) {
    if (!(this instanceof h))
      throw new Error("Constructor must be called with the new operator");
    if (!(k == null || m(k) || on(k)))
      throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");
    if (this.fixPrefix = !1, this.skipAutomaticSimplification = !0, Z === void 0)
      this.units = [], this.dimensions = G.map((H) => 0);
    else if (typeof Z == "string") {
      var oe = h.parse(Z);
      this.units = oe.units, this.dimensions = oe.dimensions;
    } else if (xt(Z) && Z.value === null)
      this.fixPrefix = Z.fixPrefix, this.skipAutomaticSimplification = Z.skipAutomaticSimplification, this.dimensions = Z.dimensions.slice(0), this.units = Z.units.map((H) => Rr({}, H));
    else
      throw new TypeError("Second parameter in Unit constructor must be a string or valueless Unit");
    this.value = this._normalize(k);
  }
  Object.defineProperty(h, "name", {
    value: "Unit"
  }), h.prototype.constructor = h, h.prototype.type = "Unit", h.prototype.isUnit = !0;
  var w, x, y;
  function E() {
    for (; y === " " || y === "	"; )
      A();
  }
  function D(k) {
    return k >= "0" && k <= "9" || k === ".";
  }
  function S(k) {
    return k >= "0" && k <= "9";
  }
  function A() {
    x++, y = w.charAt(x);
  }
  function C(k) {
    x = k, y = w.charAt(x);
  }
  function T() {
    var k = "", Z = x;
    if (y === "+" ? A() : y === "-" && (k += y, A()), !D(y))
      return C(Z), null;
    if (y === ".") {
      if (k += y, A(), !S(y))
        return C(Z), null;
    } else {
      for (; S(y); )
        k += y, A();
      y === "." && (k += y, A());
    }
    for (; S(y); )
      k += y, A();
    if (y === "E" || y === "e") {
      var oe = "", H = x;
      if (oe += y, A(), (y === "+" || y === "-") && (oe += y, A()), !S(y))
        return C(H), k;
      for (k = k + oe; S(y); )
        k += y, A();
    }
    return k;
  }
  function $() {
    for (var k = ""; S(y) || h.isValidAlpha(y); )
      k += y, A();
    var Z = k.charAt(0);
    return h.isValidAlpha(Z) ? k : null;
  }
  function I(k) {
    return y === k ? (A(), k) : null;
  }
  h.parse = function(k, Z) {
    if (Z = Z || {}, w = k, x = -1, y = "", typeof w != "string")
      throw new TypeError("Invalid argument in Unit.parse, string expected");
    var oe = new h();
    oe.units = [];
    var H = 1, W = !1;
    A(), E();
    var te = T(), ge = null;
    if (te) {
      if (t.number === "BigNumber")
        ge = new b(te);
      else if (t.number === "Fraction")
        try {
          ge = new g(te);
        } catch {
          ge = parseFloat(te);
        }
      else
        ge = parseFloat(te);
      E(), I("*") ? (H = 1, W = !0) : I("/") && (H = -1, W = !0);
    }
    for (var ve = [], P = 1; ; ) {
      for (E(); y === "("; )
        ve.push(H), P *= H, H = 1, A(), E();
      var V = void 0;
      if (y) {
        var ee = y;
        if (V = $(), V === null)
          throw new SyntaxError('Unexpected "' + ee + '" in "' + w + '" at index ' + x.toString());
      } else
        break;
      var ue = R(V);
      if (ue === null)
        throw new SyntaxError('Unit "' + V + '" not found.');
      var pe = H * P;
      if (E(), I("^")) {
        E();
        var me = T();
        if (me === null)
          throw new SyntaxError('In "' + k + '", "^" must be followed by a floating-point number');
        pe *= me;
      }
      oe.units.push({
        unit: ue.unit,
        prefix: ue.prefix,
        power: pe
      });
      for (var Ne = 0; Ne < G.length; Ne++)
        oe.dimensions[Ne] += (ue.unit.dimensions[Ne] || 0) * pe;
      for (E(); y === ")"; ) {
        if (ve.length === 0)
          throw new SyntaxError('Unmatched ")" in "' + w + '" at index ' + x.toString());
        P /= ve.pop(), A(), E();
      }
      if (W = !1, I("*") ? (H = 1, W = !0) : I("/") ? (H = -1, W = !0) : H = 1, ue.unit.base) {
        var be = ue.unit.base.key;
        re.auto[be] = {
          unit: ue.unit,
          prefix: ue.prefix
        };
      }
    }
    if (E(), y)
      throw new SyntaxError('Could not parse: "' + k + '"');
    if (W)
      throw new SyntaxError('Trailing characters: "' + k + '"');
    if (ve.length !== 0)
      throw new SyntaxError('Unmatched "(" in "' + w + '"');
    if (oe.units.length === 0 && !Z.allowNoUnits)
      throw new SyntaxError('"' + k + '" contains no units');
    return oe.value = ge !== void 0 ? oe._normalize(ge) : null, oe;
  }, h.prototype.clone = function() {
    var k = new h();
    k.fixPrefix = this.fixPrefix, k.skipAutomaticSimplification = this.skipAutomaticSimplification, k.value = Ge(this.value), k.dimensions = this.dimensions.slice(0), k.units = [];
    for (var Z = 0; Z < this.units.length; Z++) {
      k.units[Z] = {};
      for (var oe in this.units[Z])
        $e(this.units[Z], oe) && (k.units[Z][oe] = this.units[Z][oe]);
    }
    return k;
  }, h.prototype.valueType = function() {
    return hr(this.value);
  }, h.prototype._isDerived = function() {
    return this.units.length === 0 ? !1 : this.units.length > 1 || Math.abs(this.units[0].power - 1) > 1e-15;
  }, h.prototype._normalize = function(k) {
    if (k == null || this.units.length === 0)
      return k;
    for (var Z = k, oe = h._getNumberConverter(hr(k)), H = 0; H < this.units.length; H++) {
      var W = oe(this.units[H].unit.value), te = oe(this.units[H].prefix.value), ge = oe(this.units[H].power);
      Z = i(Z, f(i(W, te), ge));
    }
    return Z;
  }, h.prototype._denormalize = function(k, Z) {
    if (k == null || this.units.length === 0)
      return k;
    for (var oe = k, H = h._getNumberConverter(hr(k)), W = 0; W < this.units.length; W++) {
      var te = H(this.units[W].unit.value), ge = H(this.units[W].prefix.value), ve = H(this.units[W].power);
      oe = o(oe, f(i(te, ge), ve));
    }
    return oe;
  };
  var R = Mi((k) => {
    if ($e(z, k)) {
      var Z = z[k], oe = Z.prefixes[""];
      return {
        unit: Z,
        prefix: oe
      };
    }
    for (var H in z)
      if ($e(z, H) && mw(k, H)) {
        var W = z[H], te = k.length - H.length, ge = k.substring(0, te), ve = $e(W.prefixes, ge) ? W.prefixes[ge] : void 0;
        if (ve !== void 0)
          return {
            unit: W,
            prefix: ve
          };
      }
    return null;
  }, {
    hasher: (k) => k[0],
    limit: 100
  });
  h.isValuelessUnit = function(k) {
    return R(k) !== null;
  }, h.prototype.hasBase = function(k) {
    if (typeof k == "string" && (k = _[k]), !k)
      return !1;
    for (var Z = 0; Z < G.length; Z++)
      if (Math.abs((this.dimensions[Z] || 0) - (k.dimensions[Z] || 0)) > 1e-12)
        return !1;
    return !0;
  }, h.prototype.equalBase = function(k) {
    for (var Z = 0; Z < G.length; Z++)
      if (Math.abs((this.dimensions[Z] || 0) - (k.dimensions[Z] || 0)) > 1e-12)
        return !1;
    return !0;
  }, h.prototype.equals = function(k) {
    return this.equalBase(k) && c(this.value, k.value);
  }, h.prototype.multiply = function(k) {
    for (var Z = this.clone(), oe = xt(k) ? k : new h(k), H = 0; H < G.length; H++)
      Z.dimensions[H] = (this.dimensions[H] || 0) + (oe.dimensions[H] || 0);
    for (var W = 0; W < oe.units.length; W++) {
      var te = hu({}, oe.units[W]);
      Z.units.push(te);
    }
    if (this.value !== null || oe.value !== null) {
      var ge = this.value === null ? this._normalize(1) : this.value, ve = oe.value === null ? oe._normalize(1) : oe.value;
      Z.value = i(ge, ve);
    } else
      Z.value = null;
    return xt(k) && (Z.skipAutomaticSimplification = !1), B(Z);
  }, h.prototype.divideInto = function(k) {
    return new h(k).divide(this);
  }, h.prototype.divide = function(k) {
    for (var Z = this.clone(), oe = xt(k) ? k : new h(k), H = 0; H < G.length; H++)
      Z.dimensions[H] = (this.dimensions[H] || 0) - (oe.dimensions[H] || 0);
    for (var W = 0; W < oe.units.length; W++) {
      var te = hu(hu({}, oe.units[W]), {}, {
        power: -oe.units[W].power
      });
      Z.units.push(te);
    }
    if (this.value !== null || oe.value !== null) {
      var ge = this.value === null ? this._normalize(1) : this.value, ve = oe.value === null ? oe._normalize(1) : oe.value;
      Z.value = o(ge, ve);
    } else
      Z.value = null;
    return xt(k) && (Z.skipAutomaticSimplification = !1), B(Z);
  }, h.prototype.pow = function(k) {
    for (var Z = this.clone(), oe = 0; oe < G.length; oe++)
      Z.dimensions[oe] = (this.dimensions[oe] || 0) * k;
    for (var H = 0; H < Z.units.length; H++)
      Z.units[H].power *= k;
    return Z.value !== null ? Z.value = f(Z.value, k) : Z.value = null, Z.skipAutomaticSimplification = !1, B(Z);
  };
  function B(k) {
    return k.equalBase(_.NONE) && k.value !== null && !t.predictable ? k.value : k;
  }
  h.prototype.abs = function() {
    var k = this.clone();
    if (k.value !== null)
      if (k._isDerived() || k.units[0].unit.offset === 0)
        k.value = l(k.value);
      else {
        var Z = k._numberConverter(), oe = Z(k.units[0].unit.value), H = Z(k.units[0].unit.offset), W = i(oe, H);
        k.value = a(l(n(k.value, W)), W);
      }
    for (var te in k.units)
      (k.units[te].unit.name === "VA" || k.units[te].unit.name === "VAR") && (k.units[te].unit = z.W);
    return k;
  }, h.prototype.to = function(k) {
    var Z = this.value === null ? this._normalize(1) : this.value, oe;
    if (typeof k == "string")
      oe = h.parse(k);
    else if (xt(k))
      oe = k.clone();
    else
      throw new Error("String or Unit expected as parameter");
    if (!this.equalBase(oe))
      throw new Error("Units do not match ('".concat(oe.toString(), "' != '").concat(this.toString(), "')"));
    if (oe.value !== null)
      throw new Error("Cannot convert to a unit with a value");
    if (this.value === null || this._isDerived() || this.units[0].unit.offset === oe.units[0].unit.offset)
      oe.value = Ge(Z);
    else {
      var H = h._getNumberConverter(hr(Z)), W = this.units[0].unit.value, te = this.units[0].unit.offset, ge = i(W, te), ve = oe.units[0].unit.value, P = oe.units[0].unit.offset, V = i(ve, P);
      oe.value = n(Z, H(a(ge, V)));
    }
    return oe.fixPrefix = !0, oe.skipAutomaticSimplification = !0, oe;
  }, h.prototype.toNumber = function(k) {
    return N(this.toNumeric(k));
  }, h.prototype.toNumeric = function(k) {
    var Z;
    return k ? Z = this.to(k) : Z = this.clone(), Z._isDerived() || Z.units.length === 0 ? Z._denormalize(Z.value) : Z._denormalize(Z.value, Z.units[0].prefix.value);
  }, h.prototype.toString = function() {
    return this.format();
  }, h.prototype.toJSON = function() {
    return {
      mathjs: "Unit",
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  }, h.fromJSON = function(k) {
    var Z = new h(k.value, k.unit);
    return Z.fixPrefix = k.fixPrefix || !1, Z;
  }, h.prototype.valueOf = h.prototype.toString, h.prototype.simplify = function() {
    var k = this.clone(), Z = [], oe;
    for (var H in fe)
      if ($e(fe, H) && k.hasBase(_[H])) {
        oe = H;
        break;
      }
    if (oe === "NONE")
      k.units = [];
    else {
      var W;
      if (oe && $e(fe, oe) && (W = fe[oe]), W)
        k.units = [{
          unit: W.unit,
          prefix: W.prefix,
          power: 1
        }];
      else {
        for (var te = !1, ge = 0; ge < G.length; ge++) {
          var ve = G[ge];
          Math.abs(k.dimensions[ge] || 0) > 1e-12 && ($e(fe, ve) ? Z.push({
            unit: fe[ve].unit,
            prefix: fe[ve].prefix,
            power: k.dimensions[ge] || 0
          }) : te = !0);
        }
        Z.length < k.units.length && !te && (k.units = Z);
      }
    }
    return k;
  }, h.prototype.toSI = function() {
    for (var k = this.clone(), Z = [], oe = 0; oe < G.length; oe++) {
      var H = G[oe];
      if (Math.abs(k.dimensions[oe] || 0) > 1e-12)
        if ($e(re.si, H))
          Z.push({
            unit: re.si[H].unit,
            prefix: re.si[H].prefix,
            power: k.dimensions[oe] || 0
          });
        else
          throw new Error("Cannot express custom unit " + H + " in SI units");
    }
    return k.units = Z, k.fixPrefix = !0, k.skipAutomaticSimplification = !0, k;
  }, h.prototype.formatUnits = function() {
    for (var k = "", Z = "", oe = 0, H = 0, W = 0; W < this.units.length; W++)
      this.units[W].power > 0 ? (oe++, k += " " + this.units[W].prefix.name + this.units[W].unit.name, Math.abs(this.units[W].power - 1) > 1e-15 && (k += "^" + this.units[W].power)) : this.units[W].power < 0 && H++;
    if (H > 0)
      for (var te = 0; te < this.units.length; te++)
        this.units[te].power < 0 && (oe > 0 ? (Z += " " + this.units[te].prefix.name + this.units[te].unit.name, Math.abs(this.units[te].power + 1) > 1e-15 && (Z += "^" + -this.units[te].power)) : (Z += " " + this.units[te].prefix.name + this.units[te].unit.name, Z += "^" + this.units[te].power));
    k = k.substr(1), Z = Z.substr(1), oe > 1 && H > 0 && (k = "(" + k + ")"), H > 1 && oe > 0 && (Z = "(" + Z + ")");
    var ge = k;
    return oe > 0 && H > 0 && (ge += " / "), ge += Z, ge;
  }, h.prototype.format = function(k) {
    var Z = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(), oe = !1;
    typeof Z.value < "u" && Z.value !== null && on(Z.value) && (oe = Math.abs(Z.value.re) < 1e-14);
    for (var H in Z.units)
      $e(Z.units, H) && Z.units[H].unit && (Z.units[H].unit.name === "VA" && oe ? Z.units[H].unit = z.VAR : Z.units[H].unit.name === "VAR" && !oe && (Z.units[H].unit = z.VA));
    Z.units.length === 1 && !Z.fixPrefix && Math.abs(Z.units[0].power - Math.round(Z.units[0].power)) < 1e-14 && (Z.units[0].prefix = Z._bestPrefix());
    var W = Z._denormalize(Z.value), te = Z.value !== null ? v(W, k || {}) : "", ge = Z.formatUnits();
    return Z.value && on(Z.value) && (te = "(" + te + ")"), ge.length > 0 && te.length > 0 && (te += " "), te += ge, te;
  }, h.prototype._bestPrefix = function() {
    if (this.units.length !== 1)
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14)
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    var k = this.value !== null ? l(this.value) : 0, Z = l(this.units[0].unit.value), oe = this.units[0].prefix;
    if (k === 0)
      return oe;
    var H = this.units[0].power, W = Math.log(k / Math.pow(oe.value * Z, H)) / Math.LN10 - 1.2;
    if (W > -2.200001 && W < 1.800001)
      return oe;
    W = Math.abs(W);
    var te = this.units[0].unit.prefixes;
    for (var ge in te)
      if ($e(te, ge)) {
        var ve = te[ge];
        if (ve.scientific) {
          var P = Math.abs(Math.log(k / Math.pow(ve.value * Z, H)) / Math.LN10 - 1.2);
          (P < W || P === W && ve.name.length < oe.name.length) && (oe = ve, W = P);
        }
      }
    return oe;
  }, h.prototype.splitUnit = function(k) {
    for (var Z = this.clone(), oe = [], H = 0; H < k.length && (Z = Z.to(k[H]), H !== k.length - 1); H++) {
      var W = Z.toNumeric(), te = s(W), ge = void 0, ve = c(te, W);
      ve ? ge = te : ge = u(Z.toNumeric());
      var P = new h(ge, k[H].toString());
      oe.push(P), Z = a(Z, P);
    }
    for (var V = 0, ee = 0; ee < oe.length; ee++)
      V = n(V, oe[ee].value);
    return c(V, this.value) && (Z.value = 0), oe.push(Z), oe;
  };
  var O = {
    NONE: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      }
    },
    SHORT: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      da: {
        name: "da",
        value: 10,
        scientific: !1
      },
      h: {
        name: "h",
        value: 100,
        scientific: !1
      },
      k: {
        name: "k",
        value: 1e3,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e6,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e9,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e12,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e15,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e18,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e21,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e24,
        scientific: !0
      },
      d: {
        name: "d",
        value: 0.1,
        scientific: !1
      },
      c: {
        name: "c",
        value: 0.01,
        scientific: !1
      },
      m: {
        name: "m",
        value: 1e-3,
        scientific: !0
      },
      u: {
        name: "u",
        value: 1e-6,
        scientific: !0
      },
      n: {
        name: "n",
        value: 1e-9,
        scientific: !0
      },
      p: {
        name: "p",
        value: 1e-12,
        scientific: !0
      },
      f: {
        name: "f",
        value: 1e-15,
        scientific: !0
      },
      a: {
        name: "a",
        value: 1e-18,
        scientific: !0
      },
      z: {
        name: "z",
        value: 1e-21,
        scientific: !0
      },
      y: {
        name: "y",
        value: 1e-24,
        scientific: !0
      }
    },
    LONG: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      deca: {
        name: "deca",
        value: 10,
        scientific: !1
      },
      hecto: {
        name: "hecto",
        value: 100,
        scientific: !1
      },
      kilo: {
        name: "kilo",
        value: 1e3,
        scientific: !0
      },
      mega: {
        name: "mega",
        value: 1e6,
        scientific: !0
      },
      giga: {
        name: "giga",
        value: 1e9,
        scientific: !0
      },
      tera: {
        name: "tera",
        value: 1e12,
        scientific: !0
      },
      peta: {
        name: "peta",
        value: 1e15,
        scientific: !0
      },
      exa: {
        name: "exa",
        value: 1e18,
        scientific: !0
      },
      zetta: {
        name: "zetta",
        value: 1e21,
        scientific: !0
      },
      yotta: {
        name: "yotta",
        value: 1e24,
        scientific: !0
      },
      deci: {
        name: "deci",
        value: 0.1,
        scientific: !1
      },
      centi: {
        name: "centi",
        value: 0.01,
        scientific: !1
      },
      milli: {
        name: "milli",
        value: 1e-3,
        scientific: !0
      },
      micro: {
        name: "micro",
        value: 1e-6,
        scientific: !0
      },
      nano: {
        name: "nano",
        value: 1e-9,
        scientific: !0
      },
      pico: {
        name: "pico",
        value: 1e-12,
        scientific: !0
      },
      femto: {
        name: "femto",
        value: 1e-15,
        scientific: !0
      },
      atto: {
        name: "atto",
        value: 1e-18,
        scientific: !0
      },
      zepto: {
        name: "zepto",
        value: 1e-21,
        scientific: !0
      },
      yocto: {
        name: "yocto",
        value: 1e-24,
        scientific: !0
      }
    },
    SQUARED: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      da: {
        name: "da",
        value: 100,
        scientific: !1
      },
      h: {
        name: "h",
        value: 1e4,
        scientific: !1
      },
      k: {
        name: "k",
        value: 1e6,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e12,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e18,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e24,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e30,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e36,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e42,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e48,
        scientific: !0
      },
      d: {
        name: "d",
        value: 0.01,
        scientific: !1
      },
      c: {
        name: "c",
        value: 1e-4,
        scientific: !1
      },
      m: {
        name: "m",
        value: 1e-6,
        scientific: !0
      },
      u: {
        name: "u",
        value: 1e-12,
        scientific: !0
      },
      n: {
        name: "n",
        value: 1e-18,
        scientific: !0
      },
      p: {
        name: "p",
        value: 1e-24,
        scientific: !0
      },
      f: {
        name: "f",
        value: 1e-30,
        scientific: !0
      },
      a: {
        name: "a",
        value: 1e-36,
        scientific: !0
      },
      z: {
        name: "z",
        value: 1e-42,
        scientific: !0
      },
      y: {
        name: "y",
        value: 1e-48,
        scientific: !0
      }
    },
    CUBIC: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      da: {
        name: "da",
        value: 1e3,
        scientific: !1
      },
      h: {
        name: "h",
        value: 1e6,
        scientific: !1
      },
      k: {
        name: "k",
        value: 1e9,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e18,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e27,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e36,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e45,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e54,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e63,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e72,
        scientific: !0
      },
      d: {
        name: "d",
        value: 1e-3,
        scientific: !1
      },
      c: {
        name: "c",
        value: 1e-6,
        scientific: !1
      },
      m: {
        name: "m",
        value: 1e-9,
        scientific: !0
      },
      u: {
        name: "u",
        value: 1e-18,
        scientific: !0
      },
      n: {
        name: "n",
        value: 1e-27,
        scientific: !0
      },
      p: {
        name: "p",
        value: 1e-36,
        scientific: !0
      },
      f: {
        name: "f",
        value: 1e-45,
        scientific: !0
      },
      a: {
        name: "a",
        value: 1e-54,
        scientific: !0
      },
      z: {
        name: "z",
        value: 1e-63,
        scientific: !0
      },
      y: {
        name: "y",
        value: 1e-72,
        scientific: !0
      }
    },
    BINARY_SHORT_SI: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      k: {
        name: "k",
        value: 1e3,
        scientific: !0
      },
      M: {
        name: "M",
        value: 1e6,
        scientific: !0
      },
      G: {
        name: "G",
        value: 1e9,
        scientific: !0
      },
      T: {
        name: "T",
        value: 1e12,
        scientific: !0
      },
      P: {
        name: "P",
        value: 1e15,
        scientific: !0
      },
      E: {
        name: "E",
        value: 1e18,
        scientific: !0
      },
      Z: {
        name: "Z",
        value: 1e21,
        scientific: !0
      },
      Y: {
        name: "Y",
        value: 1e24,
        scientific: !0
      }
    },
    BINARY_SHORT_IEC: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      Ki: {
        name: "Ki",
        value: 1024,
        scientific: !0
      },
      Mi: {
        name: "Mi",
        value: Math.pow(1024, 2),
        scientific: !0
      },
      Gi: {
        name: "Gi",
        value: Math.pow(1024, 3),
        scientific: !0
      },
      Ti: {
        name: "Ti",
        value: Math.pow(1024, 4),
        scientific: !0
      },
      Pi: {
        name: "Pi",
        value: Math.pow(1024, 5),
        scientific: !0
      },
      Ei: {
        name: "Ei",
        value: Math.pow(1024, 6),
        scientific: !0
      },
      Zi: {
        name: "Zi",
        value: Math.pow(1024, 7),
        scientific: !0
      },
      Yi: {
        name: "Yi",
        value: Math.pow(1024, 8),
        scientific: !0
      }
    },
    BINARY_LONG_SI: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      kilo: {
        name: "kilo",
        value: 1e3,
        scientific: !0
      },
      mega: {
        name: "mega",
        value: 1e6,
        scientific: !0
      },
      giga: {
        name: "giga",
        value: 1e9,
        scientific: !0
      },
      tera: {
        name: "tera",
        value: 1e12,
        scientific: !0
      },
      peta: {
        name: "peta",
        value: 1e15,
        scientific: !0
      },
      exa: {
        name: "exa",
        value: 1e18,
        scientific: !0
      },
      zetta: {
        name: "zetta",
        value: 1e21,
        scientific: !0
      },
      yotta: {
        name: "yotta",
        value: 1e24,
        scientific: !0
      }
    },
    BINARY_LONG_IEC: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      kibi: {
        name: "kibi",
        value: 1024,
        scientific: !0
      },
      mebi: {
        name: "mebi",
        value: Math.pow(1024, 2),
        scientific: !0
      },
      gibi: {
        name: "gibi",
        value: Math.pow(1024, 3),
        scientific: !0
      },
      tebi: {
        name: "tebi",
        value: Math.pow(1024, 4),
        scientific: !0
      },
      pebi: {
        name: "pebi",
        value: Math.pow(1024, 5),
        scientific: !0
      },
      exi: {
        name: "exi",
        value: Math.pow(1024, 6),
        scientific: !0
      },
      zebi: {
        name: "zebi",
        value: Math.pow(1024, 7),
        scientific: !0
      },
      yobi: {
        name: "yobi",
        value: Math.pow(1024, 8),
        scientific: !0
      }
    },
    BTU: {
      "": {
        name: "",
        value: 1,
        scientific: !0
      },
      MM: {
        name: "MM",
        value: 1e6,
        scientific: !0
      }
    }
  };
  O.SHORTLONG = Rr({}, O.SHORT, O.LONG), O.BINARY_SHORT = Rr({}, O.BINARY_SHORT_SI, O.BINARY_SHORT_IEC), O.BINARY_LONG = Rr({}, O.BINARY_LONG_SI, O.BINARY_LONG_IEC);
  var G = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"], _ = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };
  for (var U in _)
    $e(_, U) && (_[U].key = U);
  var K = {}, j = {
    name: "",
    base: K,
    value: 1,
    offset: 0,
    dimensions: G.map((k) => 0)
  }, z = {
    // length
    meter: {
      name: "meter",
      base: _.LENGTH,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: "inch",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: "foot",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: "yard",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: "mile",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: "link",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: "rod",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: "chain",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: "angstrom",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: "m",
      base: _.LENGTH,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    in: {
      name: "in",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: "ft",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: "yd",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: "mi",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: "li",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: "rd",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 5.02921,
      offset: 0
    },
    ch: {
      name: "ch",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: "mil",
      base: _.LENGTH,
      prefixes: O.NONE,
      value: 254e-7,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: "m2",
      base: _.SURFACE,
      prefixes: O.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: "sqin",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 64516e-8,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: "sqft",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: "sqyd",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: "sqmi",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 2589988110336e-6,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: "sqrd",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: "sqch",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: "sqmil",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 64516e-14,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: "acre",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: "hectare",
      base: _.SURFACE,
      prefixes: O.NONE,
      value: 1e4,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: "m3",
      base: _.VOLUME,
      prefixes: O.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: "L",
      base: _.VOLUME,
      prefixes: O.SHORT,
      value: 1e-3,
      offset: 0
    },
    // litre
    l: {
      name: "l",
      base: _.VOLUME,
      prefixes: O.SHORT,
      value: 1e-3,
      offset: 0
    },
    // litre
    litre: {
      name: "litre",
      base: _.VOLUME,
      prefixes: O.LONG,
      value: 1e-3,
      offset: 0
    },
    cuin: {
      name: "cuin",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 16387064e-12,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: "cuft",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: "cuyd",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: "teaspoon",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 5e-6,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: "tablespoon",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 15e-6,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: "drop",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: "gtt",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: "minim",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 6161152e-14,
      offset: 0
    },
    // 0.06161152 mL
    fluiddram: {
      name: "fluiddram",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 36966911e-13,
      offset: 0
    },
    // 3.696691 mL
    fluidounce: {
      name: "fluidounce",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 2957353e-11,
      offset: 0
    },
    // 29.57353 mL
    gill: {
      name: "gill",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 1182941e-10,
      offset: 0
    },
    // 118.2941 mL
    cc: {
      name: "cc",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: "cup",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 2365882e-10,
      offset: 0
    },
    // 236.5882 mL
    pint: {
      name: "pint",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 4731765e-10,
      offset: 0
    },
    // 473.1765 mL
    quart: {
      name: "quart",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 9463529e-10,
      offset: 0
    },
    // 946.3529 mL
    gallon: {
      name: "gallon",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 3785412e-9,
      offset: 0
    },
    // 3.785412 L
    beerbarrel: {
      name: "beerbarrel",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    oilbarrel: {
      name: "oilbarrel",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    hogshead: {
      name: "hogshead",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.238481,
      offset: 0
    },
    // 238.4810 L
    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: "fldr",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 36966911e-13,
      offset: 0
    },
    // 3.696691 mL
    floz: {
      name: "floz",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 2957353e-11,
      offset: 0
    },
    // 29.57353 mL
    gi: {
      name: "gi",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 1182941e-10,
      offset: 0
    },
    // 118.2941 mL
    cp: {
      name: "cp",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 2365882e-10,
      offset: 0
    },
    // 236.5882 mL
    pt: {
      name: "pt",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 4731765e-10,
      offset: 0
    },
    // 473.1765 mL
    qt: {
      name: "qt",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 9463529e-10,
      offset: 0
    },
    // 946.3529 mL
    gal: {
      name: "gal",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 3785412e-9,
      offset: 0
    },
    // 3.785412 L
    bbl: {
      name: "bbl",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    obl: {
      name: "obl",
      base: _.VOLUME,
      prefixes: O.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
    // Mass
    g: {
      name: "g",
      base: _.MASS,
      prefixes: O.SHORT,
      value: 1e-3,
      offset: 0
    },
    gram: {
      name: "gram",
      base: _.MASS,
      prefixes: O.LONG,
      value: 1e-3,
      offset: 0
    },
    ton: {
      name: "ton",
      base: _.MASS,
      prefixes: O.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: "t",
      base: _.MASS,
      prefixes: O.SHORT,
      value: 1e3,
      offset: 0
    },
    tonne: {
      name: "tonne",
      base: _.MASS,
      prefixes: O.LONG,
      value: 1e3,
      offset: 0
    },
    grain: {
      name: "grain",
      base: _.MASS,
      prefixes: O.NONE,
      value: 6479891e-11,
      offset: 0
    },
    dram: {
      name: "dram",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.0017718451953125,
      offset: 0
    },
    ounce: {
      name: "ounce",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.028349523125,
      offset: 0
    },
    poundmass: {
      name: "poundmass",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.45359237,
      offset: 0
    },
    hundredweight: {
      name: "hundredweight",
      base: _.MASS,
      prefixes: O.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: "stick",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.115,
      offset: 0
    },
    stone: {
      name: "stone",
      base: _.MASS,
      prefixes: O.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: "gr",
      base: _.MASS,
      prefixes: O.NONE,
      value: 6479891e-11,
      offset: 0
    },
    dr: {
      name: "dr",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.0017718451953125,
      offset: 0
    },
    oz: {
      name: "oz",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.028349523125,
      offset: 0
    },
    lbm: {
      name: "lbm",
      base: _.MASS,
      prefixes: O.NONE,
      value: 0.45359237,
      offset: 0
    },
    cwt: {
      name: "cwt",
      base: _.MASS,
      prefixes: O.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: "s",
      base: _.TIME,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: "min",
      base: _.TIME,
      prefixes: O.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: "h",
      base: _.TIME,
      prefixes: O.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: "second",
      base: _.TIME,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: "sec",
      base: _.TIME,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: "minute",
      base: _.TIME,
      prefixes: O.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: "hour",
      base: _.TIME,
      prefixes: O.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: "day",
      base: _.TIME,
      prefixes: O.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: "week",
      base: _.TIME,
      prefixes: O.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: "month",
      base: _.TIME,
      prefixes: O.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: "year",
      base: _.TIME,
      prefixes: O.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: "decade",
      base: _.TIME,
      prefixes: O.NONE,
      value: 315576e3,
      // Julian decade
      offset: 0
    },
    century: {
      name: "century",
      base: _.TIME,
      prefixes: O.NONE,
      value: 315576e4,
      // Julian century
      offset: 0
    },
    millennium: {
      name: "millennium",
      base: _.TIME,
      prefixes: O.NONE,
      value: 315576e5,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: "Hertz",
      base: _.FREQUENCY,
      prefixes: O.LONG,
      value: 1,
      offset: 0,
      reciprocal: !0
    },
    Hz: {
      name: "Hz",
      base: _.FREQUENCY,
      prefixes: O.SHORT,
      value: 1,
      offset: 0,
      reciprocal: !0
    },
    // Angle
    rad: {
      name: "rad",
      base: _.ANGLE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: "radian",
      base: _.ANGLE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: "deg",
      base: _.ANGLE,
      prefixes: O.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: "degree",
      base: _.ANGLE,
      prefixes: O.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: "grad",
      base: _.ANGLE,
      prefixes: O.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: "gradian",
      base: _.ANGLE,
      prefixes: O.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: "cycle",
      base: _.ANGLE,
      prefixes: O.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: "arcsec",
      base: _.ANGLE,
      prefixes: O.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: "arcmin",
      base: _.ANGLE,
      prefixes: O.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: "A",
      base: _.CURRENT,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: "ampere",
      base: _.CURRENT,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) * (5 / 9)
    // K(R) = °R * (5 / 9)
    K: {
      name: "K",
      base: _.TEMPERATURE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    degC: {
      name: "degC",
      base: _.TEMPERATURE,
      prefixes: O.SHORT,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: "degF",
      base: _.TEMPERATURE,
      prefixes: O.SHORT,
      value: new g(5, 9),
      offset: 459.67
    },
    degR: {
      name: "degR",
      base: _.TEMPERATURE,
      prefixes: O.SHORT,
      value: new g(5, 9),
      offset: 0
    },
    kelvin: {
      name: "kelvin",
      base: _.TEMPERATURE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    celsius: {
      name: "celsius",
      base: _.TEMPERATURE,
      prefixes: O.LONG,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: "fahrenheit",
      base: _.TEMPERATURE,
      prefixes: O.LONG,
      value: new g(5, 9),
      offset: 459.67
    },
    rankine: {
      name: "rankine",
      base: _.TEMPERATURE,
      prefixes: O.LONG,
      value: new g(5, 9),
      offset: 0
    },
    // amount of substance
    mol: {
      name: "mol",
      base: _.AMOUNT_OF_SUBSTANCE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: "mole",
      base: _.AMOUNT_OF_SUBSTANCE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: "cd",
      base: _.LUMINOUS_INTENSITY,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: "candela",
      base: _.LUMINOUS_INTENSITY,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: "N",
      base: _.FORCE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: "newton",
      base: _.FORCE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: "dyn",
      base: _.FORCE,
      prefixes: O.SHORT,
      value: 1e-5,
      offset: 0
    },
    dyne: {
      name: "dyne",
      base: _.FORCE,
      prefixes: O.LONG,
      value: 1e-5,
      offset: 0
    },
    lbf: {
      name: "lbf",
      base: _.FORCE,
      prefixes: O.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: "poundforce",
      base: _.FORCE,
      prefixes: O.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: "kip",
      base: _.FORCE,
      prefixes: O.LONG,
      value: 4448.2216,
      offset: 0
    },
    kilogramforce: {
      name: "kilogramforce",
      base: _.FORCE,
      prefixes: O.NONE,
      value: 9.80665,
      offset: 0
    },
    // Energy
    J: {
      name: "J",
      base: _.ENERGY,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: "joule",
      base: _.ENERGY,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    erg: {
      name: "erg",
      base: _.ENERGY,
      prefixes: O.SHORTLONG,
      // Both kiloerg and kerg are acceptable
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: "Wh",
      base: _.ENERGY,
      prefixes: O.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: "BTU",
      base: _.ENERGY,
      prefixes: O.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: "eV",
      base: _.ENERGY,
      prefixes: O.SHORT,
      value: 1602176565e-28,
      offset: 0
    },
    electronvolt: {
      name: "electronvolt",
      base: _.ENERGY,
      prefixes: O.LONG,
      value: 1602176565e-28,
      offset: 0
    },
    // Power
    W: {
      name: "W",
      base: _.POWER,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: "watt",
      base: _.POWER,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: "hp",
      base: _.POWER,
      prefixes: O.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: "VAR",
      base: _.POWER,
      prefixes: O.SHORT,
      value: p.I,
      offset: 0
    },
    VA: {
      name: "VA",
      base: _.POWER,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: "Pa",
      base: _.PRESSURE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: "psi",
      base: _.PRESSURE,
      prefixes: O.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: "atm",
      base: _.PRESSURE,
      prefixes: O.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: "bar",
      base: _.PRESSURE,
      prefixes: O.SHORTLONG,
      value: 1e5,
      offset: 0
    },
    torr: {
      name: "torr",
      base: _.PRESSURE,
      prefixes: O.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: "mmHg",
      base: _.PRESSURE,
      prefixes: O.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: "mmH2O",
      base: _.PRESSURE,
      prefixes: O.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: "cmH2O",
      base: _.PRESSURE,
      prefixes: O.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: "coulomb",
      base: _.ELECTRIC_CHARGE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: "C",
      base: _.ELECTRIC_CHARGE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: "farad",
      base: _.ELECTRIC_CAPACITANCE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: "F",
      base: _.ELECTRIC_CAPACITANCE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: "volt",
      base: _.ELECTRIC_POTENTIAL,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: "V",
      base: _.ELECTRIC_POTENTIAL,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: "ohm",
      base: _.ELECTRIC_RESISTANCE,
      prefixes: O.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },
    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: "henry",
      base: _.ELECTRIC_INDUCTANCE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: "H",
      base: _.ELECTRIC_INDUCTANCE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: "siemens",
      base: _.ELECTRIC_CONDUCTANCE,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: "S",
      base: _.ELECTRIC_CONDUCTANCE,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: "weber",
      base: _.MAGNETIC_FLUX,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: "Wb",
      base: _.MAGNETIC_FLUX,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: "tesla",
      base: _.MAGNETIC_FLUX_DENSITY,
      prefixes: O.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: "T",
      base: _.MAGNETIC_FLUX_DENSITY,
      prefixes: O.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: "b",
      base: _.BIT,
      prefixes: O.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: "bits",
      base: _.BIT,
      prefixes: O.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: "B",
      base: _.BIT,
      prefixes: O.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: "bytes",
      base: _.BIT,
      prefixes: O.BINARY_LONG,
      value: 8,
      offset: 0
    }
  }, Q = {
    meters: "meter",
    inches: "inch",
    feet: "foot",
    yards: "yard",
    miles: "mile",
    links: "link",
    rods: "rod",
    chains: "chain",
    angstroms: "angstrom",
    lt: "l",
    litres: "litre",
    liter: "litre",
    liters: "litre",
    teaspoons: "teaspoon",
    tablespoons: "tablespoon",
    minims: "minim",
    fluiddrams: "fluiddram",
    fluidounces: "fluidounce",
    gills: "gill",
    cups: "cup",
    pints: "pint",
    quarts: "quart",
    gallons: "gallon",
    beerbarrels: "beerbarrel",
    oilbarrels: "oilbarrel",
    hogsheads: "hogshead",
    gtts: "gtt",
    grams: "gram",
    tons: "ton",
    tonnes: "tonne",
    grains: "grain",
    drams: "dram",
    ounces: "ounce",
    poundmasses: "poundmass",
    hundredweights: "hundredweight",
    sticks: "stick",
    lb: "lbm",
    lbs: "lbm",
    kips: "kip",
    kgf: "kilogramforce",
    acres: "acre",
    hectares: "hectare",
    sqfeet: "sqft",
    sqyard: "sqyd",
    sqmile: "sqmi",
    sqmiles: "sqmi",
    mmhg: "mmHg",
    mmh2o: "mmH2O",
    cmh2o: "cmH2O",
    seconds: "second",
    secs: "second",
    minutes: "minute",
    mins: "minute",
    hours: "hour",
    hr: "hour",
    hrs: "hour",
    days: "day",
    weeks: "week",
    months: "month",
    years: "year",
    decades: "decade",
    centuries: "century",
    millennia: "millennium",
    hertz: "hertz",
    radians: "radian",
    degrees: "degree",
    gradians: "gradian",
    cycles: "cycle",
    arcsecond: "arcsec",
    arcseconds: "arcsec",
    arcminute: "arcmin",
    arcminutes: "arcmin",
    BTUs: "BTU",
    watts: "watt",
    joules: "joule",
    amperes: "ampere",
    amps: "ampere",
    amp: "ampere",
    coulombs: "coulomb",
    volts: "volt",
    ohms: "ohm",
    farads: "farad",
    webers: "weber",
    teslas: "tesla",
    electronvolts: "electronvolt",
    moles: "mole",
    bit: "bits",
    byte: "bytes"
  };
  function ae(k) {
    if (k.number === "BigNumber") {
      var Z = Gc(b);
      z.rad.value = new b(1), z.deg.value = Z.div(180), z.grad.value = Z.div(200), z.cycle.value = Z.times(2), z.arcsec.value = Z.div(648e3), z.arcmin.value = Z.div(10800);
    } else
      z.rad.value = 1, z.deg.value = Math.PI / 180, z.grad.value = Math.PI / 200, z.cycle.value = Math.PI * 2, z.arcsec.value = Math.PI / 648e3, z.arcmin.value = Math.PI / 10800;
    z.radian.value = z.rad.value, z.degree.value = z.deg.value, z.gradian.value = z.grad.value;
  }
  ae(t), e && e("config", function(k, Z) {
    k.number !== Z.number && ae(k);
  });
  var re = {
    si: {
      // Base units
      NONE: {
        unit: j,
        prefix: O.NONE[""]
      },
      LENGTH: {
        unit: z.m,
        prefix: O.SHORT[""]
      },
      MASS: {
        unit: z.g,
        prefix: O.SHORT.k
      },
      TIME: {
        unit: z.s,
        prefix: O.SHORT[""]
      },
      CURRENT: {
        unit: z.A,
        prefix: O.SHORT[""]
      },
      TEMPERATURE: {
        unit: z.K,
        prefix: O.SHORT[""]
      },
      LUMINOUS_INTENSITY: {
        unit: z.cd,
        prefix: O.SHORT[""]
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: z.mol,
        prefix: O.SHORT[""]
      },
      ANGLE: {
        unit: z.rad,
        prefix: O.SHORT[""]
      },
      BIT: {
        unit: z.bits,
        prefix: O.SHORT[""]
      },
      // Derived units
      FORCE: {
        unit: z.N,
        prefix: O.SHORT[""]
      },
      ENERGY: {
        unit: z.J,
        prefix: O.SHORT[""]
      },
      POWER: {
        unit: z.W,
        prefix: O.SHORT[""]
      },
      PRESSURE: {
        unit: z.Pa,
        prefix: O.SHORT[""]
      },
      ELECTRIC_CHARGE: {
        unit: z.C,
        prefix: O.SHORT[""]
      },
      ELECTRIC_CAPACITANCE: {
        unit: z.F,
        prefix: O.SHORT[""]
      },
      ELECTRIC_POTENTIAL: {
        unit: z.V,
        prefix: O.SHORT[""]
      },
      ELECTRIC_RESISTANCE: {
        unit: z.ohm,
        prefix: O.SHORT[""]
      },
      ELECTRIC_INDUCTANCE: {
        unit: z.H,
        prefix: O.SHORT[""]
      },
      ELECTRIC_CONDUCTANCE: {
        unit: z.S,
        prefix: O.SHORT[""]
      },
      MAGNETIC_FLUX: {
        unit: z.Wb,
        prefix: O.SHORT[""]
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: z.T,
        prefix: O.SHORT[""]
      },
      FREQUENCY: {
        unit: z.Hz,
        prefix: O.SHORT[""]
      }
    }
  };
  re.cgs = JSON.parse(JSON.stringify(re.si)), re.cgs.LENGTH = {
    unit: z.m,
    prefix: O.SHORT.c
  }, re.cgs.MASS = {
    unit: z.g,
    prefix: O.SHORT[""]
  }, re.cgs.FORCE = {
    unit: z.dyn,
    prefix: O.SHORT[""]
  }, re.cgs.ENERGY = {
    unit: z.erg,
    prefix: O.NONE[""]
  }, re.us = JSON.parse(JSON.stringify(re.si)), re.us.LENGTH = {
    unit: z.ft,
    prefix: O.NONE[""]
  }, re.us.MASS = {
    unit: z.lbm,
    prefix: O.NONE[""]
  }, re.us.TEMPERATURE = {
    unit: z.degF,
    prefix: O.NONE[""]
  }, re.us.FORCE = {
    unit: z.lbf,
    prefix: O.NONE[""]
  }, re.us.ENERGY = {
    unit: z.BTU,
    prefix: O.BTU[""]
  }, re.us.POWER = {
    unit: z.hp,
    prefix: O.NONE[""]
  }, re.us.PRESSURE = {
    unit: z.psi,
    prefix: O.NONE[""]
  }, re.auto = JSON.parse(JSON.stringify(re.si));
  var fe = re.auto;
  h.setUnitSystem = function(k) {
    if ($e(re, k))
      fe = re[k];
    else
      throw new Error("Unit system " + k + " does not exist. Choices are: " + Object.keys(re).join(", "));
  }, h.getUnitSystem = function() {
    for (var k in re)
      if ($e(re, k) && re[k] === fe)
        return k;
  }, h.typeConverters = {
    BigNumber: function(Z) {
      return Z != null && Z.isFraction ? new b(Z.n).div(Z.d).times(Z.s) : new b(Z + "");
    },
    Fraction: function(Z) {
      return new g(Z);
    },
    Complex: function(Z) {
      return Z;
    },
    number: function(Z) {
      return Z != null && Z.isFraction ? d(Z) : Z;
    }
  }, h.prototype._numberConverter = function() {
    var k = h.typeConverters[this.valueType()];
    if (k)
      return k;
    throw new TypeError('Unsupported Unit value type "' + this.valueType() + '"');
  }, h._getNumberConverter = function(k) {
    if (!h.typeConverters[k])
      throw new TypeError('Unsupported type "' + k + '"');
    return h.typeConverters[k];
  };
  for (var de in z)
    if ($e(z, de)) {
      var le = z[de];
      le.dimensions = le.base.dimensions;
    }
  for (var ie in Q)
    if ($e(Q, ie)) {
      var ye = z[Q[ie]], _e = {};
      for (var De in ye)
        $e(ye, De) && (_e[De] = ye[De]);
      _e.name = ie, z[ie] = _e;
    }
  h.isValidAlpha = function(Z) {
    return /^[a-zA-Z]$/.test(Z);
  };
  function Be(k) {
    for (var Z = 0; Z < k.length; Z++) {
      if (y = k.charAt(Z), Z === 0 && !h.isValidAlpha(y))
        throw new Error('Invalid unit name (must begin with alpha character): "' + k + '"');
      if (Z > 0 && !(h.isValidAlpha(y) || S(y)))
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + k + '"');
    }
  }
  return h.createUnit = function(k, Z) {
    if (typeof k != "object")
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    if (Z && Z.override) {
      for (var oe in k)
        if ($e(k, oe) && h.deleteUnit(oe), k[oe].aliases)
          for (var H = 0; H < k[oe].aliases.length; H++)
            h.deleteUnit(k[oe].aliases[H]);
    }
    var W;
    for (var te in k)
      $e(k, te) && (W = h.createUnitSingle(te, k[te]));
    return W;
  }, h.createUnitSingle = function(k, Z) {
    if ((typeof Z > "u" || Z === null) && (Z = {}), typeof k != "string")
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    if ($e(z, k))
      throw new Error('Cannot create unit "' + k + '": a unit with that name already exists');
    Be(k);
    var oe = null, H = [], W = 0, te, ge, ve;
    if (Z && Z.type === "Unit")
      oe = Z.clone();
    else if (typeof Z == "string")
      Z !== "" && (te = Z);
    else if (typeof Z == "object")
      te = Z.definition, ge = Z.prefixes, W = Z.offset, ve = Z.baseName, Z.aliases && (H = Z.aliases.valueOf());
    else
      throw new TypeError('Cannot create unit "' + k + '" from "' + Z.toString() + '": expecting "string" or "Unit" or "Object"');
    if (H) {
      for (var P = 0; P < H.length; P++)
        if ($e(z, H[P]))
          throw new Error('Cannot create alias "' + H[P] + '": a unit with that name already exists');
    }
    if (te && typeof te == "string" && !oe)
      try {
        oe = h.parse(te, {
          allowNoUnits: !0
        });
      } catch (M) {
        throw M.message = 'Could not create unit "' + k + '" from "' + te + '": ' + M.message, M;
      }
    else
      te && te.type === "Unit" && (oe = te.clone());
    H = H || [], W = W || 0, ge && ge.toUpperCase ? ge = O[ge.toUpperCase()] || O.NONE : ge = O.NONE;
    var V = {};
    if (oe) {
      V = {
        name: k,
        value: oe.value,
        dimensions: oe.dimensions.slice(0),
        prefixes: ge,
        offset: W
      };
      var me = !1;
      for (var Ne in _)
        if ($e(_, Ne)) {
          for (var be = !0, Oe = 0; Oe < G.length; Oe++)
            if (Math.abs((V.dimensions[Oe] || 0) - (_[Ne].dimensions[Oe] || 0)) > 1e-12) {
              be = !1;
              break;
            }
          if (be) {
            me = !0, V.base = _[Ne];
            break;
          }
        }
      if (!me) {
        ve = ve || k + "_STUFF";
        var Ae = {
          dimensions: oe.dimensions.slice(0)
        };
        Ae.key = ve, _[ve] = Ae, fe[ve] = {
          unit: V,
          prefix: O.NONE[""]
        }, V.base = _[ve];
      }
    } else {
      if (ve = ve || k + "_STUFF", G.indexOf(ve) >= 0)
        throw new Error('Cannot create new base unit "' + k + '": a base unit with that name already exists (and cannot be overridden)');
      G.push(ve);
      for (var ee in _)
        $e(_, ee) && (_[ee].dimensions[G.length - 1] = 0);
      for (var ue = {
        dimensions: []
      }, pe = 0; pe < G.length; pe++)
        ue.dimensions[pe] = 0;
      ue.dimensions[G.length - 1] = 1, ue.key = ve, _[ve] = ue, V = {
        name: k,
        value: 1,
        dimensions: _[ve].dimensions.slice(0),
        prefixes: ge,
        offset: W,
        base: _[ve]
      }, fe[ve] = {
        unit: V,
        prefix: O.NONE[""]
      };
    }
    h.UNITS[k] = V;
    for (var We = 0; We < H.length; We++) {
      var er = H[We], Re = {};
      for (var wr in V)
        $e(V, wr) && (Re[wr] = V[wr]);
      Re.name = er, h.UNITS[er] = Re;
    }
    return delete R.cache, new h(null, k);
  }, h.deleteUnit = function(k) {
    delete h.UNITS[k];
  }, h.PREFIXES = O, h.BASE_DIMENSIONS = G, h.BASE_UNITS = _, h.UNIT_SYSTEMS = re, h.UNITS = z, h;
}, {
  isClass: !0
}), Ev = "unit", TM = ["typed", "Unit"], BM = /* @__PURE__ */ q(Ev, TM, (r) => {
  var {
    typed: e,
    Unit: t
  } = r;
  return e(Ev, {
    Unit: function(a) {
      return a.clone();
    },
    string: function(a) {
      return t.isValuelessUnit(a) ? new t(null, a) : t.parse(a, {
        allowNoUnits: !0
      });
    },
    "number | BigNumber | Fraction | Complex, string | Unit": function(a, i) {
      return new t(a, i);
    },
    "number | BigNumber | Fraction": function(a) {
      return new t(a);
    },
    "Array | Matrix": e.referToSelf((n) => (a) => je(a, n))
  });
}), Dv = "sparse", _M = ["typed", "SparseMatrix"], FM = /* @__PURE__ */ q(Dv, _M, (r) => {
  var {
    typed: e,
    SparseMatrix: t
  } = r;
  return e(Dv, {
    "": function() {
      return new t([]);
    },
    string: function(a) {
      return new t([], a);
    },
    "Array | Matrix": function(a) {
      return new t(a);
    },
    "Array | Matrix, string": function(a, i) {
      return new t(a, i);
    }
  });
}), Sv = "createUnit", $M = ["typed", "Unit"], RM = /* @__PURE__ */ q(Sv, $M, (r) => {
  var {
    typed: e,
    Unit: t
  } = r;
  return e(Sv, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    "Object, Object": function(a, i) {
      return t.createUnit(a, i);
    },
    // Same as above but without the options.
    Object: function(a) {
      return t.createUnit(a, {});
    },
    // Shortcut method for creating one unit.
    "string, Unit | string | Object, Object": function(a, i, o) {
      var f = {};
      return f[a] = i, t.createUnit(f, o);
    },
    // Same as above but without the options.
    "string, Unit | string | Object": function(a, i) {
      var o = {};
      return o[a] = i, t.createUnit(o, {});
    },
    // Without a definition, creates a base unit.
    string: function(a) {
      var i = {};
      return i[a] = {}, t.createUnit(i, {});
    }
  });
}), Cv = "acos", IM = ["typed", "config", "Complex"], PM = /* @__PURE__ */ q(Cv, IM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Cv, {
    number: function(i) {
      return i >= -1 && i <= 1 || t.predictable ? Math.acos(i) : new n(i, 0).acos();
    },
    Complex: function(i) {
      return i.acos();
    },
    BigNumber: function(i) {
      return i.acos();
    }
  });
}), Mv = "acosh", qM = ["typed", "config", "Complex"], LM = /* @__PURE__ */ q(Mv, qM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Mv, {
    number: function(i) {
      return i >= 1 || t.predictable ? A0(i) : i <= -1 ? new n(Math.log(Math.sqrt(i * i - 1) - i), Math.PI) : new n(i, 0).acosh();
    },
    Complex: function(i) {
      return i.acosh();
    },
    BigNumber: function(i) {
      return i.acosh();
    }
  });
}), Ov = "acot", zM = ["typed", "BigNumber"], UM = /* @__PURE__ */ q(Ov, zM, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(Ov, {
    number: E0,
    Complex: function(a) {
      return a.acot();
    },
    BigNumber: function(a) {
      return new t(1).div(a).atan();
    }
  });
}), Tv = "acoth", kM = ["typed", "config", "Complex", "BigNumber"], GM = /* @__PURE__ */ q(Tv, kM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: a
  } = r;
  return e(Tv, {
    number: function(o) {
      return o >= 1 || o <= -1 || t.predictable ? D0(o) : new n(o, 0).acoth();
    },
    Complex: function(o) {
      return o.acoth();
    },
    BigNumber: function(o) {
      return new a(1).div(o).atanh();
    }
  });
}), Bv = "acsc", VM = ["typed", "config", "Complex", "BigNumber"], HM = /* @__PURE__ */ q(Bv, VM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: a
  } = r;
  return e(Bv, {
    number: function(o) {
      return o <= -1 || o >= 1 || t.predictable ? S0(o) : new n(o, 0).acsc();
    },
    Complex: function(o) {
      return o.acsc();
    },
    BigNumber: function(o) {
      return new a(1).div(o).asin();
    }
  });
}), _v = "acsch", ZM = ["typed", "BigNumber"], YM = /* @__PURE__ */ q(_v, ZM, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(_v, {
    number: C0,
    Complex: function(a) {
      return a.acsch();
    },
    BigNumber: function(a) {
      return new t(1).div(a).asinh();
    }
  });
}), Fv = "asec", WM = ["typed", "config", "Complex", "BigNumber"], JM = /* @__PURE__ */ q(Fv, WM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: a
  } = r;
  return e(Fv, {
    number: function(o) {
      return o <= -1 || o >= 1 || t.predictable ? M0(o) : new n(o, 0).asec();
    },
    Complex: function(o) {
      return o.asec();
    },
    BigNumber: function(o) {
      return new a(1).div(o).acos();
    }
  });
}), $v = "asech", XM = ["typed", "config", "Complex", "BigNumber"], KM = /* @__PURE__ */ q($v, XM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n,
    BigNumber: a
  } = r;
  return e($v, {
    number: function(o) {
      if (o <= 1 && o >= -1 || t.predictable) {
        var f = 1 / o;
        if (f > 0 || t.predictable)
          return O0(o);
        var l = Math.sqrt(f * f - 1);
        return new n(Math.log(l - f), Math.PI);
      }
      return new n(o, 0).asech();
    },
    Complex: function(o) {
      return o.asech();
    },
    BigNumber: function(o) {
      return new a(1).div(o).acosh();
    }
  });
}), Rv = "asin", QM = ["typed", "config", "Complex"], jM = /* @__PURE__ */ q(Rv, QM, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Rv, {
    number: function(i) {
      return i >= -1 && i <= 1 || t.predictable ? Math.asin(i) : new n(i, 0).asin();
    },
    Complex: function(i) {
      return i.asin();
    },
    BigNumber: function(i) {
      return i.asin();
    }
  });
}), eO = "asinh", rO = ["typed"], tO = /* @__PURE__ */ q(eO, rO, (r) => {
  var {
    typed: e
  } = r;
  return e("asinh", {
    number: T0,
    Complex: function(n) {
      return n.asinh();
    },
    BigNumber: function(n) {
      return n.asinh();
    }
  });
}), nO = "atan", aO = ["typed"], iO = /* @__PURE__ */ q(nO, aO, (r) => {
  var {
    typed: e
  } = r;
  return e("atan", {
    number: function(n) {
      return Math.atan(n);
    },
    Complex: function(n) {
      return n.atan();
    },
    BigNumber: function(n) {
      return n.atan();
    }
  });
}), Iv = "atan2", oO = ["typed", "matrix", "equalScalar", "BigNumber", "DenseMatrix", "concat"], sO = /* @__PURE__ */ q(Iv, oO, (r) => {
  var {
    typed: e,
    matrix: t,
    equalScalar: n,
    BigNumber: a,
    DenseMatrix: i,
    concat: o
  } = r, f = qt({
    typed: e,
    equalScalar: n
  }), l = ot({
    typed: e
  }), u = H0({
    typed: e,
    equalScalar: n
  }), s = Gr({
    typed: e,
    equalScalar: n
  }), c = Fr({
    typed: e,
    DenseMatrix: i
  }), m = br({
    typed: e,
    matrix: t,
    concat: o
  });
  return e(Iv, {
    "number, number": Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored
    // the imaginary.
    "BigNumber, BigNumber": (v, d) => a.atan2(v, d)
  }, m({
    scalar: "number | BigNumber",
    SS: u,
    DS: l,
    SD: f,
    Ss: s,
    sS: c
  }));
}), Pv = "atanh", uO = ["typed", "config", "Complex"], cO = /* @__PURE__ */ q(Pv, uO, (r) => {
  var {
    typed: e,
    config: t,
    Complex: n
  } = r;
  return e(Pv, {
    number: function(i) {
      return i <= 1 && i >= -1 || t.predictable ? B0(i) : new n(i, 0).atanh();
    },
    Complex: function(i) {
      return i.atanh();
    },
    BigNumber: function(i) {
      return i.atanh();
    }
  });
}), ja = /* @__PURE__ */ q("trigUnit", ["typed"], (r) => {
  var {
    typed: e
  } = r;
  return {
    Unit: e.referToSelf((t) => (n) => {
      if (!n.hasBase(n.constructor.BASE_UNITS.ANGLE))
        throw new TypeError("Unit in function cot is no angle");
      return e.find(t, n.valueType())(n.value);
    })
  };
}), qv = "cos", lO = ["typed"], fO = /* @__PURE__ */ q(qv, lO, (r) => {
  var {
    typed: e
  } = r, t = ja({
    typed: e
  });
  return e(qv, {
    number: Math.cos,
    "Complex | BigNumber": (n) => n.cos()
  }, t);
}), Lv = "cosh", mO = ["typed"], vO = /* @__PURE__ */ q(Lv, mO, (r) => {
  var {
    typed: e
  } = r;
  return e(Lv, {
    number: iw,
    "Complex | BigNumber": (t) => t.cosh()
  });
}), zv = "cot", pO = ["typed", "BigNumber"], dO = /* @__PURE__ */ q(zv, pO, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r, n = ja({
    typed: e
  });
  return e(zv, {
    number: _0,
    Complex: (a) => a.cot(),
    BigNumber: (a) => new t(1).div(a.tan())
  }, n);
}), Uv = "coth", hO = ["typed", "BigNumber"], gO = /* @__PURE__ */ q(Uv, hO, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(Uv, {
    number: F0,
    Complex: (n) => n.coth(),
    BigNumber: (n) => new t(1).div(n.tanh())
  });
}), kv = "csc", yO = ["typed", "BigNumber"], bO = /* @__PURE__ */ q(kv, yO, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r, n = ja({
    typed: e
  });
  return e(kv, {
    number: $0,
    Complex: (a) => a.csc(),
    BigNumber: (a) => new t(1).div(a.sin())
  }, n);
}), Gv = "csch", xO = ["typed", "BigNumber"], wO = /* @__PURE__ */ q(Gv, xO, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(Gv, {
    number: R0,
    Complex: (n) => n.csch(),
    BigNumber: (n) => new t(1).div(n.sinh())
  });
}), Vv = "sec", NO = ["typed", "BigNumber"], AO = /* @__PURE__ */ q(Vv, NO, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r, n = ja({
    typed: e
  });
  return e(Vv, {
    number: I0,
    Complex: (a) => a.sec(),
    BigNumber: (a) => new t(1).div(a.cos())
  }, n);
}), Hv = "sech", EO = ["typed", "BigNumber"], DO = /* @__PURE__ */ q(Hv, EO, (r) => {
  var {
    typed: e,
    BigNumber: t
  } = r;
  return e(Hv, {
    number: P0,
    Complex: (n) => n.sech(),
    BigNumber: (n) => new t(1).div(n.cosh())
  });
}), Zv = "sin", SO = ["typed"], CO = /* @__PURE__ */ q(Zv, SO, (r) => {
  var {
    typed: e
  } = r, t = ja({
    typed: e
  });
  return e(Zv, {
    number: Math.sin,
    "Complex | BigNumber": (n) => n.sin()
  }, t);
}), Yv = "sinh", MO = ["typed"], OO = /* @__PURE__ */ q(Yv, MO, (r) => {
  var {
    typed: e
  } = r;
  return e(Yv, {
    number: q0,
    "Complex | BigNumber": (t) => t.sinh()
  });
}), Wv = "tan", TO = ["typed"], BO = /* @__PURE__ */ q(Wv, TO, (r) => {
  var {
    typed: e
  } = r, t = ja({
    typed: e
  });
  return e(Wv, {
    number: Math.tan,
    "Complex | BigNumber": (n) => n.tan()
  }, t);
}), _O = "tanh", FO = ["typed"], $O = /* @__PURE__ */ q(_O, FO, (r) => {
  var {
    typed: e
  } = r;
  return e("tanh", {
    number: sw,
    "Complex | BigNumber": (t) => t.tanh()
  });
}), Jv = "setCartesian", RO = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], IO = /* @__PURE__ */ q(Jv, RO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i,
    DenseMatrix: o
  } = r;
  return e(Jv, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      var s = [];
      if (n(t(l), new i(0)) !== 0 && n(t(u), new i(0)) !== 0) {
        var c = or(Array.isArray(l) ? l : l.toArray()).sort(a), m = or(Array.isArray(u) ? u : u.toArray()).sort(a);
        s = [];
        for (var v = 0; v < c.length; v++)
          for (var d = 0; d < m.length; d++)
            s.push([c[v], m[d]]);
      }
      return Array.isArray(l) && Array.isArray(u) ? s : new o(s);
    }
  });
}), Xv = "setDifference", PO = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], qO = /* @__PURE__ */ q(Xv, PO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i,
    DenseMatrix: o
  } = r;
  return e(Xv, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      var s;
      if (n(t(l), new i(0)) === 0)
        s = [];
      else {
        if (n(t(u), new i(0)) === 0)
          return or(l.toArray());
        var c = qa(or(Array.isArray(l) ? l : l.toArray()).sort(a)), m = qa(or(Array.isArray(u) ? u : u.toArray()).sort(a));
        s = [];
        for (var v, d = 0; d < c.length; d++) {
          v = !1;
          for (var p = 0; p < m.length; p++)
            if (a(c[d].value, m[p].value) === 0 && c[d].identifier === m[p].identifier) {
              v = !0;
              break;
            }
          v || s.push(c[d]);
        }
      }
      return Array.isArray(l) && Array.isArray(u) ? Fo(s) : new o(Fo(s));
    }
  });
}), Kv = "setDistinct", LO = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], zO = /* @__PURE__ */ q(Kv, LO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i,
    DenseMatrix: o
  } = r;
  return e(Kv, {
    "Array | Matrix": function(l) {
      var u;
      if (n(t(l), new i(0)) === 0)
        u = [];
      else {
        var s = or(Array.isArray(l) ? l : l.toArray()).sort(a);
        u = [], u.push(s[0]);
        for (var c = 1; c < s.length; c++)
          a(s[c], s[c - 1]) !== 0 && u.push(s[c]);
      }
      return Array.isArray(l) ? u : new o(u);
    }
  });
}), Qv = "setIntersect", UO = ["typed", "size", "subset", "compareNatural", "Index", "DenseMatrix"], kO = /* @__PURE__ */ q(Qv, UO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i,
    DenseMatrix: o
  } = r;
  return e(Qv, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      var s;
      if (n(t(l), new i(0)) === 0 || n(t(u), new i(0)) === 0)
        s = [];
      else {
        var c = qa(or(Array.isArray(l) ? l : l.toArray()).sort(a)), m = qa(or(Array.isArray(u) ? u : u.toArray()).sort(a));
        s = [];
        for (var v = 0; v < c.length; v++)
          for (var d = 0; d < m.length; d++)
            if (a(c[v].value, m[d].value) === 0 && c[v].identifier === m[d].identifier) {
              s.push(c[v]);
              break;
            }
      }
      return Array.isArray(l) && Array.isArray(u) ? Fo(s) : new o(Fo(s));
    }
  });
}), jv = "setIsSubset", GO = ["typed", "size", "subset", "compareNatural", "Index"], VO = /* @__PURE__ */ q(jv, GO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i
  } = r;
  return e(jv, {
    "Array | Matrix, Array | Matrix": function(f, l) {
      if (n(t(f), new i(0)) === 0)
        return !0;
      if (n(t(l), new i(0)) === 0)
        return !1;
      for (var u = qa(or(Array.isArray(f) ? f : f.toArray()).sort(a)), s = qa(or(Array.isArray(l) ? l : l.toArray()).sort(a)), c, m = 0; m < u.length; m++) {
        c = !1;
        for (var v = 0; v < s.length; v++)
          if (a(u[m].value, s[v].value) === 0 && u[m].identifier === s[v].identifier) {
            c = !0;
            break;
          }
        if (c === !1)
          return !1;
      }
      return !0;
    }
  });
}), ep = "setMultiplicity", HO = ["typed", "size", "subset", "compareNatural", "Index"], ZO = /* @__PURE__ */ q(ep, HO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i
  } = r;
  return e(ep, {
    "number | BigNumber | Fraction | Complex, Array | Matrix": function(f, l) {
      if (n(t(l), new i(0)) === 0)
        return 0;
      for (var u = or(Array.isArray(l) ? l : l.toArray()), s = 0, c = 0; c < u.length; c++)
        a(u[c], f) === 0 && s++;
      return s;
    }
  });
}), rp = "setPowerset", YO = ["typed", "size", "subset", "compareNatural", "Index"], WO = /* @__PURE__ */ q(rp, YO, (r) => {
  var {
    typed: e,
    size: t,
    subset: n,
    compareNatural: a,
    Index: i
  } = r;
  return e(rp, {
    "Array | Matrix": function(u) {
      if (n(t(u), new i(0)) === 0)
        return [];
      for (var s = or(Array.isArray(u) ? u : u.toArray()).sort(a), c = [], m = 0; m.toString(2).length <= s.length; )
        c.push(o(s, m.toString(2).split("").reverse())), m++;
      return f(c);
    }
  });
  function o(l, u) {
    for (var s = [], c = 0; c < u.length; c++)
      u[c] === "1" && s.push(l[c]);
    return s;
  }
  function f(l) {
    for (var u = [], s = l.length - 1; s > 0; s--)
      for (var c = 0; c < s; c++)
        l[c].length > l[c + 1].length && (u = l[c], l[c] = l[c + 1], l[c + 1] = u);
    return l;
  }
}), tp = "setSize", JO = ["typed", "compareNatural"], XO = /* @__PURE__ */ q(tp, JO, (r) => {
  var {
    typed: e,
    compareNatural: t
  } = r;
  return e(tp, {
    "Array | Matrix": function(a) {
      return Array.isArray(a) ? or(a).length : or(a.toArray()).length;
    },
    "Array | Matrix, boolean": function(a, i) {
      if (i === !1 || a.length === 0)
        return Array.isArray(a) ? or(a).length : or(a.toArray()).length;
      for (var o = or(Array.isArray(a) ? a : a.toArray()).sort(t), f = 1, l = 1; l < o.length; l++)
        t(o[l], o[l - 1]) !== 0 && f++;
      return f;
    }
  });
}), np = "setSymDifference", KO = ["typed", "size", "concat", "subset", "setDifference", "Index"], QO = /* @__PURE__ */ q(np, KO, (r) => {
  var {
    typed: e,
    size: t,
    concat: n,
    subset: a,
    setDifference: i,
    Index: o
  } = r;
  return e(np, {
    "Array | Matrix, Array | Matrix": function(l, u) {
      if (a(t(l), new o(0)) === 0)
        return or(u);
      if (a(t(u), new o(0)) === 0)
        return or(l);
      var s = or(l), c = or(u);
      return n(i(s, c), i(c, s));
    }
  });
}), ap = "setUnion", jO = ["typed", "size", "concat", "subset", "setIntersect", "setSymDifference", "Index"], eT = /* @__PURE__ */ q(ap, jO, (r) => {
  var {
    typed: e,
    size: t,
    concat: n,
    subset: a,
    setIntersect: i,
    setSymDifference: o,
    Index: f
  } = r;
  return e(ap, {
    "Array | Matrix, Array | Matrix": function(u, s) {
      if (a(t(u), new f(0)) === 0)
        return or(s);
      if (a(t(s), new f(0)) === 0)
        return or(u);
      var c = or(u), m = or(s);
      return n(o(c, m), i(c, m));
    }
  });
}), ip = "add", rT = ["typed", "matrix", "addScalar", "equalScalar", "DenseMatrix", "SparseMatrix", "concat"], tT = /* @__PURE__ */ q(ip, rT, (r) => {
  var {
    typed: e,
    matrix: t,
    addScalar: n,
    equalScalar: a,
    DenseMatrix: i,
    SparseMatrix: o,
    concat: f
  } = r, l = _n({
    typed: e
  }), u = qc({
    typed: e,
    equalScalar: a
  }), s = Kn({
    typed: e,
    DenseMatrix: i
  }), c = br({
    typed: e,
    matrix: t,
    concat: f
  });
  return e(ip, {
    "any, any": n,
    "any, any, ...any": e.referToSelf((m) => (v, d, p) => {
      for (var b = m(v, d), g = 0; g < p.length; g++)
        b = m(b, p[g]);
      return b;
    })
  }, c({
    elop: n,
    DS: l,
    SS: u,
    Ss: s
  }));
}), op = "hypot", nT = ["typed", "abs", "addScalar", "divideScalar", "multiplyScalar", "sqrt", "smaller", "isPositive"], aT = /* @__PURE__ */ q(op, nT, (r) => {
  var {
    typed: e,
    abs: t,
    addScalar: n,
    divideScalar: a,
    multiplyScalar: i,
    sqrt: o,
    smaller: f,
    isPositive: l
  } = r;
  return e(op, {
    "... number | BigNumber": u,
    Array: u,
    Matrix: (s) => u(or(s.toArray()))
  });
  function u(s) {
    for (var c = 0, m = 0, v = 0; v < s.length; v++) {
      if (on(s[v]))
        throw new TypeError("Unexpected type of argument to hypot");
      var d = t(s[v]);
      f(m, d) ? (c = i(c, i(a(m, d), a(m, d))), c = n(c, 1), m = d) : c = n(c, l(d) ? i(a(d, m), a(d, m)) : d);
    }
    return i(m, o(c));
  }
}), sp = "norm", iT = ["typed", "abs", "add", "pow", "conj", "sqrt", "multiply", "equalScalar", "larger", "smaller", "matrix", "ctranspose", "eigs"], oT = /* @__PURE__ */ q(sp, iT, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    pow: a,
    conj: i,
    sqrt: o,
    multiply: f,
    equalScalar: l,
    larger: u,
    smaller: s,
    matrix: c,
    ctranspose: m,
    eigs: v
  } = r;
  return e(sp, {
    number: Math.abs,
    Complex: function(D) {
      return D.abs();
    },
    BigNumber: function(D) {
      return D.abs();
    },
    boolean: function(D) {
      return Math.abs(D);
    },
    Array: function(D) {
      return y(c(D), 2);
    },
    Matrix: function(D) {
      return y(D, 2);
    },
    "Array, number | BigNumber | string": function(D, S) {
      return y(c(D), S);
    },
    "Matrix, number | BigNumber | string": function(D, S) {
      return y(D, S);
    }
  });
  function d(E) {
    var D = 0;
    return E.forEach(function(S) {
      var A = t(S);
      u(A, D) && (D = A);
    }, !0), D;
  }
  function p(E) {
    var D;
    return E.forEach(function(S) {
      var A = t(S);
      (!D || s(A, D)) && (D = A);
    }, !0), D || 0;
  }
  function b(E, D) {
    if (D === Number.POSITIVE_INFINITY || D === "inf")
      return d(E);
    if (D === Number.NEGATIVE_INFINITY || D === "-inf")
      return p(E);
    if (D === "fro")
      return y(E, 2);
    if (typeof D == "number" && !isNaN(D)) {
      if (!l(D, 0)) {
        var S = 0;
        return E.forEach(function(A) {
          S = n(a(t(A), D), S);
        }, !0), a(S, 1 / D);
      }
      return Number.POSITIVE_INFINITY;
    }
    throw new Error("Unsupported parameter value");
  }
  function g(E) {
    var D = 0;
    return E.forEach(function(S, A) {
      D = n(D, f(S, i(S)));
    }), t(o(D));
  }
  function N(E) {
    var D = [], S = 0;
    return E.forEach(function(A, C) {
      var T = C[1], $ = n(D[T] || 0, t(A));
      u($, S) && (S = $), D[T] = $;
    }, !0), S;
  }
  function h(E) {
    var D = E.size();
    if (D[0] !== D[1])
      throw new RangeError("Invalid matrix dimensions");
    var S = m(E), A = f(S, E), C = v(A).values.toArray(), T = C[C.length - 1];
    return t(o(T));
  }
  function w(E) {
    var D = [], S = 0;
    return E.forEach(function(A, C) {
      var T = C[0], $ = n(D[T] || 0, t(A));
      u($, S) && (S = $), D[T] = $;
    }, !0), S;
  }
  function x(E, D) {
    if (D === 1)
      return N(E);
    if (D === Number.POSITIVE_INFINITY || D === "inf")
      return w(E);
    if (D === "fro")
      return g(E);
    if (D === 2)
      return h(E);
    throw new Error("Unsupported parameter value " + D);
  }
  function y(E, D) {
    var S = E.size();
    if (S.length === 1)
      return b(E, D);
    if (S.length === 2) {
      if (S[0] && S[1])
        return x(E, D);
      throw new RangeError("Invalid matrix dimensions");
    }
  }
}), up = "dot", sT = ["typed", "addScalar", "multiplyScalar", "conj", "size"], uT = /* @__PURE__ */ q(up, sT, (r) => {
  var {
    typed: e,
    addScalar: t,
    multiplyScalar: n,
    conj: a,
    size: i
  } = r;
  return e(up, {
    "Array | DenseMatrix, Array | DenseMatrix": f,
    "SparseMatrix, SparseMatrix": l
  });
  function o(s, c) {
    var m = u(s), v = u(c), d, p;
    if (m.length === 1)
      d = m[0];
    else if (m.length === 2 && m[1] === 1)
      d = m[0];
    else
      throw new RangeError("Expected a column vector, instead got a matrix of size (" + m.join(", ") + ")");
    if (v.length === 1)
      p = v[0];
    else if (v.length === 2 && v[1] === 1)
      p = v[0];
    else
      throw new RangeError("Expected a column vector, instead got a matrix of size (" + v.join(", ") + ")");
    if (d !== p)
      throw new RangeError("Vectors must have equal length (" + d + " != " + p + ")");
    if (d === 0)
      throw new RangeError("Cannot calculate the dot product of empty vectors");
    return d;
  }
  function f(s, c) {
    var m = o(s, c), v = Le(s) ? s._data : s, d = Le(s) ? s._datatype : void 0, p = Le(c) ? c._data : c, b = Le(c) ? c._datatype : void 0, g = u(s).length === 2, N = u(c).length === 2, h = t, w = n;
    if (d && b && d === b && typeof d == "string") {
      var x = d;
      h = e.find(t, [x, x]), w = e.find(n, [x, x]);
    }
    if (!g && !N) {
      for (var y = w(a(v[0]), p[0]), E = 1; E < m; E++)
        y = h(y, w(a(v[E]), p[E]));
      return y;
    }
    if (!g && N) {
      for (var D = w(a(v[0]), p[0][0]), S = 1; S < m; S++)
        D = h(D, w(a(v[S]), p[S][0]));
      return D;
    }
    if (g && !N) {
      for (var A = w(a(v[0][0]), p[0]), C = 1; C < m; C++)
        A = h(A, w(a(v[C][0]), p[C]));
      return A;
    }
    if (g && N) {
      for (var T = w(a(v[0][0]), p[0][0]), $ = 1; $ < m; $++)
        T = h(T, w(a(v[$][0]), p[$][0]));
      return T;
    }
  }
  function l(s, c) {
    o(s, c);
    for (var m = s._index, v = s._values, d = c._index, p = c._values, b = 0, g = t, N = n, h = 0, w = 0; h < m.length && w < d.length; ) {
      var x = m[h], y = d[w];
      if (x < y) {
        h++;
        continue;
      }
      if (x > y) {
        w++;
        continue;
      }
      x === y && (b = g(b, N(v[h], p[w])), h++, w++);
    }
    return b;
  }
  function u(s) {
    return Le(s) ? s.size() : i(s);
  }
}), cT = "trace", lT = ["typed", "matrix", "add"], fT = /* @__PURE__ */ q(cT, lT, (r) => {
  var {
    typed: e,
    matrix: t,
    add: n
  } = r;
  return e("trace", {
    Array: function(f) {
      return a(t(f));
    },
    SparseMatrix: i,
    DenseMatrix: a,
    any: Ge
  });
  function a(o) {
    var f = o._size, l = o._data;
    switch (f.length) {
      case 1:
        if (f[0] === 1)
          return Ge(l[0]);
        throw new RangeError("Matrix must be square (size: " + Je(f) + ")");
      case 2: {
        var u = f[0], s = f[1];
        if (u === s) {
          for (var c = 0, m = 0; m < u; m++)
            c = n(c, l[m][m]);
          return c;
        } else
          throw new RangeError("Matrix must be square (size: " + Je(f) + ")");
      }
      default:
        throw new RangeError("Matrix must be two dimensional (size: " + Je(f) + ")");
    }
  }
  function i(o) {
    var f = o._values, l = o._index, u = o._ptr, s = o._size, c = s[0], m = s[1];
    if (c === m) {
      var v = 0;
      if (f.length > 0)
        for (var d = 0; d < m; d++)
          for (var p = u[d], b = u[d + 1], g = p; g < b; g++) {
            var N = l[g];
            if (N === d) {
              v = n(v, f[g]);
              break;
            }
            if (N > d)
              break;
          }
      return v;
    }
    throw new RangeError("Matrix must be square (size: " + Je(s) + ")");
  }
}), cp = "index", mT = ["typed", "Index"], vT = /* @__PURE__ */ q(cp, mT, (r) => {
  var {
    typed: e,
    Index: t
  } = r;
  return e(cp, {
    "...number | string | BigNumber | Range | Array | Matrix": function(a) {
      var i = a.map(function(f) {
        return rr(f) ? f.toNumber() : sr(f) || Le(f) ? f.map(function(l) {
          return rr(l) ? l.toNumber() : l;
        }) : f;
      }), o = new t();
      return t.apply(o, i), o;
    }
  });
}), ag = /* @__PURE__ */ new Set(["end"]), pT = "Node", dT = ["mathWithTransform"], hT = /* @__PURE__ */ q(pT, dT, (r) => {
  var {
    mathWithTransform: e
  } = r;
  function t(a) {
    for (var i of [...ag])
      if (a.has(i))
        throw new Error('Scope contains an illegal symbol, "' + i + '" is a reserved keyword');
  }
  class n {
    get type() {
      return "Node";
    }
    get isNode() {
      return !0;
    }
    /**
     * Evaluate the node
     * @param {Object} [scope]  Scope to read/write variables
     * @return {*}              Returns the result
     */
    evaluate(i) {
      return this.compile().evaluate(i);
    }
    /**
     * Compile the node into an optimized, evauatable JavaScript function
     * @return {{evaluate: function([Object])}} object
     *                Returns an object with a function 'evaluate',
     *                which can be invoked as expr.evaluate([scope: Object]),
     *                where scope is an optional object with
     *                variables.
     */
    compile() {
      var i = this._compile(e, {}), o = {}, f = null;
      function l(u) {
        var s = Oa(u);
        return t(s), i(s, o, f);
      }
      return {
        evaluate: l
      };
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, o) {
      throw new Error("Method _compile must be implemented by type " + this.type);
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      throw new Error("Cannot run forEach on a Node interface");
    }
    /**
     * Create a new Node whose children are the results of calling the
     * provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {OperatorNode} Returns a transformed copy of the node
     */
    map(i) {
      throw new Error("Cannot run map on a Node interface");
    }
    /**
     * Validate whether an object is a Node, for use with map
     * @param {Node} node
     * @returns {Node} Returns the input if it's a node, else throws an Error
     * @protected
     */
    _ifNode(i) {
      if (!mr(i))
        throw new TypeError("Callback function must return a Node");
      return i;
    }
    /**
     * Recursively traverse all nodes in a node tree. Executes given callback for
     * this node and each of its child nodes.
     * @param {function(node: Node, path: string, parent: Node)} callback
     *          A callback called for every node in the node tree.
     */
    traverse(i) {
      i(this, null, null);
      function o(f, l) {
        f.forEach(function(u, s, c) {
          l(u, s, c), o(u, l);
        });
      }
      o(this, i);
    }
    /**
     * Recursively transform a node tree via a transform function.
     *
     * For example, to replace all nodes of type SymbolNode having name 'x' with
     * a ConstantNode with value 2:
     *
     *     const res = Node.transform(function (node, path, parent) {
     *       if (node && node.isSymbolNode) && (node.name === 'x')) {
     *         return new ConstantNode(2)
     *       }
     *       else {
     *         return node
     *       }
     *     })
     *
     * @param {function(node: Node, path: string, parent: Node) : Node} callback
     *          A mapping function accepting a node, and returning
     *          a replacement for the node or the original node. The "signature"
     *          of the callback must be:
     *          callback(node: Node, index: string, parent: Node) : Node
     * @return {Node} Returns the original node or its replacement
     */
    transform(i) {
      function o(f, l, u) {
        var s = i(f, l, u);
        return s !== f ? s : f.map(o);
      }
      return o(this, null, null);
    }
    /**
     * Find any node in the node tree matching given filter function. For
     * example, to find all nodes of type SymbolNode having name 'x':
     *
     *     const results = Node.filter(function (node) {
     *       return (node && node.isSymbolNode) && (node.name === 'x')
     *     })
     *
     * @param {function(node: Node, path: string, parent: Node) : Node} callback
     *            A test function returning true when a node matches, and false
     *            otherwise. Function signature:
     *            callback(node: Node, index: string, parent: Node) : boolean
     * @return {Node[]} nodes
     *            An array with nodes matching given filter criteria
     */
    filter(i) {
      var o = [];
      return this.traverse(function(f, l, u) {
        i(f, l, u) && o.push(f);
      }), o;
    }
    /**
     * Create a shallow clone of this node
     * @return {Node}
     */
    clone() {
      throw new Error("Cannot clone a Node interface");
    }
    /**
     * Create a deep clone of this node
     * @return {Node}
     */
    cloneDeep() {
      return this.map(function(i) {
        return i.cloneDeep();
      });
    }
    /**
     * Deep compare this node with another node.
     * @param {Node} other
     * @return {boolean} Returns true when both nodes are of the same type and
     *                   contain the same values (as do their childs)
     */
    equals(i) {
      return i ? this.type === i.type && Wn(this, i) : !1;
    }
    /**
     * Get string representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)"or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */
    toString(i) {
      var o = this._getCustomString(i);
      return typeof o < "u" ? o : this._toString(i);
    }
    /**
     * Get a JSON representation of the node
     * Both .toJSON() and the static .fromJSON(json) should be implemented by all
     * implementations of Node
     * @returns {Object}
     */
    toJSON() {
      throw new Error("Cannot serialize object: toJSON not implemented by " + this.type);
    }
    /**
     * Get HTML representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)" or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */
    toHTML(i) {
      var o = this._getCustomString(i);
      return typeof o < "u" ? o : this.toHTML(i);
    }
    /**
     * Internal function to generate the string output.
     * This has to be implemented by every Node
     *
     * @throws {Error}
     */
    _toString() {
      throw new Error("_toString not implemented for " + this.type);
    }
    /**
     * Get LaTeX representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)"or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */
    toTex(i) {
      var o = this._getCustomString(i);
      return typeof o < "u" ? o : this._toTex(i);
    }
    /**
     * Internal function to generate the LaTeX output.
     * This has to be implemented by every Node
     *
     * @param {Object} [options]
     * @throws {Error}
     */
    _toTex(i) {
      throw new Error("_toTex not implemented for " + this.type);
    }
    /**
     * Helper used by `to...` functions.
     */
    _getCustomString(i) {
      if (i && typeof i == "object")
        switch (typeof i.handler) {
          case "object":
          case "undefined":
            return;
          case "function":
            return i.handler(this, i);
          default:
            throw new TypeError("Object or function expected as callback");
        }
    }
    /**
     * Get identifier.
     * @return {string}
     */
    getIdentifier() {
      return this.type;
    }
    /**
     * Get the content of the current Node.
     * @return {Node} node
     **/
    getContent() {
      return this;
    }
  }
  return n;
}, {
  isClass: !0,
  isNode: !0
});
function st(r) {
  return r && r.isIndexError ? new Rt(r.index + 1, r.min + 1, r.max !== void 0 ? r.max + 1 : void 0) : r;
}
function ig(r) {
  var {
    subset: e
  } = r;
  return function(n, a) {
    try {
      if (Array.isArray(n))
        return e(n, a);
      if (n && typeof n.subset == "function")
        return n.subset(a);
      if (typeof n == "string")
        return e(n, a);
      if (typeof n == "object") {
        if (!a.isObjectProperty())
          throw new TypeError("Cannot apply a numeric index as object property");
        return rt(n, a.getObjectProperty());
      } else
        throw new TypeError("Cannot apply index: unsupported type of object");
    } catch (i) {
      throw st(i);
    }
  };
}
var to = "AccessorNode", gT = ["subset", "Node"], yT = /* @__PURE__ */ q(to, gT, (r) => {
  var {
    subset: e,
    Node: t
  } = r, n = ig({
    subset: e
  });
  function a(o) {
    return !(Yn(o) || bt(o) || ir(o) || Mn(o) || os(o) || cn(o) || Ir(o));
  }
  class i extends t {
    /**
     * @constructor AccessorNode
     * @extends {Node}
     * Access an object property or get a matrix subset
     *
     * @param {Node} object                 The object from which to retrieve
     *                                      a property or subset.
     * @param {IndexNode} index             IndexNode containing ranges
     */
    constructor(f, l) {
      if (super(), !mr(f))
        throw new TypeError('Node expected for parameter "object"');
      if (!Ya(l))
        throw new TypeError('IndexNode expected for parameter "index"');
      this.object = f, this.index = l;
    }
    // readonly property name
    get name() {
      return this.index ? this.index.isObjectProperty() ? this.index.getObjectProperty() : "" : this.object.name || "";
    }
    get type() {
      return to;
    }
    get isAccessorNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(f, l) {
      var u = this.object._compile(f, l), s = this.index._compile(f, l);
      if (this.index.isObjectProperty()) {
        var c = this.index.getObjectProperty();
        return function(v, d, p) {
          return rt(u(v, d, p), c);
        };
      } else
        return function(v, d, p) {
          var b = u(v, d, p), g = s(v, d, b);
          return n(b, g);
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(f) {
      f(this.object, "object", this), f(this.index, "index", this);
    }
    /**
     * Create a new AccessorNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {AccessorNode} Returns a transformed copy of the node
     */
    map(f) {
      return new i(this._ifNode(f(this.object, "object", this)), this._ifNode(f(this.index, "index", this)));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {AccessorNode}
     */
    clone() {
      return new i(this.object, this.index);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string}
     */
    _toString(f) {
      var l = this.object.toString(f);
      return a(this.object) && (l = "(" + l + ")"), l + this.index.toString(f);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string}
     */
    toHTML(f) {
      var l = this.object.toHTML(f);
      return a(this.object) && (l = '<span class="math-parenthesis math-round-parenthesis">(</span>' + l + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l + this.index.toHTML(f);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string}
     */
    _toTex(f) {
      var l = this.object.toTex(f);
      return a(this.object) && (l = "\\left(' + object + '\\right)"), l + this.index.toTex(f);
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: to,
        object: this.object,
        index: this.index
      };
    }
    /**
     * Instantiate an AccessorNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "AccessorNode", object: ..., index: ...}`,
     *     where mathjs is optional
     * @returns {AccessorNode}
     */
    static fromJSON(f) {
      return new i(f.object, f.index);
    }
  }
  return _r(i, "name", to), i;
}, {
  isClass: !0,
  isNode: !0
}), no = "ArrayNode", bT = ["Node"], xT = /* @__PURE__ */ q(no, bT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * @constructor ArrayNode
     * @extends {Node}
     * Holds an 1-dimensional array with items
     * @param {Node[]} [items]   1 dimensional array with items
     */
    constructor(a) {
      if (super(), this.items = a || [], !Array.isArray(this.items) || !this.items.every(mr))
        throw new TypeError("Array containing Nodes expected");
    }
    get type() {
      return no;
    }
    get isArrayNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, i) {
      var o = sn(this.items, function(u) {
        return u._compile(a, i);
      }), f = a.config.matrix !== "Array";
      if (f) {
        var l = a.matrix;
        return function(s, c, m) {
          return l(sn(o, function(v) {
            return v(s, c, m);
          }));
        };
      } else
        return function(s, c, m) {
          return sn(o, function(v) {
            return v(s, c, m);
          });
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      for (var i = 0; i < this.items.length; i++) {
        var o = this.items[i];
        a(o, "items[" + i + "]", this);
      }
    }
    /**
     * Create a new ArrayNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ArrayNode} Returns a transformed copy of the node
     */
    map(a) {
      for (var i = [], o = 0; o < this.items.length; o++)
        i[o] = this._ifNode(a(this.items[o], "items[" + o + "]", this));
      return new t(i);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ArrayNode}
     */
    clone() {
      return new t(this.items.slice(0));
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(a) {
      var i = this.items.map(function(o) {
        return o.toString(a);
      });
      return "[" + i.join(", ") + "]";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: no,
        items: this.items
      };
    }
    /**
     * Instantiate an ArrayNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ArrayNode", items: [...]}`,
     *                       where mathjs is optional
     * @returns {ArrayNode}
     */
    static fromJSON(a) {
      return new t(a.items);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toHTML(a) {
      var i = this.items.map(function(o) {
        return o.toHTML(a);
      });
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + i.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      function i(o, f) {
        var l = o.some(bt) && !o.every(bt), u = f || l, s = u ? "&" : "\\\\", c = o.map(function(m) {
          return m.items ? i(m.items, !f) : m.toTex(a);
        }).join(s);
        return l || !u || u && !f ? "\\begin{bmatrix}" + c + "\\end{bmatrix}" : c;
      }
      return i(this.items, !1);
    }
  }
  return _r(t, "name", no), t;
}, {
  isClass: !0,
  isNode: !0
});
function wT(r) {
  var {
    subset: e,
    matrix: t
  } = r;
  return function(a, i, o) {
    try {
      if (Array.isArray(a)) {
        var f = t(a).subset(i, o).valueOf();
        return f.forEach((l, u) => {
          a[u] = l;
        }), a;
      } else {
        if (a && typeof a.subset == "function")
          return a.subset(i, o);
        if (typeof a == "string")
          return e(a, i, o);
        if (typeof a == "object") {
          if (!i.isObjectProperty())
            throw TypeError("Cannot apply a numeric index as object property");
          return La(a, i.getObjectProperty(), o), a;
        } else
          throw new TypeError("Cannot apply index: unsupported type of object");
      }
    } catch (l) {
      throw st(l);
    }
  };
}
var Bt = [{
  // assignment
  AssignmentNode: {},
  FunctionAssignmentNode: {}
}, {
  // conditional expression
  ConditionalNode: {
    latexLeftParens: !1,
    latexRightParens: !1,
    latexParens: !1
    // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional
  }
}, {
  // logical or
  "OperatorNode:or": {
    op: "or",
    associativity: "left",
    associativeWith: []
  }
}, {
  // logical xor
  "OperatorNode:xor": {
    op: "xor",
    associativity: "left",
    associativeWith: []
  }
}, {
  // logical and
  "OperatorNode:and": {
    op: "and",
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitwise or
  "OperatorNode:bitOr": {
    op: "|",
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitwise xor
  "OperatorNode:bitXor": {
    op: "^|",
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitwise and
  "OperatorNode:bitAnd": {
    op: "&",
    associativity: "left",
    associativeWith: []
  }
}, {
  // relational operators
  "OperatorNode:equal": {
    op: "==",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:unequal": {
    op: "!=",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:smaller": {
    op: "<",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:larger": {
    op: ">",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:smallerEq": {
    op: "<=",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:largerEq": {
    op: ">=",
    associativity: "left",
    associativeWith: []
  },
  RelationalNode: {
    associativity: "left",
    associativeWith: []
  }
}, {
  // bitshift operators
  "OperatorNode:leftShift": {
    op: "<<",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:rightArithShift": {
    op: ">>",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:rightLogShift": {
    op: ">>>",
    associativity: "left",
    associativeWith: []
  }
}, {
  // unit conversion
  "OperatorNode:to": {
    op: "to",
    associativity: "left",
    associativeWith: []
  }
}, {
  // range
  RangeNode: {}
}, {
  // addition, subtraction
  "OperatorNode:add": {
    op: "+",
    associativity: "left",
    associativeWith: ["OperatorNode:add", "OperatorNode:subtract"]
  },
  "OperatorNode:subtract": {
    op: "-",
    associativity: "left",
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  "OperatorNode:multiply": {
    op: "*",
    associativity: "left",
    associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "Operator:dotMultiply", "Operator:dotDivide"]
  },
  "OperatorNode:divide": {
    op: "/",
    associativity: "left",
    associativeWith: [],
    latexLeftParens: !1,
    latexRightParens: !1,
    latexParens: !1
    // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX
  },
  "OperatorNode:dotMultiply": {
    op: ".*",
    associativity: "left",
    associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "OperatorNode:dotMultiply", "OperatorNode:doDivide"]
  },
  "OperatorNode:dotDivide": {
    op: "./",
    associativity: "left",
    associativeWith: []
  },
  "OperatorNode:mod": {
    op: "mod",
    associativity: "left",
    associativeWith: []
  }
}, {
  // Repeat multiplication for implicit multiplication
  "OperatorNode:multiply": {
    associativity: "left",
    associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "Operator:dotMultiply", "Operator:dotDivide"]
  }
}, {
  // unary prefix operators
  "OperatorNode:unaryPlus": {
    op: "+",
    associativity: "right"
  },
  "OperatorNode:unaryMinus": {
    op: "-",
    associativity: "right"
  },
  "OperatorNode:bitNot": {
    op: "~",
    associativity: "right"
  },
  "OperatorNode:not": {
    op: "not",
    associativity: "right"
  }
}, {
  // exponentiation
  "OperatorNode:pow": {
    op: "^",
    associativity: "right",
    associativeWith: [],
    latexRightParens: !1
    // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)
  },
  "OperatorNode:dotPow": {
    op: ".^",
    associativity: "right",
    associativeWith: []
  }
}, {
  // factorial
  "OperatorNode:factorial": {
    op: "!",
    associativity: "left"
  }
}, {
  // matrix transpose
  "OperatorNode:ctranspose": {
    op: "'",
    associativity: "left"
  }
}];
function ao(r, e) {
  if (!e || e !== "auto")
    return r;
  for (var t = r; cn(t); )
    t = t.content;
  return t;
}
function dr(r, e, t, n) {
  var a = r;
  e !== "keep" && (a = r.getContent());
  for (var i = a.getIdentifier(), o = null, f = 0; f < Bt.length; f++)
    if (i in Bt[f]) {
      o = f;
      break;
    }
  if (i === "OperatorNode:multiply" && a.implicit && t !== "show") {
    var l = ao(a.args[0], e);
    !(ir(l) && n && n.getIdentifier() === "OperatorNode:divide" && Wu(ao(n.args[0], e))) && !(l.getIdentifier() === "OperatorNode:divide" && Wu(ao(l.args[0], e)) && ir(ao(l.args[1]))) && (o += 1);
  }
  return o;
}
function ci(r, e) {
  var t = r;
  e !== "keep" && (t = r.getContent());
  var n = t.getIdentifier(), a = dr(t, e);
  if (a === null)
    return null;
  var i = Bt[a][n];
  if ($e(i, "associativity")) {
    if (i.associativity === "left")
      return "left";
    if (i.associativity === "right")
      return "right";
    throw Error("'" + n + "' has the invalid associativity '" + i.associativity + "'.");
  }
  return null;
}
function gu(r, e, t) {
  var n = t !== "keep" ? r.getContent() : r, a = t !== "keep" ? r.getContent() : e, i = n.getIdentifier(), o = a.getIdentifier(), f = dr(n, t);
  if (f === null)
    return null;
  var l = Bt[f][i];
  if ($e(l, "associativeWith") && l.associativeWith instanceof Array) {
    for (var u = 0; u < l.associativeWith.length; u++)
      if (l.associativeWith[u] === o)
        return !0;
    return !1;
  }
  return null;
}
function NT(r) {
  var e = "OperatorNode:" + r;
  for (var t of Bt)
    if (e in t)
      return t[e].op;
  return null;
}
var io = "AssignmentNode", AT = [
  "subset",
  "?matrix",
  // FIXME: should not be needed at all, should be handled by subset
  "Node"
], ET = /* @__PURE__ */ q(io, AT, (r) => {
  var {
    subset: e,
    matrix: t,
    Node: n
  } = r, a = ig({
    subset: e
  }), i = wT({
    subset: e,
    matrix: t
  });
  function o(l, u, s) {
    u || (u = "keep");
    var c = dr(l, u, s), m = dr(l.value, u, s);
    return u === "all" || m !== null && m <= c;
  }
  class f extends n {
    /**
     * @constructor AssignmentNode
     * @extends {Node}
     *
     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
     * replace a subset of a matrix like `A[2,2]=42`.
     *
     * Syntax:
     *
     *     new AssignmentNode(symbol, value)
     *     new AssignmentNode(object, index, value)
     *
     * Usage:
     *
     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2
     *    new AssignmentNode(new SymbolNode('a'),
     *                       new IndexNode('b'),
     *                       new ConstantNode(2))   // a.b=2
     *    new AssignmentNode(new SymbolNode('a'),
     *                       new IndexNode(1, 2),
     *                       new ConstantNode(3))  // a[1,2]=3
     *
     * @param {SymbolNode | AccessorNode} object
     *     Object on which to assign a value
     * @param {IndexNode} [index=null]
     *     Index, property name or matrix index. Optional. If not provided
     *     and `object` is a SymbolNode, the property is assigned to the
     *     global scope.
     * @param {Node} value
     *     The value to be assigned
     */
    constructor(u, s, c) {
      if (super(), this.object = u, this.index = c ? s : null, this.value = c || s, !Ir(u) && !Yn(u))
        throw new TypeError('SymbolNode or AccessorNode expected as "object"');
      if (Ir(u) && u.name === "end")
        throw new Error('Cannot assign to symbol "end"');
      if (this.index && !Ya(this.index))
        throw new TypeError('IndexNode expected as "index"');
      if (!mr(this.value))
        throw new TypeError('Node expected as "value"');
    }
    // class name for typing purposes:
    // readonly property name
    get name() {
      return this.index ? this.index.isObjectProperty() ? this.index.getObjectProperty() : "" : this.object.name || "";
    }
    get type() {
      return io;
    }
    get isAssignmentNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(u, s) {
      var c = this.object._compile(u, s), m = this.index ? this.index._compile(u, s) : null, v = this.value._compile(u, s), d = this.object.name;
      if (this.index)
        if (this.index.isObjectProperty()) {
          var p = this.index.getObjectProperty();
          return function(w, x, y) {
            var E = c(w, x, y), D = v(w, x, y);
            return La(E, p, D), D;
          };
        } else {
          if (Ir(this.object))
            return function(w, x, y) {
              var E = c(w, x, y), D = v(w, x, y), S = m(w, x, E);
              return w.set(d, i(E, S, D)), D;
            };
          var b = this.object.object._compile(u, s);
          if (this.object.index.isObjectProperty()) {
            var g = this.object.index.getObjectProperty();
            return function(w, x, y) {
              var E = b(w, x, y), D = rt(E, g), S = m(w, x, D), A = v(w, x, y);
              return La(E, g, i(D, S, A)), A;
            };
          } else {
            var N = this.object.index._compile(u, s);
            return function(w, x, y) {
              var E = b(w, x, y), D = N(w, x, E), S = a(E, D), A = m(w, x, S), C = v(w, x, y);
              return i(E, D, i(S, A, C)), C;
            };
          }
        }
      else {
        if (!Ir(this.object))
          throw new TypeError("SymbolNode expected as object");
        return function(w, x, y) {
          var E = v(w, x, y);
          return w.set(d, E), E;
        };
      }
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(u) {
      u(this.object, "object", this), this.index && u(this.index, "index", this), u(this.value, "value", this);
    }
    /**
     * Create a new AssignmentNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {AssignmentNode} Returns a transformed copy of the node
     */
    map(u) {
      var s = this._ifNode(u(this.object, "object", this)), c = this.index ? this._ifNode(u(this.index, "index", this)) : null, m = this._ifNode(u(this.value, "value", this));
      return new f(s, c, m);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {AssignmentNode}
     */
    clone() {
      return new f(this.object, this.index, this.value);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string}
     */
    _toString(u) {
      var s = this.object.toString(u), c = this.index ? this.index.toString(u) : "", m = this.value.toString(u);
      return o(this, u && u.parenthesis, u && u.implicit) && (m = "(" + m + ")"), s + c + " = " + m;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: io,
        object: this.object,
        index: this.index,
        value: this.value
      };
    }
    /**
     * Instantiate an AssignmentNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
     *     where mathjs is optional
     * @returns {AssignmentNode}
     */
    static fromJSON(u) {
      return new f(u.object, u.index, u.value);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string}
     */
    toHTML(u) {
      var s = this.object.toHTML(u), c = this.index ? this.index.toHTML(u) : "", m = this.value.toHTML(u);
      return o(this, u && u.parenthesis, u && u.implicit) && (m = '<span class="math-paranthesis math-round-parenthesis">(</span>' + m + '<span class="math-paranthesis math-round-parenthesis">)</span>'), s + c + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + m;
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string}
     */
    _toTex(u) {
      var s = this.object.toTex(u), c = this.index ? this.index.toTex(u) : "", m = this.value.toTex(u);
      return o(this, u && u.parenthesis, u && u.implicit) && (m = "\\left(".concat(m, "\\right)")), s + c + ":=" + m;
    }
  }
  return _r(f, "name", io), f;
}, {
  isClass: !0,
  isNode: !0
}), oo = "BlockNode", DT = ["ResultSet", "Node"], ST = /* @__PURE__ */ q(oo, DT, (r) => {
  var {
    ResultSet: e,
    Node: t
  } = r;
  class n extends t {
    /**
     * @constructor BlockNode
     * @extends {Node}
     * Holds a set with blocks
     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
     *            An array with blocks, where a block is constructed as an
     *            Object with properties block, which is a Node, and visible,
     *            which is a boolean. The property visible is optional and
     *            is true by default
     */
    constructor(i) {
      if (super(), !Array.isArray(i))
        throw new Error("Array expected");
      this.blocks = i.map(function(o) {
        var f = o && o.node, l = o && o.visible !== void 0 ? o.visible : !0;
        if (!mr(f))
          throw new TypeError('Property "node" must be a Node');
        if (typeof l != "boolean")
          throw new TypeError('Property "visible" must be a boolean');
        return {
          node: f,
          visible: l
        };
      });
    }
    get type() {
      return oo;
    }
    get isBlockNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, o) {
      var f = sn(this.blocks, function(l) {
        return {
          evaluate: l.node._compile(i, o),
          visible: l.visible
        };
      });
      return function(u, s, c) {
        var m = [];
        return cs(f, function(d) {
          var p = d.evaluate(u, s, c);
          d.visible && m.push(p);
        }), new e(m);
      };
    }
    /**
     * Execute a callback for each of the child blocks of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      for (var o = 0; o < this.blocks.length; o++)
        i(this.blocks[o].node, "blocks[" + o + "].node", this);
    }
    /**
     * Create a new BlockNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {BlockNode} Returns a transformed copy of the node
     */
    map(i) {
      for (var o = [], f = 0; f < this.blocks.length; f++) {
        var l = this.blocks[f], u = this._ifNode(i(l.node, "blocks[" + f + "].node", this));
        o[f] = {
          node: u,
          visible: l.visible
        };
      }
      return new n(o);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {BlockNode}
     */
    clone() {
      var i = this.blocks.map(function(o) {
        return {
          node: o.node,
          visible: o.visible
        };
      });
      return new n(i);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(i) {
      return this.blocks.map(function(o) {
        return o.node.toString(i) + (o.visible ? "" : ";");
      }).join(`
`);
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: oo,
        blocks: this.blocks
      };
    }
    /**
     * Instantiate an BlockNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
     *     where mathjs is optional
     * @returns {BlockNode}
     */
    static fromJSON(i) {
      return new n(i.blocks);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toHTML(i) {
      return this.blocks.map(function(o) {
        return o.node.toHTML(i) + (o.visible ? "" : '<span class="math-separator">;</span>');
      }).join('<span class="math-separator"><br /></span>');
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      return this.blocks.map(function(o) {
        return o.node.toTex(i) + (o.visible ? "" : ";");
      }).join(`\\;\\;
`);
    }
  }
  return _r(n, "name", oo), n;
}, {
  isClass: !0,
  isNode: !0
}), so = "ConditionalNode", CT = ["Node"], MT = /* @__PURE__ */ q(so, CT, (r) => {
  var {
    Node: e
  } = r;
  function t(a) {
    if (typeof a == "number" || typeof a == "boolean" || typeof a == "string")
      return !!a;
    if (a) {
      if (rr(a))
        return !a.isZero();
      if (on(a))
        return !!(a.re || a.im);
      if (xt(a))
        return !!a.value;
    }
    if (a == null)
      return !1;
    throw new TypeError('Unsupported type of condition "' + hr(a) + '"');
  }
  class n extends e {
    /**
     * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
     *
     * @param {Node} condition   Condition, must result in a boolean
     * @param {Node} trueExpr    Expression evaluated when condition is true
     * @param {Node} falseExpr   Expression evaluated when condition is true
     *
     * @constructor ConditionalNode
     * @extends {Node}
     */
    constructor(i, o, f) {
      if (super(), !mr(i))
        throw new TypeError("Parameter condition must be a Node");
      if (!mr(o))
        throw new TypeError("Parameter trueExpr must be a Node");
      if (!mr(f))
        throw new TypeError("Parameter falseExpr must be a Node");
      this.condition = i, this.trueExpr = o, this.falseExpr = f;
    }
    get type() {
      return so;
    }
    get isConditionalNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, o) {
      var f = this.condition._compile(i, o), l = this.trueExpr._compile(i, o), u = this.falseExpr._compile(i, o);
      return function(c, m, v) {
        return t(f(c, m, v)) ? l(c, m, v) : u(c, m, v);
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      i(this.condition, "condition", this), i(this.trueExpr, "trueExpr", this), i(this.falseExpr, "falseExpr", this);
    }
    /**
     * Create a new ConditionalNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ConditionalNode} Returns a transformed copy of the node
     */
    map(i) {
      return new n(this._ifNode(i(this.condition, "condition", this)), this._ifNode(i(this.trueExpr, "trueExpr", this)), this._ifNode(i(this.falseExpr, "falseExpr", this)));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ConditionalNode}
     */
    clone() {
      return new n(this.condition, this.trueExpr, this.falseExpr);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(i) {
      var o = i && i.parenthesis ? i.parenthesis : "keep", f = dr(this, o, i && i.implicit), l = this.condition.toString(i), u = dr(this.condition, o, i && i.implicit);
      (o === "all" || this.condition.type === "OperatorNode" || u !== null && u <= f) && (l = "(" + l + ")");
      var s = this.trueExpr.toString(i), c = dr(this.trueExpr, o, i && i.implicit);
      (o === "all" || this.trueExpr.type === "OperatorNode" || c !== null && c <= f) && (s = "(" + s + ")");
      var m = this.falseExpr.toString(i), v = dr(this.falseExpr, o, i && i.implicit);
      return (o === "all" || this.falseExpr.type === "OperatorNode" || v !== null && v <= f) && (m = "(" + m + ")"), l + " ? " + s + " : " + m;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: so,
        condition: this.condition,
        trueExpr: this.trueExpr,
        falseExpr: this.falseExpr
      };
    }
    /**
     * Instantiate an ConditionalNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "ConditionalNode",
     *      "condition": ...,
     *      "trueExpr": ...,
     *      "falseExpr": ...}
     *     ```
     *     where mathjs is optional
     * @returns {ConditionalNode}
     */
    static fromJSON(i) {
      return new n(i.condition, i.trueExpr, i.falseExpr);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(i) {
      var o = i && i.parenthesis ? i.parenthesis : "keep", f = dr(this, o, i && i.implicit), l = this.condition.toHTML(i), u = dr(this.condition, o, i && i.implicit);
      (o === "all" || this.condition.type === "OperatorNode" || u !== null && u <= f) && (l = '<span class="math-parenthesis math-round-parenthesis">(</span>' + l + '<span class="math-parenthesis math-round-parenthesis">)</span>');
      var s = this.trueExpr.toHTML(i), c = dr(this.trueExpr, o, i && i.implicit);
      (o === "all" || this.trueExpr.type === "OperatorNode" || c !== null && c <= f) && (s = '<span class="math-parenthesis math-round-parenthesis">(</span>' + s + '<span class="math-parenthesis math-round-parenthesis">)</span>');
      var m = this.falseExpr.toHTML(i), v = dr(this.falseExpr, o, i && i.implicit);
      return (o === "all" || this.falseExpr.type === "OperatorNode" || v !== null && v <= f) && (m = '<span class="math-parenthesis math-round-parenthesis">(</span>' + m + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l + '<span class="math-operator math-conditional-operator">?</span>' + s + '<span class="math-operator math-conditional-operator">:</span>' + m;
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      return "\\begin{cases} {" + this.trueExpr.toTex(i) + "}, &\\quad{\\text{if }\\;" + this.condition.toTex(i) + "}\\\\{" + this.falseExpr.toTex(i) + "}, &\\quad{\\text{otherwise}}\\end{cases}";
    }
  }
  return _r(n, "name", so), n;
}, {
  isClass: !0,
  isNode: !0
}), oc = Object.assign || function(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e];
    for (var n in t)
      Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]);
  }
  return r;
}, OT = {
  "{": "\\{",
  "}": "\\}",
  "\\": "\\textbackslash{}",
  "#": "\\#",
  $: "\\$",
  "%": "\\%",
  "&": "\\&",
  "^": "\\textasciicircum{}",
  _: "\\_",
  "~": "\\textasciitilde{}"
}, TT = {
  "–": "\\--",
  "—": "\\---",
  " ": "~",
  "	": "\\qquad{}",
  "\r\n": "\\newline{}",
  "\n": "\\newline{}"
}, BT = function(e, t) {
  return oc({}, e, t);
}, _T = function(r) {
  for (var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, t = e.preserveFormatting, n = t === void 0 ? !1 : t, a = e.escapeMapFn, i = a === void 0 ? BT : a, o = String(r), f = "", l = i(oc({}, OT), n ? oc({}, TT) : {}), u = Object.keys(l), s = function() {
    var m = !1;
    u.forEach(function(v, d) {
      m || o.length >= v.length && o.slice(0, v.length) === v && (f += l[u[d]], o = o.slice(v.length, o.length), m = !0);
    }), m || (f += o.slice(0, 1), o = o.slice(1, o.length));
  }; o; )
    s();
  return f;
};
const FT = /* @__PURE__ */ Di(_T);
var sc = {
  // GREEK LETTERS
  Alpha: "A",
  alpha: "\\alpha",
  Beta: "B",
  beta: "\\beta",
  Gamma: "\\Gamma",
  gamma: "\\gamma",
  Delta: "\\Delta",
  delta: "\\delta",
  Epsilon: "E",
  epsilon: "\\epsilon",
  varepsilon: "\\varepsilon",
  Zeta: "Z",
  zeta: "\\zeta",
  Eta: "H",
  eta: "\\eta",
  Theta: "\\Theta",
  theta: "\\theta",
  vartheta: "\\vartheta",
  Iota: "I",
  iota: "\\iota",
  Kappa: "K",
  kappa: "\\kappa",
  varkappa: "\\varkappa",
  Lambda: "\\Lambda",
  lambda: "\\lambda",
  Mu: "M",
  mu: "\\mu",
  Nu: "N",
  nu: "\\nu",
  Xi: "\\Xi",
  xi: "\\xi",
  Omicron: "O",
  omicron: "o",
  Pi: "\\Pi",
  pi: "\\pi",
  varpi: "\\varpi",
  Rho: "P",
  rho: "\\rho",
  varrho: "\\varrho",
  Sigma: "\\Sigma",
  sigma: "\\sigma",
  varsigma: "\\varsigma",
  Tau: "T",
  tau: "\\tau",
  Upsilon: "\\Upsilon",
  upsilon: "\\upsilon",
  Phi: "\\Phi",
  phi: "\\phi",
  varphi: "\\varphi",
  Chi: "X",
  chi: "\\chi",
  Psi: "\\Psi",
  psi: "\\psi",
  Omega: "\\Omega",
  omega: "\\omega",
  // logic
  true: "\\mathrm{True}",
  false: "\\mathrm{False}",
  // other
  i: "i",
  // TODO use \i ??
  inf: "\\infty",
  Inf: "\\infty",
  infinity: "\\infty",
  Infinity: "\\infty",
  oo: "\\infty",
  lim: "\\lim",
  undefined: "\\mathbf{?}"
}, ar = {
  transpose: "^\\top",
  ctranspose: "^H",
  factorial: "!",
  pow: "^",
  dotPow: ".^\\wedge",
  // TODO find ideal solution
  unaryPlus: "+",
  unaryMinus: "-",
  bitNot: "\\~",
  // TODO find ideal solution
  not: "\\neg",
  multiply: "\\cdot",
  divide: "\\frac",
  // TODO how to handle that properly?
  dotMultiply: ".\\cdot",
  // TODO find ideal solution
  dotDivide: ".:",
  // TODO find ideal solution
  mod: "\\mod",
  add: "+",
  subtract: "-",
  to: "\\rightarrow",
  leftShift: "<<",
  rightArithShift: ">>",
  rightLogShift: ">>>",
  equal: "=",
  unequal: "\\neq",
  smaller: "<",
  larger: ">",
  smallerEq: "\\leq",
  largerEq: "\\geq",
  bitAnd: "\\&",
  bitXor: "\\underline{|}",
  bitOr: "|",
  and: "\\wedge",
  xor: "\\veebar",
  or: "\\vee"
}, lp = {
  // arithmetic
  abs: {
    1: "\\left|${args[0]}\\right|"
  },
  add: {
    2: "\\left(${args[0]}".concat(ar.add, "${args[1]}\\right)")
  },
  cbrt: {
    1: "\\sqrt[3]{${args[0]}}"
  },
  ceil: {
    1: "\\left\\lceil${args[0]}\\right\\rceil"
  },
  cube: {
    1: "\\left(${args[0]}\\right)^3"
  },
  divide: {
    2: "\\frac{${args[0]}}{${args[1]}}"
  },
  dotDivide: {
    2: "\\left(${args[0]}".concat(ar.dotDivide, "${args[1]}\\right)")
  },
  dotMultiply: {
    2: "\\left(${args[0]}".concat(ar.dotMultiply, "${args[1]}\\right)")
  },
  dotPow: {
    2: "\\left(${args[0]}".concat(ar.dotPow, "${args[1]}\\right)")
  },
  exp: {
    1: "\\exp\\left(${args[0]}\\right)"
  },
  expm1: "\\left(e".concat(ar.pow, "{${args[0]}}-1\\right)"),
  fix: {
    1: "\\mathrm{${name}}\\left(${args[0]}\\right)"
  },
  floor: {
    1: "\\left\\lfloor${args[0]}\\right\\rfloor"
  },
  gcd: "\\gcd\\left(${args}\\right)",
  hypot: "\\hypot\\left(${args}\\right)",
  log: {
    1: "\\ln\\left(${args[0]}\\right)",
    2: "\\log_{${args[1]}}\\left(${args[0]}\\right)"
  },
  log10: {
    1: "\\log_{10}\\left(${args[0]}\\right)"
  },
  log1p: {
    1: "\\ln\\left(${args[0]}+1\\right)",
    2: "\\log_{${args[1]}}\\left(${args[0]}+1\\right)"
  },
  log2: "\\log_{2}\\left(${args[0]}\\right)",
  mod: {
    2: "\\left(${args[0]}".concat(ar.mod, "${args[1]}\\right)")
  },
  multiply: {
    2: "\\left(${args[0]}".concat(ar.multiply, "${args[1]}\\right)")
  },
  norm: {
    1: "\\left\\|${args[0]}\\right\\|",
    2: void 0
    // use default template
  },
  nthRoot: {
    2: "\\sqrt[${args[1]}]{${args[0]}}"
  },
  nthRoots: {
    2: "\\{y : $y^{args[1]} = {${args[0]}}\\}"
  },
  pow: {
    2: "\\left(${args[0]}\\right)".concat(ar.pow, "{${args[1]}}")
  },
  round: {
    1: "\\left\\lfloor${args[0]}\\right\\rceil",
    2: void 0
    // use default template
  },
  sign: {
    1: "\\mathrm{${name}}\\left(${args[0]}\\right)"
  },
  sqrt: {
    1: "\\sqrt{${args[0]}}"
  },
  square: {
    1: "\\left(${args[0]}\\right)^2"
  },
  subtract: {
    2: "\\left(${args[0]}".concat(ar.subtract, "${args[1]}\\right)")
  },
  unaryMinus: {
    1: "".concat(ar.unaryMinus, "\\left(${args[0]}\\right)")
  },
  unaryPlus: {
    1: "".concat(ar.unaryPlus, "\\left(${args[0]}\\right)")
  },
  // bitwise
  bitAnd: {
    2: "\\left(${args[0]}".concat(ar.bitAnd, "${args[1]}\\right)")
  },
  bitNot: {
    1: ar.bitNot + "\\left(${args[0]}\\right)"
  },
  bitOr: {
    2: "\\left(${args[0]}".concat(ar.bitOr, "${args[1]}\\right)")
  },
  bitXor: {
    2: "\\left(${args[0]}".concat(ar.bitXor, "${args[1]}\\right)")
  },
  leftShift: {
    2: "\\left(${args[0]}".concat(ar.leftShift, "${args[1]}\\right)")
  },
  rightArithShift: {
    2: "\\left(${args[0]}".concat(ar.rightArithShift, "${args[1]}\\right)")
  },
  rightLogShift: {
    2: "\\left(${args[0]}".concat(ar.rightLogShift, "${args[1]}\\right)")
  },
  // combinatorics
  bellNumbers: {
    1: "\\mathrm{B}_{${args[0]}}"
  },
  catalan: {
    1: "\\mathrm{C}_{${args[0]}}"
  },
  stirlingS2: {
    2: "\\mathrm{S}\\left(${args}\\right)"
  },
  // complex
  arg: {
    1: "\\arg\\left(${args[0]}\\right)"
  },
  conj: {
    1: "\\left(${args[0]}\\right)^*"
  },
  im: {
    1: "\\Im\\left\\lbrace${args[0]}\\right\\rbrace"
  },
  re: {
    1: "\\Re\\left\\lbrace${args[0]}\\right\\rbrace"
  },
  // logical
  and: {
    2: "\\left(${args[0]}".concat(ar.and, "${args[1]}\\right)")
  },
  not: {
    1: ar.not + "\\left(${args[0]}\\right)"
  },
  or: {
    2: "\\left(${args[0]}".concat(ar.or, "${args[1]}\\right)")
  },
  xor: {
    2: "\\left(${args[0]}".concat(ar.xor, "${args[1]}\\right)")
  },
  // matrix
  cross: {
    2: "\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"
  },
  ctranspose: {
    1: "\\left(${args[0]}\\right)".concat(ar.ctranspose)
  },
  det: {
    1: "\\det\\left(${args[0]}\\right)"
  },
  dot: {
    2: "\\left(${args[0]}\\cdot${args[1]}\\right)"
  },
  expm: {
    1: "\\exp\\left(${args[0]}\\right)"
  },
  inv: {
    1: "\\left(${args[0]}\\right)^{-1}"
  },
  pinv: {
    1: "\\left(${args[0]}\\right)^{+}"
  },
  sqrtm: {
    1: "{${args[0]}}".concat(ar.pow, "{\\frac{1}{2}}")
  },
  trace: {
    1: "\\mathrm{tr}\\left(${args[0]}\\right)"
  },
  transpose: {
    1: "\\left(${args[0]}\\right)".concat(ar.transpose)
  },
  // probability
  combinations: {
    2: "\\binom{${args[0]}}{${args[1]}}"
  },
  combinationsWithRep: {
    2: "\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)"
  },
  factorial: {
    1: "\\left(${args[0]}\\right)".concat(ar.factorial)
  },
  gamma: {
    1: "\\Gamma\\left(${args[0]}\\right)"
  },
  lgamma: {
    1: "\\ln\\Gamma\\left(${args[0]}\\right)"
  },
  // relational
  equal: {
    2: "\\left(${args[0]}".concat(ar.equal, "${args[1]}\\right)")
  },
  larger: {
    2: "\\left(${args[0]}".concat(ar.larger, "${args[1]}\\right)")
  },
  largerEq: {
    2: "\\left(${args[0]}".concat(ar.largerEq, "${args[1]}\\right)")
  },
  smaller: {
    2: "\\left(${args[0]}".concat(ar.smaller, "${args[1]}\\right)")
  },
  smallerEq: {
    2: "\\left(${args[0]}".concat(ar.smallerEq, "${args[1]}\\right)")
  },
  unequal: {
    2: "\\left(${args[0]}".concat(ar.unequal, "${args[1]}\\right)")
  },
  // special
  erf: {
    1: "erf\\left(${args[0]}\\right)"
  },
  // statistics
  max: "\\max\\left(${args}\\right)",
  min: "\\min\\left(${args}\\right)",
  variance: "\\mathrm{Var}\\left(${args}\\right)",
  // trigonometry
  acos: {
    1: "\\cos^{-1}\\left(${args[0]}\\right)"
  },
  acosh: {
    1: "\\cosh^{-1}\\left(${args[0]}\\right)"
  },
  acot: {
    1: "\\cot^{-1}\\left(${args[0]}\\right)"
  },
  acoth: {
    1: "\\coth^{-1}\\left(${args[0]}\\right)"
  },
  acsc: {
    1: "\\csc^{-1}\\left(${args[0]}\\right)"
  },
  acsch: {
    1: "\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"
  },
  asec: {
    1: "\\sec^{-1}\\left(${args[0]}\\right)"
  },
  asech: {
    1: "\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"
  },
  asin: {
    1: "\\sin^{-1}\\left(${args[0]}\\right)"
  },
  asinh: {
    1: "\\sinh^{-1}\\left(${args[0]}\\right)"
  },
  atan: {
    1: "\\tan^{-1}\\left(${args[0]}\\right)"
  },
  atan2: {
    2: "\\mathrm{atan2}\\left(${args}\\right)"
  },
  atanh: {
    1: "\\tanh^{-1}\\left(${args[0]}\\right)"
  },
  cos: {
    1: "\\cos\\left(${args[0]}\\right)"
  },
  cosh: {
    1: "\\cosh\\left(${args[0]}\\right)"
  },
  cot: {
    1: "\\cot\\left(${args[0]}\\right)"
  },
  coth: {
    1: "\\coth\\left(${args[0]}\\right)"
  },
  csc: {
    1: "\\csc\\left(${args[0]}\\right)"
  },
  csch: {
    1: "\\mathrm{csch}\\left(${args[0]}\\right)"
  },
  sec: {
    1: "\\sec\\left(${args[0]}\\right)"
  },
  sech: {
    1: "\\mathrm{sech}\\left(${args[0]}\\right)"
  },
  sin: {
    1: "\\sin\\left(${args[0]}\\right)"
  },
  sinh: {
    1: "\\sinh\\left(${args[0]}\\right)"
  },
  tan: {
    1: "\\tan\\left(${args[0]}\\right)"
  },
  tanh: {
    1: "\\tanh\\left(${args[0]}\\right)"
  },
  // unit
  to: {
    2: "\\left(${args[0]}".concat(ar.to, "${args[1]}\\right)")
  },
  // utils
  numeric: function(e, t) {
    return e.args[0].toTex();
  },
  // type
  number: {
    0: "0",
    1: "\\left(${args[0]}\\right)",
    2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
  },
  string: {
    0: '\\mathtt{""}',
    1: "\\mathrm{string}\\left(${args[0]}\\right)"
  },
  bignumber: {
    0: "0",
    1: "\\left(${args[0]}\\right)"
  },
  complex: {
    0: "0",
    1: "\\left(${args[0]}\\right)",
    2: "\\left(\\left(${args[0]}\\right)+".concat(sc.i, "\\cdot\\left(${args[1]}\\right)\\right)")
  },
  matrix: {
    0: "\\begin{bmatrix}\\end{bmatrix}",
    1: "\\left(${args[0]}\\right)",
    2: "\\left(${args[0]}\\right)"
  },
  sparse: {
    0: "\\begin{bsparse}\\end{bsparse}",
    1: "\\left(${args[0]}\\right)"
  },
  unit: {
    1: "\\left(${args[0]}\\right)",
    2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
  }
}, $T = "\\mathrm{${name}}\\left(${args}\\right)", fp = {
  deg: "^\\circ"
};
function uc(r) {
  return FT(r, {
    preserveFormatting: !0
  });
}
function og(r, e) {
  return e = typeof e > "u" ? !1 : e, e ? $e(fp, r) ? fp[r] : "\\mathrm{" + uc(r) + "}" : $e(sc, r) ? sc[r] : uc(r);
}
var uo = "ConstantNode", RT = ["Node"], IT = /* @__PURE__ */ q(uo, RT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * A ConstantNode holds a constant value like a number or string.
     *
     * Usage:
     *
     *     new ConstantNode(2.3)
     *     new ConstantNode('hello')
     *
     * @param {*} value    Value can be any type (number, BigNumber, string, ...)
     * @constructor ConstantNode
     * @extends {Node}
     */
    constructor(a) {
      super(), this.value = a;
    }
    get type() {
      return uo;
    }
    get isConstantNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, i) {
      var o = this.value;
      return function() {
        return o;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
    }
    /**
     * Create a new ConstantNode with children produced by the given callback.
     * Trivial because there are no children.
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {ConstantNode} Returns a clone of the node
     */
    map(a) {
      return this.clone();
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ConstantNode}
     */
    clone() {
      return new t(this.value);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(a) {
      return Je(this.value, a);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(a) {
      var i = this._toString(a);
      switch (hr(this.value)) {
        case "number":
        case "BigNumber":
        case "Fraction":
          return '<span class="math-number">' + i + "</span>";
        case "string":
          return '<span class="math-string">' + i + "</span>";
        case "boolean":
          return '<span class="math-boolean">' + i + "</span>";
        case "null":
          return '<span class="math-null-symbol">' + i + "</span>";
        case "undefined":
          return '<span class="math-undefined">' + i + "</span>";
        default:
          return '<span class="math-symbol">' + i + "</span>";
      }
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: uo,
        value: this.value
      };
    }
    /**
     * Instantiate a ConstantNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "SymbolNode", value: 2.3}`,
     *                       where mathjs is optional
     * @returns {ConstantNode}
     */
    static fromJSON(a) {
      return new t(a.value);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      var i = this._toString(a);
      switch (hr(this.value)) {
        case "string":
          return "\\mathtt{" + uc(i) + "}";
        case "number":
        case "BigNumber":
          {
            if (!isFinite(this.value))
              return this.value.valueOf() < 0 ? "-\\infty" : "\\infty";
            var o = i.toLowerCase().indexOf("e");
            if (o !== -1)
              return i.substring(0, o) + "\\cdot10^{" + i.substring(o + 1) + "}";
          }
          return i;
        case "Fraction":
          return this.value.toLatex();
        default:
          return i;
      }
    }
  }
  return _r(t, "name", uo), t;
}, {
  isClass: !0,
  isNode: !0
}), co = "FunctionAssignmentNode", PT = ["typed", "Node"], qT = /* @__PURE__ */ q(co, PT, (r) => {
  var {
    typed: e,
    Node: t
  } = r;
  function n(i, o, f) {
    var l = dr(i, o, f), u = dr(i.expr, o, f);
    return o === "all" || u !== null && u <= l;
  }
  class a extends t {
    /**
     * @constructor FunctionAssignmentNode
     * @extends {Node}
     * Function assignment
     *
     * @param {string} name           Function name
     * @param {string[] | Array.<{name: string, type: string}>} params
     *                                Array with function parameter names, or an
     *                                array with objects containing the name
     *                                and type of the parameter
     * @param {Node} expr             The function expression
     */
    constructor(o, f, l) {
      if (super(), typeof o != "string")
        throw new TypeError('String expected for parameter "name"');
      if (!Array.isArray(f))
        throw new TypeError('Array containing strings or objects expected for parameter "params"');
      if (!mr(l))
        throw new TypeError('Node expected for parameter "expr"');
      if (ag.has(o))
        throw new Error('Illegal function name, "' + o + '" is a reserved keyword');
      var u = /* @__PURE__ */ new Set();
      for (var s of f) {
        var c = typeof s == "string" ? s : s.name;
        if (u.has(c))
          throw new Error('Duplicate parameter name "'.concat(c, '"'));
        u.add(c);
      }
      this.name = o, this.params = f.map(function(m) {
        return m && m.name || m;
      }), this.types = f.map(function(m) {
        return m && m.type || "any";
      }), this.expr = l;
    }
    get type() {
      return co;
    }
    get isFunctionAssignmentNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(o, f) {
      var l = Object.create(f);
      cs(this.params, function(d) {
        l[d] = !0;
      });
      var u = this.expr._compile(o, l), s = this.name, c = this.params, m = of(this.types, ","), v = s + "(" + of(this.params, ", ") + ")";
      return function(p, b, g) {
        var N = {};
        N[m] = function() {
          for (var w = Object.create(b), x = 0; x < c.length; x++)
            w[c[x]] = arguments[x];
          return u(p, w, g);
        };
        var h = e(s, N);
        return h.syntax = v, p.set(s, h), h;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(o) {
      o(this.expr, "expr", this);
    }
    /**
     * Create a new FunctionAssignmentNode whose children are the results of
     * calling the provided callback function for each child of the original
     * node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
     */
    map(o) {
      var f = this._ifNode(o(this.expr, "expr", this));
      return new a(this.name, this.params.slice(0), f);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {FunctionAssignmentNode}
     */
    clone() {
      return new a(this.name, this.params.slice(0), this.expr);
    }
    /**
     * get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(o) {
      var f = o && o.parenthesis ? o.parenthesis : "keep", l = this.expr.toString(o);
      return n(this, f, o && o.implicit) && (l = "(" + l + ")"), this.name + "(" + this.params.join(", ") + ") = " + l;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      var o = this.types;
      return {
        mathjs: co,
        name: this.name,
        params: this.params.map(function(f, l) {
          return {
            name: f,
            type: o[l]
          };
        }),
        expr: this.expr
      };
    }
    /**
     * Instantiate an FunctionAssignmentNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "FunctionAssignmentNode",
     *      name: ..., params: ..., expr: ...}
     *     ```
     *     where mathjs is optional
     * @returns {FunctionAssignmentNode}
     */
    static fromJSON(o) {
      return new a(o.name, o.params, o.expr);
    }
    /**
     * get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(o) {
      for (var f = o && o.parenthesis ? o.parenthesis : "keep", l = [], u = 0; u < this.params.length; u++)
        l.push('<span class="math-symbol math-parameter">' + Nt(this.params[u]) + "</span>");
      var s = this.expr.toHTML(o);
      return n(this, f, o && o.implicit) && (s = '<span class="math-parenthesis math-round-parenthesis">(</span>' + s + '<span class="math-parenthesis math-round-parenthesis">)</span>'), '<span class="math-function">' + Nt(this.name) + '</span><span class="math-parenthesis math-round-parenthesis">(</span>' + l.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + s;
    }
    /**
     * get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(o) {
      var f = o && o.parenthesis ? o.parenthesis : "keep", l = this.expr.toTex(o);
      return n(this, f, o && o.implicit) && (l = "\\left(".concat(l, "\\right)")), "\\mathrm{" + this.name + "}\\left(" + this.params.map(og).join(",") + "\\right):=" + l;
    }
  }
  return _r(a, "name", co), a;
}, {
  isClass: !0,
  isNode: !0
}), lo = "IndexNode", LT = ["Node", "size"], zT = /* @__PURE__ */ q(lo, LT, (r) => {
  var {
    Node: e,
    size: t
  } = r;
  class n extends e {
    /**
     * @constructor IndexNode
     * @extends Node
     *
     * Describes a subset of a matrix or an object property.
     * Cannot be used on its own, needs to be used within an AccessorNode or
     * AssignmentNode.
     *
     * @param {Node[]} dimensions
     * @param {boolean} [dotNotation=false]
     *     Optional property describing whether this index was written using dot
     *     notation like `a.b`, or using bracket notation like `a["b"]`
     *     (which is the default). This property is used for string conversion.
     */
    constructor(i, o) {
      if (super(), this.dimensions = i, this.dotNotation = o || !1, !Array.isArray(i) || !i.every(mr))
        throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
      if (this.dotNotation && !this.isObjectProperty())
        throw new Error("dotNotation only applicable for object properties");
    }
    get type() {
      return lo;
    }
    get isIndexNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, o) {
      var f = sn(this.dimensions, function(u, s) {
        var c = u.filter((d) => d.isSymbolNode && d.name === "end").length > 0;
        if (c) {
          var m = Object.create(o);
          m.end = !0;
          var v = u._compile(i, m);
          return function(p, b, g) {
            if (!Le(g) && !sr(g) && !Hr(g))
              throw new TypeError('Cannot resolve "end": context must be a Matrix, Array, or string but is ' + hr(g));
            var N = t(g).valueOf(), h = Object.create(b);
            return h.end = N[s], v(p, h, g);
          };
        } else
          return u._compile(i, o);
      }), l = rt(i, "index");
      return function(s, c, m) {
        var v = sn(f, function(d) {
          return d(s, c, m);
        });
        return l(...v);
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      for (var o = 0; o < this.dimensions.length; o++)
        i(this.dimensions[o], "dimensions[" + o + "]", this);
    }
    /**
     * Create a new IndexNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {IndexNode} Returns a transformed copy of the node
     */
    map(i) {
      for (var o = [], f = 0; f < this.dimensions.length; f++)
        o[f] = this._ifNode(i(this.dimensions[f], "dimensions[" + f + "]", this));
      return new n(o, this.dotNotation);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {IndexNode}
     */
    clone() {
      return new n(this.dimensions.slice(0), this.dotNotation);
    }
    /**
     * Test whether this IndexNode contains a single property name
     * @return {boolean}
     */
    isObjectProperty() {
      return this.dimensions.length === 1 && ir(this.dimensions[0]) && typeof this.dimensions[0].value == "string";
    }
    /**
     * Returns the property name if IndexNode contains a property.
     * If not, returns null.
     * @return {string | null}
     */
    getObjectProperty() {
      return this.isObjectProperty() ? this.dimensions[0].value : null;
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(i) {
      return this.dotNotation ? "." + this.getObjectProperty() : "[" + this.dimensions.join(", ") + "]";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: lo,
        dimensions: this.dimensions,
        dotNotation: this.dotNotation
      };
    }
    /**
     * Instantiate an IndexNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
     *     where mathjs is optional
     * @returns {IndexNode}
     */
    static fromJSON(i) {
      return new n(i.dimensions, i.dotNotation);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(i) {
      for (var o = [], f = 0; f < this.dimensions.length; f++)
        o[f] = this.dimensions[f].toHTML();
      return this.dotNotation ? '<span class="math-operator math-accessor-operator">.</span><span class="math-symbol math-property">' + Nt(this.getObjectProperty()) + "</span>" : '<span class="math-parenthesis math-square-parenthesis">[</span>' + o.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      var o = this.dimensions.map(function(f) {
        return f.toTex(i);
      });
      return this.dotNotation ? "." + this.getObjectProperty() : "_{" + o.join(",") + "}";
    }
  }
  return _r(n, "name", lo), n;
}, {
  isClass: !0,
  isNode: !0
}), fo = "ObjectNode", UT = ["Node"], kT = /* @__PURE__ */ q(fo, UT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * @constructor ObjectNode
     * @extends {Node}
     * Holds an object with keys/values
     * @param {Object.<string, Node>} [properties]   object with key/value pairs
     */
    constructor(a) {
      if (super(), this.properties = a || {}, a && (typeof a != "object" || !Object.keys(a).every(function(i) {
        return mr(a[i]);
      })))
        throw new TypeError("Object containing Nodes expected");
    }
    get type() {
      return fo;
    }
    get isObjectNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, i) {
      var o = {};
      for (var f in this.properties)
        if ($e(this.properties, f)) {
          var l = Da(f), u = JSON.parse(l), s = rt(this.properties, f);
          o[u] = s._compile(a, i);
        }
      return function(m, v, d) {
        var p = {};
        for (var b in o)
          $e(o, b) && (p[b] = o[b](m, v, d));
        return p;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      for (var i in this.properties)
        $e(this.properties, i) && a(this.properties[i], "properties[" + Da(i) + "]", this);
    }
    /**
     * Create a new ObjectNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ObjectNode} Returns a transformed copy of the node
     */
    map(a) {
      var i = {};
      for (var o in this.properties)
        $e(this.properties, o) && (i[o] = this._ifNode(a(this.properties[o], "properties[" + Da(o) + "]", this)));
      return new t(i);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ObjectNode}
     */
    clone() {
      var a = {};
      for (var i in this.properties)
        $e(this.properties, i) && (a[i] = this.properties[i]);
      return new t(a);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(a) {
      var i = [];
      for (var o in this.properties)
        $e(this.properties, o) && i.push(Da(o) + ": " + this.properties[o].toString(a));
      return "{" + i.join(", ") + "}";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: fo,
        properties: this.properties
      };
    }
    /**
     * Instantiate an OperatorNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
     *                       where mathjs is optional
     * @returns {ObjectNode}
     */
    static fromJSON(a) {
      return new t(a.properties);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toHTML(a) {
      var i = [];
      for (var o in this.properties)
        $e(this.properties, o) && i.push('<span class="math-symbol math-property">' + Nt(o) + '</span><span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[o].toHTML(a));
      return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + i.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(a) {
      var i = [];
      for (var o in this.properties)
        $e(this.properties, o) && i.push("\\mathbf{" + o + ":} & " + this.properties[o].toTex(a) + "\\\\");
      var f = "\\left\\{\\begin{array}{ll}" + i.join(`
`) + "\\end{array}\\right\\}";
      return f;
    }
  }
  return _r(t, "name", fo), t;
}, {
  isClass: !0,
  isNode: !0
}), mo = "OperatorNode", GT = ["Node"], VT = /* @__PURE__ */ q(mo, GT, (r) => {
  var {
    Node: e
  } = r;
  function t(i, o) {
    var f = i;
    if (o === "auto")
      for (; cn(f); )
        f = f.content;
    return ir(f) ? !0 : Or(f) ? t(f.args[0], o) : !1;
  }
  function n(i, o, f, l, u) {
    var s = dr(i, o, f), c = ci(i, o);
    if (o === "all" || l.length > 2 && i.getIdentifier() !== "OperatorNode:add" && i.getIdentifier() !== "OperatorNode:multiply")
      return l.map(function(A) {
        switch (A.getContent().type) {
          case "ArrayNode":
          case "ConstantNode":
          case "SymbolNode":
          case "ParenthesisNode":
            return !1;
          default:
            return !0;
        }
      });
    var m;
    switch (l.length) {
      case 0:
        m = [];
        break;
      case 1:
        {
          var v = dr(l[0], o, f, i);
          if (u && v !== null) {
            var d, p;
            if (o === "keep" ? (d = l[0].getIdentifier(), p = i.getIdentifier()) : (d = l[0].getContent().getIdentifier(), p = i.getContent().getIdentifier()), Bt[s][p].latexLeftParens === !1) {
              m = [!1];
              break;
            }
            if (Bt[v][d].latexParens === !1) {
              m = [!1];
              break;
            }
          }
          if (v === null) {
            m = [!1];
            break;
          }
          if (v <= s) {
            m = [!0];
            break;
          }
          m = [!1];
        }
        break;
      case 2:
        {
          var b, g = dr(l[0], o, f, i), N = gu(i, l[0], o);
          g === null ? b = !1 : g === s && c === "right" && !N || g < s ? b = !0 : b = !1;
          var h, w = dr(l[1], o, f, i), x = gu(i, l[1], o);
          if (w === null ? h = !1 : w === s && c === "left" && !x || w < s ? h = !0 : h = !1, u) {
            var y, E, D;
            o === "keep" ? (y = i.getIdentifier(), E = i.args[0].getIdentifier(), D = i.args[1].getIdentifier()) : (y = i.getContent().getIdentifier(), E = i.args[0].getContent().getIdentifier(), D = i.args[1].getContent().getIdentifier()), g !== null && (Bt[s][y].latexLeftParens === !1 && (b = !1), Bt[g][E].latexParens === !1 && (b = !1)), w !== null && (Bt[s][y].latexRightParens === !1 && (h = !1), Bt[w][D].latexParens === !1 && (h = !1));
          }
          m = [b, h];
        }
        break;
      default:
        (i.getIdentifier() === "OperatorNode:add" || i.getIdentifier() === "OperatorNode:multiply") && (m = l.map(function(A) {
          var C = dr(A, o, f, i), T = gu(i, A, o), $ = ci(A, o);
          return C === null ? !1 : s === C && c === $ && !T ? !0 : C < s;
        }));
        break;
    }
    if (l.length >= 2 && i.getIdentifier() === "OperatorNode:multiply" && i.implicit && o !== "all" && f === "hide")
      for (var S = 1; S < m.length; ++S)
        t(l[S], o) && !m[S - 1] && (o !== "keep" || !cn(l[S - 1])) && (m[S] = !0);
    return m;
  }
  class a extends e {
    /**
     * @constructor OperatorNode
     * @extends {Node}
     * An operator with two arguments, like 2+3
     *
     * @param {string} op           Operator name, for example '+'
     * @param {string} fn           Function name, for example 'add'
     * @param {Node[]} args         Operator arguments
     * @param {boolean} [implicit]  Is this an implicit multiplication?
     * @param {boolean} [isPercentage] Is this an percentage Operation?
     */
    constructor(o, f, l, u, s) {
      if (super(), typeof o != "string")
        throw new TypeError('string expected for parameter "op"');
      if (typeof f != "string")
        throw new TypeError('string expected for parameter "fn"');
      if (!Array.isArray(l) || !l.every(mr))
        throw new TypeError('Array containing Nodes expected for parameter "args"');
      this.implicit = u === !0, this.isPercentage = s === !0, this.op = o, this.fn = f, this.args = l || [];
    }
    get type() {
      return mo;
    }
    get isOperatorNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(o, f) {
      if (typeof this.fn != "string" || !_c(o, this.fn))
        throw o[this.fn] ? new Error('No access to function "' + this.fn + '"') : new Error("Function " + this.fn + ' missing in provided namespace "math"');
      var l = rt(o, this.fn), u = sn(this.args, function(v) {
        return v._compile(o, f);
      });
      if (u.length === 1) {
        var s = u[0];
        return function(d, p, b) {
          return l(s(d, p, b));
        };
      } else if (u.length === 2) {
        var c = u[0], m = u[1];
        return function(d, p, b) {
          return l(c(d, p, b), m(d, p, b));
        };
      } else
        return function(d, p, b) {
          return l.apply(null, sn(u, function(g) {
            return g(d, p, b);
          }));
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(o) {
      for (var f = 0; f < this.args.length; f++)
        o(this.args[f], "args[" + f + "]", this);
    }
    /**
     * Create a new OperatorNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {OperatorNode} Returns a transformed copy of the node
     */
    map(o) {
      for (var f = [], l = 0; l < this.args.length; l++)
        f[l] = this._ifNode(o(this.args[l], "args[" + l + "]", this));
      return new a(this.op, this.fn, f, this.implicit, this.isPercentage);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {OperatorNode}
     */
    clone() {
      return new a(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);
    }
    /**
     * Check whether this is an unary OperatorNode:
     * has exactly one argument, like `-a`.
     * @return {boolean}
     *     Returns true when an unary operator node, false otherwise.
     */
    isUnary() {
      return this.args.length === 1;
    }
    /**
     * Check whether this is a binary OperatorNode:
     * has exactly two arguments, like `a + b`.
     * @return {boolean}
     *     Returns true when a binary operator node, false otherwise.
     */
    isBinary() {
      return this.args.length === 2;
    }
    /**
     * Get string representation.
     * @param {Object} options
     * @return {string} str
     */
    _toString(o) {
      var f = o && o.parenthesis ? o.parenthesis : "keep", l = o && o.implicit ? o.implicit : "hide", u = this.args, s = n(this, f, l, u, !1);
      if (u.length === 1) {
        var c = ci(this, f), m = u[0].toString(o);
        s[0] && (m = "(" + m + ")");
        var v = /[a-zA-Z]+/.test(this.op);
        return c === "right" ? this.op + (v ? " " : "") + m : c === "left" ? m + (v ? " " : "") + this.op : m + this.op;
      } else if (u.length === 2) {
        var d = u[0].toString(o), p = u[1].toString(o);
        return s[0] && (d = "(" + d + ")"), s[1] && (p = "(" + p + ")"), this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? d + " " + p : d + " " + this.op + " " + p;
      } else if (u.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
        var b = u.map(function(g, N) {
          return g = g.toString(o), s[N] && (g = "(" + g + ")"), g;
        });
        return this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? b.join(" ") : b.join(" " + this.op + " ");
      } else
        return this.fn + "(" + this.args.join(", ") + ")";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: mo,
        op: this.op,
        fn: this.fn,
        args: this.args,
        implicit: this.implicit,
        isPercentage: this.isPercentage
      };
    }
    /**
     * Instantiate an OperatorNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "OperatorNode",
     *      "op": "+", "fn": "add", "args": [...],
     *      "implicit": false,
     *      "isPercentage":false}
     *     ```
     *     where mathjs is optional
     * @returns {OperatorNode}
     */
    static fromJSON(o) {
      return new a(o.op, o.fn, o.args, o.implicit, o.isPercentage);
    }
    /**
     * Get HTML representation.
     * @param {Object} options
     * @return {string} str
     */
    toHTML(o) {
      var f = o && o.parenthesis ? o.parenthesis : "keep", l = o && o.implicit ? o.implicit : "hide", u = this.args, s = n(this, f, l, u, !1);
      if (u.length === 1) {
        var c = ci(this, f), m = u[0].toHTML(o);
        return s[0] && (m = '<span class="math-parenthesis math-round-parenthesis">(</span>' + m + '<span class="math-parenthesis math-round-parenthesis">)</span>'), c === "right" ? '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + Nt(this.op) + "</span>" + m : m + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + Nt(this.op) + "</span>";
      } else if (u.length === 2) {
        var v = u[0].toHTML(o), d = u[1].toHTML(o);
        return s[0] && (v = '<span class="math-parenthesis math-round-parenthesis">(</span>' + v + '<span class="math-parenthesis math-round-parenthesis">)</span>'), s[1] && (d = '<span class="math-parenthesis math-round-parenthesis">(</span>' + d + '<span class="math-parenthesis math-round-parenthesis">)</span>'), this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? v + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + d : v + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Nt(this.op) + "</span>" + d;
      } else {
        var p = u.map(function(b, g) {
          return b = b.toHTML(o), s[g] && (b = '<span class="math-parenthesis math-round-parenthesis">(</span>' + b + '<span class="math-parenthesis math-round-parenthesis">)</span>'), b;
        });
        return u.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply") ? this.implicit && this.getIdentifier() === "OperatorNode:multiply" && l === "hide" ? p.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>') : p.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Nt(this.op) + "</span>") : '<span class="math-function">' + Nt(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + p.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(o) {
      var f = o && o.parenthesis ? o.parenthesis : "keep", l = o && o.implicit ? o.implicit : "hide", u = this.args, s = n(this, f, l, u, !0), c = ar[this.fn];
      if (c = typeof c > "u" ? this.op : c, u.length === 1) {
        var m = ci(this, f), v = u[0].toTex(o);
        return s[0] && (v = "\\left(".concat(v, "\\right)")), m === "right" ? c + v : v + c;
      } else if (u.length === 2) {
        var d = u[0], p = d.toTex(o);
        s[0] && (p = "\\left(".concat(p, "\\right)"));
        var b = u[1], g = b.toTex(o);
        s[1] && (g = "\\left(".concat(g, "\\right)"));
        var N;
        switch (f === "keep" ? N = d.getIdentifier() : N = d.getContent().getIdentifier(), this.getIdentifier()) {
          case "OperatorNode:divide":
            return c + "{" + p + "}{" + g + "}";
          case "OperatorNode:pow":
            switch (p = "{" + p + "}", g = "{" + g + "}", N) {
              case "ConditionalNode":
              case "OperatorNode:divide":
                p = "\\left(".concat(p, "\\right)");
            }
            break;
          case "OperatorNode:multiply":
            if (this.implicit && l === "hide")
              return p + "~" + g;
        }
        return p + c + g;
      } else if (u.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
        var h = u.map(function(w, x) {
          return w = w.toTex(o), s[x] && (w = "\\left(".concat(w, "\\right)")), w;
        });
        return this.getIdentifier() === "OperatorNode:multiply" && this.implicit && l === "hide" ? h.join("~") : h.join(c);
      } else
        return "\\mathrm{" + this.fn + "}\\left(" + u.map(function(w) {
          return w.toTex(o);
        }).join(",") + "\\right)";
    }
    /**
     * Get identifier.
     * @return {string}
     */
    getIdentifier() {
      return this.type + ":" + this.fn;
    }
  }
  return _r(a, "name", mo), a;
}, {
  isClass: !0,
  isNode: !0
}), vo = "ParenthesisNode", HT = ["Node"], ZT = /* @__PURE__ */ q(vo, HT, (r) => {
  var {
    Node: e
  } = r;
  class t extends e {
    /**
     * @constructor ParenthesisNode
     * @extends {Node}
     * A parenthesis node describes manual parenthesis from the user input
     * @param {Node} content
     * @extends {Node}
     */
    constructor(a) {
      if (super(), !mr(a))
        throw new TypeError('Node expected for parameter "content"');
      this.content = a;
    }
    get type() {
      return vo;
    }
    get isParenthesisNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(a, i) {
      return this.content._compile(a, i);
    }
    /**
     * Get the content of the current Node.
     * @return {Node} content
     * @override
     **/
    getContent() {
      return this.content.getContent();
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(a) {
      a(this.content, "content", this);
    }
    /**
     * Create a new ParenthesisNode whose child is the result of calling
     * the provided callback function on the child of this node.
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {ParenthesisNode} Returns a clone of the node
     */
    map(a) {
      var i = a(this.content, "content", this);
      return new t(i);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {ParenthesisNode}
     */
    clone() {
      return new t(this.content);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(a) {
      return !a || a && !a.parenthesis || a && a.parenthesis === "keep" ? "(" + this.content.toString(a) + ")" : this.content.toString(a);
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: vo,
        content: this.content
      };
    }
    /**
     * Instantiate an ParenthesisNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
     *                       where mathjs is optional
     * @returns {ParenthesisNode}
     */
    static fromJSON(a) {
      return new t(a.content);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toHTML(a) {
      return !a || a && !a.parenthesis || a && a.parenthesis === "keep" ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(a) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : this.content.toHTML(a);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toTex(a) {
      return !a || a && !a.parenthesis || a && a.parenthesis === "keep" ? "\\left(".concat(this.content.toTex(a), "\\right)") : this.content.toTex(a);
    }
  }
  return _r(t, "name", vo), t;
}, {
  isClass: !0,
  isNode: !0
}), po = "RangeNode", YT = ["Node"], WT = /* @__PURE__ */ q(po, YT, (r) => {
  var {
    Node: e
  } = r;
  function t(a, i, o) {
    var f = dr(a, i, o), l = {}, u = dr(a.start, i, o);
    if (l.start = u !== null && u <= f || i === "all", a.step) {
      var s = dr(a.step, i, o);
      l.step = s !== null && s <= f || i === "all";
    }
    var c = dr(a.end, i, o);
    return l.end = c !== null && c <= f || i === "all", l;
  }
  class n extends e {
    /**
     * @constructor RangeNode
     * @extends {Node}
     * create a range
     * @param {Node} start  included lower-bound
     * @param {Node} end    included upper-bound
     * @param {Node} [step] optional step
     */
    constructor(i, o, f) {
      if (super(), !mr(i))
        throw new TypeError("Node expected");
      if (!mr(o))
        throw new TypeError("Node expected");
      if (f && !mr(f))
        throw new TypeError("Node expected");
      if (arguments.length > 3)
        throw new Error("Too many arguments");
      this.start = i, this.end = o, this.step = f || null;
    }
    get type() {
      return po;
    }
    get isRangeNode() {
      return !0;
    }
    /**
     * Check whether the RangeNode needs the `end` symbol to be defined.
     * This end is the size of the Matrix in current dimension.
     * @return {boolean}
     */
    needsEnd() {
      var i = this.filter(function(o) {
        return Ir(o) && o.name === "end";
      });
      return i.length > 0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, o) {
      var f = i.range, l = this.start._compile(i, o), u = this.end._compile(i, o);
      if (this.step) {
        var s = this.step._compile(i, o);
        return function(m, v, d) {
          return f(l(m, v, d), u(m, v, d), s(m, v, d));
        };
      } else
        return function(m, v, d) {
          return f(l(m, v, d), u(m, v, d));
        };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      i(this.start, "start", this), i(this.end, "end", this), this.step && i(this.step, "step", this);
    }
    /**
     * Create a new RangeNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {RangeNode} Returns a transformed copy of the node
     */
    map(i) {
      return new n(this._ifNode(i(this.start, "start", this)), this._ifNode(i(this.end, "end", this)), this.step && this._ifNode(i(this.step, "step", this)));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {RangeNode}
     */
    clone() {
      return new n(this.start, this.end, this.step && this.step);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(i) {
      var o = i && i.parenthesis ? i.parenthesis : "keep", f = t(this, o, i && i.implicit), l, u = this.start.toString(i);
      if (f.start && (u = "(" + u + ")"), l = u, this.step) {
        var s = this.step.toString(i);
        f.step && (s = "(" + s + ")"), l += ":" + s;
      }
      var c = this.end.toString(i);
      return f.end && (c = "(" + c + ")"), l += ":" + c, l;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: po,
        start: this.start,
        end: this.end,
        step: this.step
      };
    }
    /**
     * Instantiate an RangeNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
     *     where mathjs is optional
     * @returns {RangeNode}
     */
    static fromJSON(i) {
      return new n(i.start, i.end, i.step);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(i) {
      var o = i && i.parenthesis ? i.parenthesis : "keep", f = t(this, o, i && i.implicit), l, u = this.start.toHTML(i);
      if (f.start && (u = '<span class="math-parenthesis math-round-parenthesis">(</span>' + u + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l = u, this.step) {
        var s = this.step.toHTML(i);
        f.step && (s = '<span class="math-parenthesis math-round-parenthesis">(</span>' + s + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l += '<span class="math-operator math-range-operator">:</span>' + s;
      }
      var c = this.end.toHTML(i);
      return f.end && (c = '<span class="math-parenthesis math-round-parenthesis">(</span>' + c + '<span class="math-parenthesis math-round-parenthesis">)</span>'), l += '<span class="math-operator math-range-operator">:</span>' + c, l;
    }
    /**
     * Get LaTeX representation
     * @params {Object} options
     * @return {string} str
     */
    _toTex(i) {
      var o = i && i.parenthesis ? i.parenthesis : "keep", f = t(this, o, i && i.implicit), l = this.start.toTex(i);
      if (f.start && (l = "\\left(".concat(l, "\\right)")), this.step) {
        var u = this.step.toTex(i);
        f.step && (u = "\\left(".concat(u, "\\right)")), l += ":" + u;
      }
      var s = this.end.toTex(i);
      return f.end && (s = "\\left(".concat(s, "\\right)")), l += ":" + s, l;
    }
  }
  return _r(n, "name", po), n;
}, {
  isClass: !0,
  isNode: !0
}), ho = "RelationalNode", JT = ["Node"], XT = /* @__PURE__ */ q(ho, JT, (r) => {
  var {
    Node: e
  } = r, t = {
    equal: "==",
    unequal: "!=",
    smaller: "<",
    larger: ">",
    smallerEq: "<=",
    largerEq: ">="
  };
  class n extends e {
    /**
     * A node representing a chained conditional expression, such as 'x > y > z'
     *
     * @param {String[]} conditionals
     *     An array of conditional operators used to compare the parameters
     * @param {Node[]} params
     *     The parameters that will be compared
     *
     * @constructor RelationalNode
     * @extends {Node}
     */
    constructor(i, o) {
      if (super(), !Array.isArray(i))
        throw new TypeError("Parameter conditionals must be an array");
      if (!Array.isArray(o))
        throw new TypeError("Parameter params must be an array");
      if (i.length !== o.length - 1)
        throw new TypeError("Parameter params must contain exactly one more element than parameter conditionals");
      this.conditionals = i, this.params = o;
    }
    get type() {
      return ho;
    }
    get isRelationalNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(i, o) {
      var f = this, l = this.params.map((u) => u._compile(i, o));
      return function(s, c, m) {
        for (var v, d = l[0](s, c, m), p = 0; p < f.conditionals.length; p++) {
          v = d, d = l[p + 1](s, c, m);
          var b = rt(i, f.conditionals[p]);
          if (!b(v, d))
            return !1;
        }
        return !0;
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(i) {
      this.params.forEach((o, f) => i(o, "params[" + f + "]", this), this);
    }
    /**
     * Create a new RelationalNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {RelationalNode} Returns a transformed copy of the node
     */
    map(i) {
      return new n(this.conditionals.slice(), this.params.map((o, f) => this._ifNode(i(o, "params[" + f + "]", this)), this));
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {RelationalNode}
     */
    clone() {
      return new n(this.conditionals, this.params);
    }
    /**
     * Get string representation.
     * @param {Object} options
     * @return {string} str
     */
    _toString(i) {
      for (var o = i && i.parenthesis ? i.parenthesis : "keep", f = dr(this, o, i && i.implicit), l = this.params.map(function(c, m) {
        var v = dr(c, o, i && i.implicit);
        return o === "all" || v !== null && v <= f ? "(" + c.toString(i) + ")" : c.toString(i);
      }), u = l[0], s = 0; s < this.conditionals.length; s++)
        u += " " + t[this.conditionals[s]], u += " " + l[s + 1];
      return u;
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: ho,
        conditionals: this.conditionals,
        params: this.params
      };
    }
    /**
     * Instantiate a RelationalNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "RelationalNode", "conditionals": ..., "params": ...}`,
     *     where mathjs is optional
     * @returns {RelationalNode}
     */
    static fromJSON(i) {
      return new n(i.conditionals, i.params);
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(i) {
      for (var o = i && i.parenthesis ? i.parenthesis : "keep", f = dr(this, o, i && i.implicit), l = this.params.map(function(c, m) {
        var v = dr(c, o, i && i.implicit);
        return o === "all" || v !== null && v <= f ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + c.toHTML(i) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : c.toHTML(i);
      }), u = l[0], s = 0; s < this.conditionals.length; s++)
        u += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Nt(t[this.conditionals[s]]) + "</span>" + l[s + 1];
      return u;
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(i) {
      for (var o = i && i.parenthesis ? i.parenthesis : "keep", f = dr(this, o, i && i.implicit), l = this.params.map(function(c, m) {
        var v = dr(c, o, i && i.implicit);
        return o === "all" || v !== null && v <= f ? "\\left(" + c.toTex(i) + "\right)" : c.toTex(i);
      }), u = l[0], s = 0; s < this.conditionals.length; s++)
        u += ar[this.conditionals[s]] + l[s + 1];
      return u;
    }
  }
  return _r(n, "name", ho), n;
}, {
  isClass: !0,
  isNode: !0
}), KT = "SymbolNode", QT = ["math", "?Unit", "Node"], jT = /* @__PURE__ */ q(KT, QT, (r) => {
  var {
    math: e,
    Unit: t,
    Node: n
  } = r;
  function a(o) {
    return t ? t.isValuelessUnit(o) : !1;
  }
  class i extends n {
    /**
     * @constructor SymbolNode
     * @extends {Node}
     * A symbol node can hold and resolve a symbol
     * @param {string} name
     * @extends {Node}
     */
    constructor(f) {
      if (super(), typeof f != "string")
        throw new TypeError('String expected for parameter "name"');
      this.name = f;
    }
    get type() {
      return "SymbolNode";
    }
    get isSymbolNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(f, l) {
      var u = this.name;
      if (l[u] === !0)
        return function(c, m, v) {
          return rt(m, u);
        };
      if (u in f)
        return function(c, m, v) {
          return c.has(u) ? c.get(u) : rt(f, u);
        };
      var s = a(u);
      return function(c, m, v) {
        return c.has(u) ? c.get(u) : s ? new t(null, u) : i.onUndefinedSymbol(u);
      };
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(f) {
    }
    /**
     * Create a new SymbolNode with children produced by the given callback.
     * Trivial since a SymbolNode has no children
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {SymbolNode} Returns a clone of the node
     */
    map(f) {
      return this.clone();
    }
    /**
     * Throws an error 'Undefined symbol {name}'
     * @param {string} name
     */
    static onUndefinedSymbol(f) {
      throw new Error("Undefined symbol " + f);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {SymbolNode}
     */
    clone() {
      return new i(this.name);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toString(f) {
      return this.name;
    }
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toHTML(f) {
      var l = Nt(this.name);
      return l === "true" || l === "false" ? '<span class="math-symbol math-boolean">' + l + "</span>" : l === "i" ? '<span class="math-symbol math-imaginary-symbol">' + l + "</span>" : l === "Infinity" ? '<span class="math-symbol math-infinity-symbol">' + l + "</span>" : l === "NaN" ? '<span class="math-symbol math-nan-symbol">' + l + "</span>" : l === "null" ? '<span class="math-symbol math-null-symbol">' + l + "</span>" : l === "undefined" ? '<span class="math-symbol math-undefined-symbol">' + l + "</span>" : '<span class="math-symbol">' + l + "</span>";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: "SymbolNode",
        name: this.name
      };
    }
    /**
     * Instantiate a SymbolNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "SymbolNode", name: "x"}`,
     *                       where mathjs is optional
     * @returns {SymbolNode}
     */
    static fromJSON(f) {
      return new i(f.name);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     * @override
     */
    _toTex(f) {
      var l = !1;
      typeof e[this.name] > "u" && a(this.name) && (l = !0);
      var u = og(this.name, l);
      return u[0] === "\\" ? u : " " + u;
    }
  }
  return i;
}, {
  isClass: !0,
  isNode: !0
});
function hi(r) {
  for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
    t[n - 1] = arguments[n];
  return typeof r.createSubScope == "function" ? uf(r.createSubScope(), ...t) : uf(za(), r, ...t);
}
var go = "FunctionNode", e3 = ["math", "Node", "SymbolNode"], r3 = /* @__PURE__ */ q(go, e3, (r) => {
  var e, {
    math: t,
    Node: n,
    SymbolNode: a
  } = r, i = (l) => Je(l, {
    truncate: 78
  });
  function o(l, u, s) {
    for (var c = "", m = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi, v = 0, d; (d = m.exec(l)) !== null; )
      if (c += l.substring(v, d.index), v = d.index, d[0] === "$$")
        c += "$", v++;
      else {
        v += d[0].length;
        var p = u[d[1]];
        if (!p)
          throw new ReferenceError("Template: Property " + d[1] + " does not exist.");
        if (d[2] === void 0)
          switch (typeof p) {
            case "string":
              c += p;
              break;
            case "object":
              if (mr(p))
                c += p.toTex(s);
              else if (Array.isArray(p))
                c += p.map(function(b, g) {
                  if (mr(b))
                    return b.toTex(s);
                  throw new TypeError("Template: " + d[1] + "[" + g + "] is not a Node.");
                }).join(",");
              else
                throw new TypeError("Template: " + d[1] + " has to be a Node, String or array of Nodes");
              break;
            default:
              throw new TypeError("Template: " + d[1] + " has to be a Node, String or array of Nodes");
          }
        else if (mr(p[d[2]] && p[d[2]]))
          c += p[d[2]].toTex(s);
        else
          throw new TypeError("Template: " + d[1] + "[" + d[2] + "] is not a Node.");
      }
    return c += l.slice(v), c;
  }
  class f extends n {
    /**
     * @constructor FunctionNode
     * @extends {./Node}
     * invoke a list with arguments on a node
     * @param {./Node | string} fn
     *     Item resolving to a function on which to invoke
     *     the arguments, typically a SymboNode or AccessorNode
     * @param {./Node[]} args
     */
    constructor(u, s) {
      if (super(), typeof u == "string" && (u = new a(u)), !mr(u))
        throw new TypeError('Node expected as parameter "fn"');
      if (!Array.isArray(s) || !s.every(mr))
        throw new TypeError('Array containing Nodes expected for parameter "args"');
      this.fn = u, this.args = s || [];
    }
    // readonly property name
    get name() {
      return this.fn.name || "";
    }
    get type() {
      return go;
    }
    get isFunctionNode() {
      return !0;
    }
    /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */
    _compile(u, s) {
      var c = this.args.map((D) => D._compile(u, s));
      if (Ir(this.fn)) {
        var m = this.fn.name;
        if (s[m]) {
          var g = this.args;
          return function(S, A, C) {
            var T = rt(A, m);
            if (typeof T != "function")
              throw new TypeError("Argument '".concat(m, "' was not a function; received: ").concat(i(T)));
            if (T.rawArgs)
              return T(g, u, hi(S, A), S);
            var $ = c.map((I) => I(S, A, C));
            return T.apply(T, $);
          };
        } else {
          var v = m in u ? rt(u, m) : void 0, d = typeof v == "function" && v.rawArgs === !0, p = (D) => {
            var S;
            if (D.has(m))
              S = D.get(m);
            else if (m in u)
              S = rt(u, m);
            else
              return f.onUndefinedFunction(m);
            if (typeof S == "function")
              return S;
            throw new TypeError("'".concat(m, `' is not a function; its value is:
  `).concat(i(S)));
          };
          if (d) {
            var b = this.args;
            return function(S, A, C) {
              var T = p(S);
              return T(b, u, hi(S, A), S);
            };
          } else
            switch (c.length) {
              case 0:
                return function(S, A, C) {
                  var T = p(S);
                  return T();
                };
              case 1:
                return function(S, A, C) {
                  var T = p(S), $ = c[0];
                  return T($(S, A, C));
                };
              case 2:
                return function(S, A, C) {
                  var T = p(S), $ = c[0], I = c[1];
                  return T($(S, A, C), I(S, A, C));
                };
              default:
                return function(S, A, C) {
                  var T = p(S), $ = c.map((I) => I(S, A, C));
                  return T(...$);
                };
            }
        }
      } else if (Yn(this.fn) && Ya(this.fn.index) && this.fn.index.isObjectProperty()) {
        var N = this.fn.object._compile(u, s), h = this.fn.index.getObjectProperty(), w = this.args;
        return function(S, A, C) {
          var T = N(S, A, C), $ = Aw(T, h);
          if ($ != null && $.rawArgs)
            return $(w, u, hi(S, A), S);
          var I = c.map((R) => R(S, A, C));
          return $.apply(T, I);
        };
      } else {
        var x = this.fn.toString(), y = this.fn._compile(u, s), E = this.args;
        return function(S, A, C) {
          var T = y(S, A, C);
          if (typeof T != "function")
            throw new TypeError("Expression '".concat(x, "' did not evaluate to a function; value is:") + `
  `.concat(i(T)));
          if (T.rawArgs)
            return T(E, u, hi(S, A), S);
          var $ = c.map((I) => I(S, A, C));
          return T.apply(T, $);
        };
      }
    }
    /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */
    forEach(u) {
      u(this.fn, "fn", this);
      for (var s = 0; s < this.args.length; s++)
        u(this.args[s], "args[" + s + "]", this);
    }
    /**
     * Create a new FunctionNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {FunctionNode} Returns a transformed copy of the node
     */
    map(u) {
      for (var s = this._ifNode(u(this.fn, "fn", this)), c = [], m = 0; m < this.args.length; m++)
        c[m] = this._ifNode(u(this.args[m], "args[" + m + "]", this));
      return new f(s, c);
    }
    /**
     * Create a clone of this node, a shallow copy
     * @return {FunctionNode}
     */
    clone() {
      return new f(this.fn, this.args.slice(0));
    }
    /**
     * Throws an error 'Undefined function {name}'
     * @param {string} name
     */
    /**
     * Get string representation. (wrapper function)
     * This overrides parts of Node's toString function.
     * If callback is an object containing callbacks, it
     * calls the correct callback for the current node,
     * otherwise it falls back to calling Node's toString
     * function.
     *
     * @param {Object} options
     * @return {string} str
     * @override
     */
    toString(u) {
      var s, c = this.fn.toString(u);
      return u && typeof u.handler == "object" && $e(u.handler, c) && (s = u.handler[c](this, u)), typeof s < "u" ? s : super.toString(u);
    }
    /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */
    _toString(u) {
      var s = this.args.map(function(m) {
        return m.toString(u);
      }), c = Ci(this.fn) ? "(" + this.fn.toString(u) + ")" : this.fn.toString(u);
      return c + "(" + s.join(", ") + ")";
    }
    /**
     * Get a JSON representation of the node
     * @returns {Object}
     */
    toJSON() {
      return {
        mathjs: go,
        fn: this.fn,
        args: this.args
      };
    }
    /**
     * Instantiate an AssignmentNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
     *                       where mathjs is optional
     * @returns {FunctionNode}
     */
    /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */
    toHTML(u) {
      var s = this.args.map(function(c) {
        return c.toHTML(u);
      });
      return '<span class="math-function">' + Nt(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + s.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }
    /**
     * Get LaTeX representation. (wrapper function)
     * This overrides parts of Node's toTex function.
     * If callback is an object containing callbacks, it
     * calls the correct callback for the current node,
     * otherwise it falls back to calling Node's toTex
     * function.
     *
     * @param {Object} options
     * @return {string}
     */
    toTex(u) {
      var s;
      return u && typeof u.handler == "object" && $e(u.handler, this.name) && (s = u.handler[this.name](this, u)), typeof s < "u" ? s : super.toTex(u);
    }
    /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */
    _toTex(u) {
      var s = this.args.map(function(v) {
        return v.toTex(u);
      }), c;
      lp[this.name] && (c = lp[this.name]), t[this.name] && (typeof t[this.name].toTex == "function" || typeof t[this.name].toTex == "object" || typeof t[this.name].toTex == "string") && (c = t[this.name].toTex);
      var m;
      switch (typeof c) {
        case "function":
          m = c(this, u);
          break;
        case "string":
          m = o(c, this, u);
          break;
        case "object":
          switch (typeof c[s.length]) {
            case "function":
              m = c[s.length](this, u);
              break;
            case "string":
              m = o(c[s.length], this, u);
              break;
          }
      }
      return typeof m < "u" ? m : o($T, this, u);
    }
    /**
     * Get identifier.
     * @return {string}
     */
    getIdentifier() {
      return this.type + ":" + this.name;
    }
  }
  return e = f, _r(f, "name", go), _r(f, "onUndefinedFunction", function(l) {
    throw new Error("Undefined function " + l);
  }), _r(f, "fromJSON", function(l) {
    return new e(l.fn, l.args);
  }), f;
}, {
  isClass: !0,
  isNode: !0
}), mp = "parse", t3 = ["typed", "numeric", "config", "AccessorNode", "ArrayNode", "AssignmentNode", "BlockNode", "ConditionalNode", "ConstantNode", "FunctionAssignmentNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "RangeNode", "RelationalNode", "SymbolNode"], n3 = /* @__PURE__ */ q(mp, t3, (r) => {
  var {
    typed: e,
    numeric: t,
    config: n,
    AccessorNode: a,
    ArrayNode: i,
    AssignmentNode: o,
    BlockNode: f,
    ConditionalNode: l,
    ConstantNode: u,
    FunctionAssignmentNode: s,
    FunctionNode: c,
    IndexNode: m,
    ObjectNode: v,
    OperatorNode: d,
    ParenthesisNode: p,
    RangeNode: b,
    RelationalNode: g,
    SymbolNode: N
  } = r, h = e(mp, {
    string: function(X) {
      return K(X, {});
    },
    "Array | Matrix": function(X) {
      return w(X, {});
    },
    "string, Object": function(X, se) {
      var Ee = se.nodes !== void 0 ? se.nodes : {};
      return K(X, Ee);
    },
    "Array | Matrix, Object": w
  });
  function w(M) {
    var X = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, se = X.nodes !== void 0 ? X.nodes : {};
    return je(M, function(Ee) {
      if (typeof Ee != "string")
        throw new TypeError("String expected");
      return K(Ee, se);
    });
  }
  var x = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4
  }, y = {
    ",": !0,
    "(": !0,
    ")": !0,
    "[": !0,
    "]": !0,
    "{": !0,
    "}": !0,
    '"': !0,
    "'": !0,
    ";": !0,
    "+": !0,
    "-": !0,
    "*": !0,
    ".*": !0,
    "/": !0,
    "./": !0,
    "%": !0,
    "^": !0,
    ".^": !0,
    "~": !0,
    "!": !0,
    "&": !0,
    "|": !0,
    "^|": !0,
    "=": !0,
    ":": !0,
    "?": !0,
    "==": !0,
    "!=": !0,
    "<": !0,
    ">": !0,
    "<=": !0,
    ">=": !0,
    "<<": !0,
    ">>": !0,
    ">>>": !0
  }, E = {
    mod: !0,
    to: !0,
    in: !0,
    and: !0,
    xor: !0,
    or: !0,
    not: !0
  }, D = {
    true: !0,
    false: !1,
    null: null,
    undefined: void 0
  }, S = ["NaN", "Infinity"], A = {
    '"': '"',
    "'": "'",
    "\\": "\\",
    "/": "/",
    b: "\b",
    f: "\f",
    n: `
`,
    r: "\r",
    t: "	"
    // note that \u is handled separately in parseStringToken()
  };
  function C() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: "",
      // current expression
      comment: "",
      // last parsed comment
      index: 0,
      // current index in expr
      token: "",
      // current token
      tokenType: x.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null
      // when a conditional is being parsed, the level of the conditional is stored here
    };
  }
  function T(M, X) {
    return M.expression.substr(M.index, X);
  }
  function $(M) {
    return T(M, 1);
  }
  function I(M) {
    M.index++;
  }
  function R(M) {
    return M.expression.charAt(M.index - 1);
  }
  function B(M) {
    return M.expression.charAt(M.index + 1);
  }
  function O(M) {
    for (M.tokenType = x.NULL, M.token = "", M.comment = ""; ; ) {
      if ($(M) === "#")
        for (; $(M) !== `
` && $(M) !== ""; )
          M.comment += $(M), I(M);
      if (h.isWhitespace($(M), M.nestingLevel))
        I(M);
      else
        break;
    }
    if ($(M) === "") {
      M.tokenType = x.DELIMITER;
      return;
    }
    if ($(M) === `
` && !M.nestingLevel) {
      M.tokenType = x.DELIMITER, M.token = $(M), I(M);
      return;
    }
    var X = $(M), se = T(M, 2), Ee = T(M, 3);
    if (Ee.length === 3 && y[Ee]) {
      M.tokenType = x.DELIMITER, M.token = Ee, I(M), I(M), I(M);
      return;
    }
    if (se.length === 2 && y[se]) {
      M.tokenType = x.DELIMITER, M.token = se, I(M), I(M);
      return;
    }
    if (y[X]) {
      M.tokenType = x.DELIMITER, M.token = X, I(M);
      return;
    }
    if (h.isDigitDot(X)) {
      M.tokenType = x.NUMBER;
      var ze = T(M, 2);
      if (ze === "0b" || ze === "0o" || ze === "0x") {
        for (M.token += $(M), I(M), M.token += $(M), I(M); h.isHexDigit($(M)); )
          M.token += $(M), I(M);
        if ($(M) === ".")
          for (M.token += ".", I(M); h.isHexDigit($(M)); )
            M.token += $(M), I(M);
        else if ($(M) === "i")
          for (M.token += "i", I(M); h.isDigit($(M)); )
            M.token += $(M), I(M);
        return;
      }
      if ($(M) === ".") {
        if (M.token += $(M), I(M), !h.isDigit($(M))) {
          M.tokenType = x.DELIMITER;
          return;
        }
      } else {
        for (; h.isDigit($(M)); )
          M.token += $(M), I(M);
        h.isDecimalMark($(M), B(M)) && (M.token += $(M), I(M));
      }
      for (; h.isDigit($(M)); )
        M.token += $(M), I(M);
      if ($(M) === "E" || $(M) === "e") {
        if (h.isDigit(B(M)) || B(M) === "-" || B(M) === "+") {
          if (M.token += $(M), I(M), ($(M) === "+" || $(M) === "-") && (M.token += $(M), I(M)), !h.isDigit($(M)))
            throw Re(M, 'Digit expected, got "' + $(M) + '"');
          for (; h.isDigit($(M)); )
            M.token += $(M), I(M);
          if (h.isDecimalMark($(M), B(M)))
            throw Re(M, 'Digit expected, got "' + $(M) + '"');
        } else if (B(M) === ".")
          throw I(M), Re(M, 'Digit expected, got "' + $(M) + '"');
      }
      return;
    }
    if (h.isAlpha($(M), R(M), B(M))) {
      for (; h.isAlpha($(M), R(M), B(M)) || h.isDigit($(M)); )
        M.token += $(M), I(M);
      $e(E, M.token) ? M.tokenType = x.DELIMITER : M.tokenType = x.SYMBOL;
      return;
    }
    for (M.tokenType = x.UNKNOWN; $(M) !== ""; )
      M.token += $(M), I(M);
    throw Re(M, 'Syntax error in part "' + M.token + '"');
  }
  function G(M) {
    do
      O(M);
    while (M.token === `
`);
  }
  function _(M) {
    M.nestingLevel++;
  }
  function U(M) {
    M.nestingLevel--;
  }
  h.isAlpha = function(X, se, Ee) {
    return h.isValidLatinOrGreek(X) || h.isValidMathSymbol(X, Ee) || h.isValidMathSymbol(se, X);
  }, h.isValidLatinOrGreek = function(X) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(X);
  }, h.isValidMathSymbol = function(X, se) {
    return /^[\uD835]$/.test(X) && /^[\uDC00-\uDFFF]$/.test(se) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(se);
  }, h.isWhitespace = function(X, se) {
    return X === " " || X === "	" || X === `
` && se > 0;
  }, h.isDecimalMark = function(X, se) {
    return X === "." && se !== "/" && se !== "*" && se !== "^";
  }, h.isDigitDot = function(X) {
    return X >= "0" && X <= "9" || X === ".";
  }, h.isDigit = function(X) {
    return X >= "0" && X <= "9";
  }, h.isHexDigit = function(X) {
    return X >= "0" && X <= "9" || X >= "a" && X <= "f" || X >= "A" && X <= "F";
  };
  function K(M, X) {
    var se = C();
    Rr(se, {
      expression: M,
      extraNodes: X
    }), O(se);
    var Ee = j(se);
    if (se.token !== "")
      throw se.tokenType === x.DELIMITER ? wr(se, "Unexpected operator " + se.token) : Re(se, 'Unexpected part "' + se.token + '"');
    return Ee;
  }
  function j(M) {
    var X, se = [], Ee;
    for (M.token !== "" && M.token !== `
` && M.token !== ";" && (X = z(M), M.comment && (X.comment = M.comment)); M.token === `
` || M.token === ";"; )
      se.length === 0 && X && (Ee = M.token !== ";", se.push({
        node: X,
        visible: Ee
      })), O(M), M.token !== `
` && M.token !== ";" && M.token !== "" && (X = z(M), M.comment && (X.comment = M.comment), Ee = M.token !== ";", se.push({
        node: X,
        visible: Ee
      }));
    return se.length > 0 ? new f(se) : (X || (X = new u(void 0), M.comment && (X.comment = M.comment)), X);
  }
  function z(M) {
    var X, se, Ee, ze, Ve = Q(M);
    if (M.token === "=") {
      if (Ir(Ve))
        return X = Ve.name, G(M), Ee = z(M), new o(new N(X), Ee);
      if (Yn(Ve))
        return G(M), Ee = z(M), new o(Ve.object, Ve.index, Ee);
      if (Mn(Ve) && Ir(Ve.fn) && (ze = !0, se = [], X = Ve.name, Ve.args.forEach(function(Kr, ca) {
        Ir(Kr) ? se[ca] = Kr.name : ze = !1;
      }), ze))
        return G(M), Ee = z(M), new s(X, se, Ee);
      throw Re(M, "Invalid left hand side of assignment operator =");
    }
    return Ve;
  }
  function Q(M) {
    for (var X = ae(M); M.token === "?"; ) {
      var se = M.conditionalLevel;
      M.conditionalLevel = M.nestingLevel, G(M);
      var Ee = X, ze = z(M);
      if (M.token !== ":")
        throw Re(M, "False part of conditional expression expected");
      M.conditionalLevel = null, G(M);
      var Ve = z(M);
      X = new l(Ee, ze, Ve), M.conditionalLevel = se;
    }
    return X;
  }
  function ae(M) {
    for (var X = re(M); M.token === "or"; )
      G(M), X = new d("or", "or", [X, re(M)]);
    return X;
  }
  function re(M) {
    for (var X = fe(M); M.token === "xor"; )
      G(M), X = new d("xor", "xor", [X, fe(M)]);
    return X;
  }
  function fe(M) {
    for (var X = de(M); M.token === "and"; )
      G(M), X = new d("and", "and", [X, de(M)]);
    return X;
  }
  function de(M) {
    for (var X = le(M); M.token === "|"; )
      G(M), X = new d("|", "bitOr", [X, le(M)]);
    return X;
  }
  function le(M) {
    for (var X = ie(M); M.token === "^|"; )
      G(M), X = new d("^|", "bitXor", [X, ie(M)]);
    return X;
  }
  function ie(M) {
    for (var X = ye(M); M.token === "&"; )
      G(M), X = new d("&", "bitAnd", [X, ye(M)]);
    return X;
  }
  function ye(M) {
    for (var X = [_e(M)], se = [], Ee = {
      "==": "equal",
      "!=": "unequal",
      "<": "smaller",
      ">": "larger",
      "<=": "smallerEq",
      ">=": "largerEq"
    }; $e(Ee, M.token); ) {
      var ze = {
        name: M.token,
        fn: Ee[M.token]
      };
      se.push(ze), G(M), X.push(_e(M));
    }
    return X.length === 1 ? X[0] : X.length === 2 ? new d(se[0].name, se[0].fn, X) : new g(se.map((Ve) => Ve.fn), X);
  }
  function _e(M) {
    var X, se, Ee, ze;
    X = De(M);
    for (var Ve = {
      "<<": "leftShift",
      ">>": "rightArithShift",
      ">>>": "rightLogShift"
    }; $e(Ve, M.token); )
      se = M.token, Ee = Ve[se], G(M), ze = [X, De(M)], X = new d(se, Ee, ze);
    return X;
  }
  function De(M) {
    var X, se, Ee, ze;
    X = Be(M);
    for (var Ve = {
      to: "to",
      in: "to"
      // alias of 'to'
    }; $e(Ve, M.token); )
      se = M.token, Ee = Ve[se], G(M), se === "in" && M.token === "" ? X = new d("*", "multiply", [X, new N("in")], !0) : (ze = [X, Be(M)], X = new d(se, Ee, ze));
    return X;
  }
  function Be(M) {
    var X, se = [];
    if (M.token === ":" ? X = new u(1) : X = k(M), M.token === ":" && M.conditionalLevel !== M.nestingLevel) {
      for (se.push(X); M.token === ":" && se.length < 3; )
        G(M), M.token === ")" || M.token === "]" || M.token === "," || M.token === "" ? se.push(new N("end")) : se.push(k(M));
      se.length === 3 ? X = new b(se[0], se[2], se[1]) : X = new b(se[0], se[1]);
    }
    return X;
  }
  function k(M) {
    var X, se, Ee, ze;
    X = Z(M);
    for (var Ve = {
      "+": "add",
      "-": "subtract"
    }; $e(Ve, M.token); ) {
      se = M.token, Ee = Ve[se], G(M);
      var Kr = Z(M);
      Kr.isPercentage ? ze = [X, new d("*", "multiply", [X, Kr])] : ze = [X, Kr], X = new d(se, Ee, ze);
    }
    return X;
  }
  function Z(M) {
    var X, se, Ee, ze;
    X = oe(M), se = X;
    for (var Ve = {
      "*": "multiply",
      ".*": "dotMultiply",
      "/": "divide",
      "./": "dotDivide"
    }; $e(Ve, M.token); )
      Ee = M.token, ze = Ve[Ee], G(M), se = oe(M), X = new d(Ee, ze, [X, se]);
    return X;
  }
  function oe(M) {
    var X, se;
    for (X = H(M), se = X; M.tokenType === x.SYMBOL || M.token === "in" && ir(X) || M.tokenType === x.NUMBER && !ir(se) && (!Or(se) || se.op === "!") || M.token === "("; )
      se = H(M), X = new d(
        "*",
        "multiply",
        [X, se],
        !0
        /* implicit */
      );
    return X;
  }
  function H(M) {
    for (var X = W(M), se = X, Ee = []; M.token === "/" && Wu(se); )
      if (Ee.push(Rr({}, M)), G(M), M.tokenType === x.NUMBER)
        if (Ee.push(Rr({}, M)), G(M), M.tokenType === x.SYMBOL || M.token === "(")
          Rr(M, Ee.pop()), Ee.pop(), se = W(M), X = new d("/", "divide", [X, se]);
        else {
          Ee.pop(), Rr(M, Ee.pop());
          break;
        }
      else {
        Rr(M, Ee.pop());
        break;
      }
    return X;
  }
  function W(M) {
    var X, se, Ee, ze;
    X = te(M);
    for (var Ve = {
      "%": "mod",
      mod: "mod"
    }; $e(Ve, M.token); )
      se = M.token, Ee = Ve[se], G(M), se === "%" && M.tokenType === x.DELIMITER && M.token !== "(" ? X = new d("/", "divide", [X, new u(100)], !1, !0) : (ze = [X, te(M)], X = new d(se, Ee, ze));
    return X;
  }
  function te(M) {
    var X, se, Ee, ze = {
      "-": "unaryMinus",
      "+": "unaryPlus",
      "~": "bitNot",
      not: "not"
    };
    return $e(ze, M.token) ? (Ee = ze[M.token], X = M.token, G(M), se = [te(M)], new d(X, Ee, se)) : ge(M);
  }
  function ge(M) {
    var X, se, Ee, ze;
    return X = ve(M), (M.token === "^" || M.token === ".^") && (se = M.token, Ee = se === "^" ? "pow" : "dotPow", G(M), ze = [X, te(M)], X = new d(se, Ee, ze)), X;
  }
  function ve(M) {
    var X, se, Ee, ze;
    X = P(M);
    for (var Ve = {
      "!": "factorial",
      "'": "ctranspose"
    }; $e(Ve, M.token); )
      se = M.token, Ee = Ve[se], O(M), ze = [X], X = new d(se, Ee, ze), X = ee(M, X);
    return X;
  }
  function P(M) {
    var X = [];
    if (M.tokenType === x.SYMBOL && $e(M.extraNodes, M.token)) {
      var se = M.extraNodes[M.token];
      if (O(M), M.token === "(") {
        if (X = [], _(M), O(M), M.token !== ")")
          for (X.push(z(M)); M.token === ","; )
            O(M), X.push(z(M));
        if (M.token !== ")")
          throw Re(M, "Parenthesis ) expected");
        U(M), O(M);
      }
      return new se(X);
    }
    return V(M);
  }
  function V(M) {
    var X, se;
    return M.tokenType === x.SYMBOL || M.tokenType === x.DELIMITER && M.token in E ? (se = M.token, O(M), $e(D, se) ? X = new u(D[se]) : S.indexOf(se) !== -1 ? X = new u(t(se, "number")) : X = new N(se), X = ee(M, X), X) : ue(M);
  }
  function ee(M, X, se) {
    for (var Ee; (M.token === "(" || M.token === "[" || M.token === ".") && (!se || se.indexOf(M.token) !== -1); )
      if (Ee = [], M.token === "(")
        if (Ir(X) || Yn(X)) {
          if (_(M), O(M), M.token !== ")")
            for (Ee.push(z(M)); M.token === ","; )
              O(M), Ee.push(z(M));
          if (M.token !== ")")
            throw Re(M, "Parenthesis ) expected");
          U(M), O(M), X = new c(X, Ee);
        } else
          return X;
      else if (M.token === "[") {
        if (_(M), O(M), M.token !== "]")
          for (Ee.push(z(M)); M.token === ","; )
            O(M), Ee.push(z(M));
        if (M.token !== "]")
          throw Re(M, "Parenthesis ] expected");
        U(M), O(M), X = new a(X, new m(Ee));
      } else {
        O(M);
        var ze = M.tokenType === x.SYMBOL || M.tokenType === x.DELIMITER && M.token in E;
        if (!ze)
          throw Re(M, "Property name expected after dot");
        Ee.push(new u(M.token)), O(M);
        var Ve = !0;
        X = new a(X, new m(Ee, Ve));
      }
    return X;
  }
  function ue(M) {
    var X, se;
    return M.token === '"' || M.token === "'" ? (se = pe(M, M.token), X = new u(se), X = ee(M, X), X) : me(M);
  }
  function pe(M, X) {
    for (var se = ""; $(M) !== "" && $(M) !== X; )
      if ($(M) === "\\") {
        I(M);
        var Ee = $(M), ze = A[Ee];
        if (ze !== void 0)
          se += ze, M.index += 1;
        else if (Ee === "u") {
          var Ve = M.expression.slice(M.index + 1, M.index + 5);
          if (/^[0-9A-Fa-f]{4}$/.test(Ve))
            se += String.fromCharCode(parseInt(Ve, 16)), M.index += 5;
          else
            throw Re(M, "Invalid unicode character \\u".concat(Ve));
        } else
          throw Re(M, "Bad escape character \\".concat(Ee));
      } else
        se += $(M), I(M);
    if (O(M), M.token !== X)
      throw Re(M, "End of string ".concat(X, " expected"));
    return O(M), se;
  }
  function me(M) {
    var X, se, Ee, ze;
    if (M.token === "[") {
      if (_(M), O(M), M.token !== "]") {
        var Ve = Ne(M);
        if (M.token === ";") {
          for (Ee = 1, se = [Ve]; M.token === ";"; )
            O(M), se[Ee] = Ne(M), Ee++;
          if (M.token !== "]")
            throw Re(M, "End of matrix ] expected");
          U(M), O(M), ze = se[0].items.length;
          for (var Kr = 1; Kr < Ee; Kr++)
            if (se[Kr].items.length !== ze)
              throw wr(M, "Column dimensions mismatch (" + se[Kr].items.length + " !== " + ze + ")");
          X = new i(se);
        } else {
          if (M.token !== "]")
            throw Re(M, "End of matrix ] expected");
          U(M), O(M), X = Ve;
        }
      } else
        U(M), O(M), X = new i([]);
      return ee(M, X);
    }
    return be(M);
  }
  function Ne(M) {
    for (var X = [z(M)], se = 1; M.token === ","; )
      O(M), X[se] = z(M), se++;
    return new i(X);
  }
  function be(M) {
    if (M.token === "{") {
      _(M);
      var X, se = {};
      do
        if (O(M), M.token !== "}") {
          if (M.token === '"' || M.token === "'")
            X = pe(M, M.token);
          else if (M.tokenType === x.SYMBOL || M.tokenType === x.DELIMITER && M.token in E)
            X = M.token, O(M);
          else
            throw Re(M, "Symbol or string expected as object key");
          if (M.token !== ":")
            throw Re(M, "Colon : expected after object key");
          O(M), se[X] = z(M);
        }
      while (M.token === ",");
      if (M.token !== "}")
        throw Re(M, "Comma , or bracket } expected after object value");
      U(M), O(M);
      var Ee = new v(se);
      return Ee = ee(M, Ee), Ee;
    }
    return Oe(M);
  }
  function Oe(M) {
    var X;
    return M.tokenType === x.NUMBER ? (X = M.token, O(M), new u(t(X, n.number))) : Ae(M);
  }
  function Ae(M) {
    var X;
    if (M.token === "(") {
      if (_(M), O(M), X = z(M), M.token !== ")")
        throw Re(M, "Parenthesis ) expected");
      return U(M), O(M), X = new p(X), X = ee(M, X), X;
    }
    return We(M);
  }
  function We(M) {
    throw M.token === "" ? Re(M, "Unexpected end of expression") : Re(M, "Value expected");
  }
  function er(M) {
    return M.index - M.token.length + 1;
  }
  function Re(M, X) {
    var se = er(M), Ee = new SyntaxError(X + " (char " + se + ")");
    return Ee.char = se, Ee;
  }
  function wr(M, X) {
    var se = er(M), Ee = new SyntaxError(X + " (char " + se + ")");
    return Ee.char = se, Ee;
  }
  return e.addConversion({
    from: "string",
    to: "Node",
    convert: h
  }), h;
}), vp = "compile", a3 = ["typed", "parse"], i3 = /* @__PURE__ */ q(vp, a3, (r) => {
  var {
    typed: e,
    parse: t
  } = r;
  return e(vp, {
    string: function(a) {
      return t(a).compile();
    },
    "Array | Matrix": function(a) {
      return je(a, function(i) {
        return t(i).compile();
      });
    }
  });
}), pp = "evaluate", o3 = ["typed", "parse"], s3 = /* @__PURE__ */ q(pp, o3, (r) => {
  var {
    typed: e,
    parse: t
  } = r;
  return e(pp, {
    string: function(a) {
      var i = za();
      return t(a).compile().evaluate(i);
    },
    "string, Map | Object": function(a, i) {
      return t(a).compile().evaluate(i);
    },
    "Array | Matrix": function(a) {
      var i = za();
      return je(a, function(o) {
        return t(o).compile().evaluate(i);
      });
    },
    "Array | Matrix, Map | Object": function(a, i) {
      return je(a, function(o) {
        return t(o).compile().evaluate(i);
      });
    }
  });
}), u3 = "Parser", c3 = ["evaluate"], l3 = /* @__PURE__ */ q(u3, c3, (r) => {
  var {
    evaluate: e
  } = r;
  function t() {
    if (!(this instanceof t))
      throw new SyntaxError("Constructor must be called with the new operator");
    Object.defineProperty(this, "scope", {
      value: za(),
      writable: !1
    });
  }
  return t.prototype.type = "Parser", t.prototype.isParser = !0, t.prototype.evaluate = function(n) {
    return e(n, this.scope);
  }, t.prototype.get = function(n) {
    if (this.scope.has(n))
      return this.scope.get(n);
  }, t.prototype.getAll = function() {
    return Sw(this.scope);
  }, t.prototype.getAllAsMap = function() {
    return this.scope;
  }, t.prototype.set = function(n, a) {
    return this.scope.set(n, a), a;
  }, t.prototype.remove = function(n) {
    this.scope.delete(n);
  }, t.prototype.clear = function() {
    this.scope.clear();
  }, t;
}, {
  isClass: !0
}), dp = "parser", f3 = ["typed", "Parser"], m3 = /* @__PURE__ */ q(dp, f3, (r) => {
  var {
    typed: e,
    Parser: t
  } = r;
  return e(dp, {
    "": function() {
      return new t();
    }
  });
}), hp = "lup", v3 = ["typed", "matrix", "abs", "addScalar", "divideScalar", "multiplyScalar", "subtractScalar", "larger", "equalScalar", "unaryMinus", "DenseMatrix", "SparseMatrix", "Spa"], p3 = /* @__PURE__ */ q(hp, v3, (r) => {
  var {
    typed: e,
    matrix: t,
    abs: n,
    addScalar: a,
    divideScalar: i,
    multiplyScalar: o,
    subtractScalar: f,
    larger: l,
    equalScalar: u,
    unaryMinus: s,
    DenseMatrix: c,
    SparseMatrix: m,
    Spa: v
  } = r;
  return e(hp, {
    DenseMatrix: function(g) {
      return d(g);
    },
    SparseMatrix: function(g) {
      return p(g);
    },
    Array: function(g) {
      var N = t(g), h = d(N);
      return {
        L: h.L.valueOf(),
        U: h.U.valueOf(),
        p: h.p
      };
    }
  });
  function d(b) {
    var g = b._size[0], N = b._size[1], h = Math.min(g, N), w = Ge(b._data), x = [], y = [g, h], E = [], D = [h, N], S, A, C, T = [];
    for (S = 0; S < g; S++)
      T[S] = S;
    for (A = 0; A < N; A++) {
      if (A > 0)
        for (S = 0; S < g; S++) {
          var $ = Math.min(S, A), I = 0;
          for (C = 0; C < $; C++)
            I = a(I, o(w[S][C], w[C][A]));
          w[S][A] = f(w[S][A], I);
        }
      var R = A, B = 0, O = 0;
      for (S = A; S < g; S++) {
        var G = w[S][A], _ = n(G);
        l(_, B) && (R = S, B = _, O = G);
      }
      if (A !== R && (T[A] = [T[R], T[R] = T[A]][0], c._swapRows(A, R, w)), A < g)
        for (S = A + 1; S < g; S++) {
          var U = w[S][A];
          u(U, 0) || (w[S][A] = i(w[S][A], O));
        }
    }
    for (A = 0; A < N; A++)
      for (S = 0; S < g; S++) {
        if (A === 0 && (S < N && (E[S] = []), x[S] = []), S < A) {
          S < N && (E[S][A] = w[S][A]), A < g && (x[S][A] = 0);
          continue;
        }
        if (S === A) {
          S < N && (E[S][A] = w[S][A]), A < g && (x[S][A] = 1);
          continue;
        }
        S < N && (E[S][A] = 0), A < g && (x[S][A] = w[S][A]);
      }
    var K = new c({
      data: x,
      size: y
    }), j = new c({
      data: E,
      size: D
    }), z = [];
    for (S = 0, h = T.length; S < h; S++)
      z[T[S]] = S;
    return {
      L: K,
      U: j,
      p: z,
      toString: function() {
        return "L: " + this.L.toString() + `
U: ` + this.U.toString() + `
P: ` + this.p;
      }
    };
  }
  function p(b) {
    var g = b._size[0], N = b._size[1], h = Math.min(g, N), w = b._values, x = b._index, y = b._ptr, E = [], D = [], S = [], A = [g, h], C = [], T = [], $ = [], I = [h, N], R, B, O, G = [], _ = [];
    for (R = 0; R < g; R++)
      G[R] = R, _[R] = R;
    var U = function(z, Q) {
      var ae = _[z], re = _[Q];
      G[ae] = Q, G[re] = z, _[z] = re, _[Q] = ae;
    }, K = function() {
      var z = new v();
      B < g && (S.push(E.length), E.push(1), D.push(B)), $.push(C.length);
      var Q = y[B], ae = y[B + 1];
      for (O = Q; O < ae; O++)
        R = x[O], z.set(G[R], w[O]);
      B > 0 && z.forEach(0, B - 1, function(le, ie) {
        m._forEachRow(le, E, D, S, function(ye, _e) {
          ye > le && z.accumulate(ye, s(o(_e, ie)));
        });
      });
      var re = B, fe = z.get(B), de = n(fe);
      z.forEach(B + 1, g - 1, function(le, ie) {
        var ye = n(ie);
        l(ye, de) && (re = le, de = ye, fe = ie);
      }), B !== re && (m._swapRows(B, re, A[1], E, D, S), m._swapRows(B, re, I[1], C, T, $), z.swap(B, re), U(B, re)), z.forEach(0, g - 1, function(le, ie) {
        le <= B ? (C.push(ie), T.push(le)) : (ie = i(ie, fe), u(ie, 0) || (E.push(ie), D.push(le)));
      });
    };
    for (B = 0; B < N; B++)
      K();
    return $.push(C.length), S.push(E.length), {
      L: new m({
        values: E,
        index: D,
        ptr: S,
        size: A
      }),
      U: new m({
        values: C,
        index: T,
        ptr: $,
        size: I
      }),
      p: G,
      toString: function() {
        return "L: " + this.L.toString() + `
U: ` + this.U.toString() + `
P: ` + this.p;
      }
    };
  }
}), gp = "qr", d3 = ["typed", "matrix", "zeros", "identity", "isZero", "equal", "sign", "sqrt", "conj", "unaryMinus", "addScalar", "divideScalar", "multiplyScalar", "subtractScalar", "complex"], h3 = /* @__PURE__ */ q(gp, d3, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    identity: a,
    isZero: i,
    equal: o,
    sign: f,
    sqrt: l,
    conj: u,
    unaryMinus: s,
    addScalar: c,
    divideScalar: m,
    multiplyScalar: v,
    subtractScalar: d,
    complex: p
  } = r;
  return Rr(e(gp, {
    DenseMatrix: function(w) {
      return g(w);
    },
    SparseMatrix: function(w) {
      return N();
    },
    Array: function(w) {
      var x = t(w), y = g(x);
      return {
        Q: y.Q.valueOf(),
        R: y.R.valueOf()
      };
    }
  }), {
    _denseQRimpl: b
  });
  function b(h) {
    var w = h._size[0], x = h._size[1], y = a([w], "dense"), E = y._data, D = h.clone(), S = D._data, A, C, T, $ = n([w], "");
    for (T = 0; T < Math.min(x, w); ++T) {
      var I = S[T][T], R = s(o(I, 0) ? 1 : f(I)), B = u(R), O = 0;
      for (A = T; A < w; A++)
        O = c(O, v(S[A][T], u(S[A][T])));
      var G = v(R, l(O));
      if (!i(G)) {
        var _ = d(I, G);
        for ($[T] = 1, A = T + 1; A < w; A++)
          $[A] = m(S[A][T], _);
        var U = s(u(m(_, G))), K = void 0;
        for (C = T; C < x; C++) {
          for (K = 0, A = T; A < w; A++)
            K = c(K, v(u($[A]), S[A][C]));
          for (K = v(K, U), A = T; A < w; A++)
            S[A][C] = v(d(S[A][C], v($[A], K)), B);
        }
        for (A = 0; A < w; A++) {
          for (K = 0, C = T; C < w; C++)
            K = c(K, v(E[A][C], $[C]));
          for (K = v(K, U), C = T; C < w; ++C)
            E[A][C] = m(d(E[A][C], v(K, u($[C]))), B);
        }
      }
    }
    return {
      Q: y,
      R: D,
      toString: function() {
        return "Q: " + this.Q.toString() + `
R: ` + this.R.toString();
      }
    };
  }
  function g(h) {
    var w = b(h), x = w.R._data;
    if (h._data.length > 0)
      for (var y = x[0][0].type === "Complex" ? p(0) : 0, E = 0; E < x.length; ++E)
        for (var D = 0; D < E && D < (x[0] || []).length; ++D)
          x[E][D] = y;
    return w;
  }
  function N(h) {
    throw new Error("qr not implemented for sparse matrices yet");
  }
});
function g3(r, e, t, n) {
  for (var a = r._values, i = r._index, o = r._ptr, f = r._size, l = r._datatype, u = f[0], s = f[1], c = n && r._values ? [] : null, m = [], v = [], d = 0, p = 0; p < s; p++) {
    v[p] = d;
    for (var b = t ? t[p] : p, g = o[b], N = o[b + 1], h = g; h < N; h++) {
      var w = e ? e[i[h]] : i[h];
      m[d] = w, c && (c[d] = a[h]), d++;
    }
  }
  return v[s] = d, r.createSparseMatrix({
    values: c,
    index: m,
    ptr: v,
    size: [u, s],
    datatype: l
  });
}
function sg(r, e, t, n, a, i, o) {
  var f = 0;
  for (t[o] = r; f >= 0; ) {
    var l = t[o + f], u = t[n + l];
    u === -1 ? (f--, i[e++] = l) : (t[n + l] = t[a + u], ++f, t[o + f] = u);
  }
  return e;
}
function y3(r, e) {
  if (!r)
    return null;
  var t = 0, n, a = [], i = [], o = 0, f = e, l = 2 * e;
  for (n = 0; n < e; n++)
    i[o + n] = -1;
  for (n = e - 1; n >= 0; n--)
    r[n] !== -1 && (i[f + n] = i[o + r[n]], i[o + r[n]] = n);
  for (n = 0; n < e; n++)
    r[n] === -1 && (t = sg(n, t, i, o, f, a, l));
  return a;
}
function b3(r, e) {
  if (!r)
    return null;
  var t = r._index, n = r._ptr, a = r._size, i = a[0], o = a[1], f = [], l = [], u = 0, s = o, c, m;
  if (e)
    for (c = 0; c < i; c++)
      l[s + c] = -1;
  for (var v = 0; v < o; v++) {
    f[v] = -1, l[u + v] = -1;
    for (var d = n[v], p = n[v + 1], b = d; b < p; b++) {
      var g = t[b];
      for (c = e ? l[s + g] : g; c !== -1 && c < v; c = m)
        m = l[u + c], l[u + c] = v, m === -1 && (f[c] = v);
      e && (l[s + g] = v);
    }
  }
  return f;
}
function x3(r, e, t) {
  for (var n = r._values, a = r._index, i = r._ptr, o = r._size, f = o[1], l = 0, u = 0; u < f; u++) {
    var s = i[u];
    for (i[u] = l; s < i[u + 1]; s++)
      e(a[s], u, n ? n[s] : 1, t) && (a[l] = a[s], n && (n[l] = n[s]), l++);
  }
  return i[f] = l, a.splice(l, a.length - l), n && n.splice(l, n.length - l), l;
}
function wn(r) {
  return -r - 2;
}
var w3 = "csAmd", N3 = ["add", "multiply", "transpose"], A3 = /* @__PURE__ */ q(w3, N3, (r) => {
  var {
    add: e,
    multiply: t,
    transpose: n
  } = r;
  return function(s, c) {
    if (!c || s <= 0 || s > 3)
      return null;
    var m = c._size, v = m[0], d = m[1], p = 0, b = Math.max(16, 10 * Math.sqrt(d));
    b = Math.min(d - 2, b);
    var g = a(s, c, v, d, b);
    x3(g, l, null);
    for (var N = g._index, h = g._ptr, w = h[d], x = [], y = [], E = 0, D = d + 1, S = 2 * (d + 1), A = 3 * (d + 1), C = 4 * (d + 1), T = 5 * (d + 1), $ = 6 * (d + 1), I = 7 * (d + 1), R = x, B = i(d, h, y, E, A, R, S, I, D, $, C, T), O = o(d, h, y, T, C, $, b, D, A, R, S), G = 0, _, U, K, j, z, Q, ae, re, fe, de, le, ie, ye, _e, De, Be; O < d; ) {
      for (K = -1; G < d && (K = y[A + G]) === -1; G++)
        ;
      y[S + K] !== -1 && (R[y[S + K]] = -1), y[A + G] = y[S + K];
      var k = y[C + K], Z = y[D + K];
      O += Z;
      var oe = 0;
      y[D + K] = -Z;
      var H = h[K], W = k === 0 ? H : w, te = W;
      for (j = 1; j <= k + 1; j++) {
        for (j > k ? (Q = K, ae = H, re = y[E + K] - k) : (Q = N[H++], ae = h[Q], re = y[E + Q]), z = 1; z <= re; z++)
          _ = N[ae++], !((fe = y[D + _]) <= 0) && (oe += fe, y[D + _] = -fe, N[te++] = _, y[S + _] !== -1 && (R[y[S + _]] = R[_]), R[_] !== -1 ? y[S + R[_]] = y[S + _] : y[A + y[T + _]] = y[S + _]);
        Q !== K && (h[Q] = wn(K), y[$ + Q] = 0);
      }
      for (k !== 0 && (w = te), y[T + K] = oe, h[K] = W, y[E + K] = te - W, y[C + K] = -2, B = f(B, p, y, $, d), de = W; de < te; de++)
        if (_ = N[de], !((le = y[C + _]) <= 0)) {
          fe = -y[D + _];
          var ge = B - fe;
          for (H = h[_], ie = h[_] + le - 1; H <= ie; H++)
            Q = N[H], y[$ + Q] >= B ? y[$ + Q] -= fe : y[$ + Q] !== 0 && (y[$ + Q] = y[T + Q] + ge);
        }
      for (de = W; de < te; de++) {
        for (_ = N[de], ie = h[_], ye = ie + y[C + _] - 1, _e = ie, De = 0, Be = 0, H = ie; H <= ye; H++)
          if (Q = N[H], y[$ + Q] !== 0) {
            var ve = y[$ + Q] - B;
            ve > 0 ? (Be += ve, N[_e++] = Q, De += Q) : (h[Q] = wn(K), y[$ + Q] = 0);
          }
        y[C + _] = _e - ie + 1;
        var P = _e, V = ie + y[E + _];
        for (H = ye + 1; H < V; H++) {
          U = N[H];
          var ee = y[D + U];
          ee <= 0 || (Be += ee, N[_e++] = U, De += U);
        }
        Be === 0 ? (h[_] = wn(K), fe = -y[D + _], oe -= fe, Z += fe, O += fe, y[D + _] = 0, y[C + _] = -1) : (y[T + _] = Math.min(y[T + _], Be), N[_e] = N[P], N[P] = N[ie], N[ie] = K, y[E + _] = _e - ie + 1, De = (De < 0 ? -De : De) % d, y[S + _] = y[I + De], y[I + De] = _, R[_] = De);
      }
      for (y[T + K] = oe, p = Math.max(p, oe), B = f(B + p, p, y, $, d), de = W; de < te; de++)
        if (_ = N[de], !(y[D + _] >= 0))
          for (De = R[_], _ = y[I + De], y[I + De] = -1; _ !== -1 && y[S + _] !== -1; _ = y[S + _], B++) {
            for (re = y[E + _], le = y[C + _], H = h[_] + 1; H <= h[_] + re - 1; H++)
              y[$ + N[H]] = B;
            var ue = _;
            for (U = y[S + _]; U !== -1; ) {
              var pe = y[E + U] === re && y[C + U] === le;
              for (H = h[U] + 1; pe && H <= h[U] + re - 1; H++)
                y[$ + N[H]] !== B && (pe = 0);
              pe ? (h[U] = wn(_), y[D + _] += y[D + U], y[D + U] = 0, y[C + U] = -1, U = y[S + U], y[S + ue] = U) : (ue = U, U = y[S + U]);
            }
          }
      for (H = W, de = W; de < te; de++)
        _ = N[de], !((fe = -y[D + _]) <= 0) && (y[D + _] = fe, Be = y[T + _] + oe - fe, Be = Math.min(Be, d - O - fe), y[A + Be] !== -1 && (R[y[A + Be]] = _), y[S + _] = y[A + Be], R[_] = -1, y[A + Be] = _, G = Math.min(G, Be), y[T + _] = Be, N[H++] = _);
      y[D + K] = Z, (y[E + K] = H - W) === 0 && (h[K] = -1, y[$ + K] = 0), k !== 0 && (w = H);
    }
    for (_ = 0; _ < d; _++)
      h[_] = wn(h[_]);
    for (U = 0; U <= d; U++)
      y[A + U] = -1;
    for (U = d; U >= 0; U--)
      y[D + U] > 0 || (y[S + U] = y[A + h[U]], y[A + h[U]] = U);
    for (Q = d; Q >= 0; Q--)
      y[D + Q] <= 0 || h[Q] !== -1 && (y[S + Q] = y[A + h[Q]], y[A + h[Q]] = Q);
    for (K = 0, _ = 0; _ <= d; _++)
      h[_] === -1 && (K = sg(_, K, y, A, S, x, $));
    return x.splice(x.length - 1, 1), x;
  };
  function a(u, s, c, m, v) {
    var d = n(s);
    if (u === 1 && m === c)
      return e(s, d);
    if (u === 2) {
      for (var p = d._index, b = d._ptr, g = 0, N = 0; N < c; N++) {
        var h = b[N];
        if (b[N] = g, !(b[N + 1] - h > v))
          for (var w = b[N + 1]; h < w; h++)
            p[g++] = p[h];
      }
      return b[c] = g, s = n(d), t(d, s);
    }
    return t(d, s);
  }
  function i(u, s, c, m, v, d, p, b, g, N, h, w) {
    for (var x = 0; x < u; x++)
      c[m + x] = s[x + 1] - s[x];
    c[m + u] = 0;
    for (var y = 0; y <= u; y++)
      c[v + y] = -1, d[y] = -1, c[p + y] = -1, c[b + y] = -1, c[g + y] = 1, c[N + y] = 1, c[h + y] = 0, c[w + y] = c[m + y];
    var E = f(0, 0, c, N, u);
    return c[h + u] = -2, s[u] = -1, c[N + u] = 0, E;
  }
  function o(u, s, c, m, v, d, p, b, g, N, h) {
    for (var w = 0, x = 0; x < u; x++) {
      var y = c[m + x];
      if (y === 0)
        c[v + x] = -2, w++, s[x] = -1, c[d + x] = 0;
      else if (y > p)
        c[b + x] = 0, c[v + x] = -1, w++, s[x] = wn(u), c[b + u]++;
      else {
        var E = c[g + y];
        E !== -1 && (N[E] = x), c[h + x] = c[g + y], c[g + y] = x;
      }
    }
    return w;
  }
  function f(u, s, c, m, v) {
    if (u < 2 || u + s < 0) {
      for (var d = 0; d < v; d++)
        c[m + d] !== 0 && (c[m + d] = 1);
      u = 2;
    }
    return u;
  }
  function l(u, s) {
    return u !== s;
  }
});
function E3(r, e, t, n, a, i, o) {
  var f, l, u = 0, s;
  if (r <= e || t[n + e] <= t[a + r])
    return -1;
  t[a + r] = t[n + e];
  var c = t[i + r];
  if (t[i + r] = e, c === -1)
    u = 1, s = r;
  else {
    for (u = 2, s = c; s !== t[o + s]; s = t[o + s])
      ;
    for (f = c; f !== s; f = l)
      l = t[o + f], t[o + f] = s;
  }
  return {
    jleaf: u,
    q: s
  };
}
var D3 = "csCounts", S3 = ["transpose"], C3 = /* @__PURE__ */ q(D3, S3, (r) => {
  var {
    transpose: e
  } = r;
  return function(t, n, a, i) {
    if (!t || !n || !a)
      return null;
    var o = t._size, f = o[0], l = o[1], u, s, c, m, v, d, p, b = 4 * l + (i ? l + f + 1 : 0), g = [], N = 0, h = l, w = 2 * l, x = 3 * l, y = 4 * l, E = 5 * l + 1;
    for (c = 0; c < b; c++)
      g[c] = -1;
    var D = [], S = e(t), A = S._index, C = S._ptr;
    for (c = 0; c < l; c++)
      for (s = a[c], D[s] = g[x + s] === -1 ? 1 : 0; s !== -1 && g[x + s] === -1; s = n[s])
        g[x + s] = c;
    if (i) {
      for (c = 0; c < l; c++)
        g[a[c]] = c;
      for (u = 0; u < f; u++) {
        for (c = l, d = C[u], p = C[u + 1], v = d; v < p; v++)
          c = Math.min(c, g[A[v]]);
        g[E + u] = g[y + c], g[y + c] = u;
      }
    }
    for (u = 0; u < l; u++)
      g[N + u] = u;
    for (c = 0; c < l; c++) {
      for (s = a[c], n[s] !== -1 && D[n[s]]--, m = i ? g[y + c] : s; m !== -1; m = i ? g[E + m] : -1)
        for (v = C[m]; v < C[m + 1]; v++) {
          u = A[v];
          var T = E3(u, s, g, x, h, w, N);
          T.jleaf >= 1 && D[s]++, T.jleaf === 2 && D[T.q]--;
        }
      n[s] !== -1 && (g[N + s] = n[s]);
    }
    for (s = 0; s < l; s++)
      n[s] !== -1 && (D[n[s]] += D[s]);
    return D;
  };
}), M3 = "csSqr", O3 = ["add", "multiply", "transpose"], T3 = /* @__PURE__ */ q(M3, O3, (r) => {
  var {
    add: e,
    multiply: t,
    transpose: n
  } = r, a = A3({
    add: e,
    multiply: t,
    transpose: n
  }), i = C3({
    transpose: n
  });
  return function(l, u, s) {
    var c = u._ptr, m = u._size, v = m[1], d, p = {};
    if (p.q = a(l, u), l && !p.q)
      return null;
    if (s) {
      var b = l ? g3(u, null, p.q, 0) : u;
      p.parent = b3(b, 1);
      var g = y3(p.parent, v);
      if (p.cp = i(b, p.parent, g, 1), b && p.parent && p.cp && o(b, p))
        for (p.unz = 0, d = 0; d < v; d++)
          p.unz += p.cp[d];
    } else
      p.unz = 4 * c[v] + v, p.lnz = p.unz;
    return p;
  };
  function o(f, l) {
    var u = f._ptr, s = f._index, c = f._size, m = c[0], v = c[1];
    l.pinv = [], l.leftmost = [];
    var d = l.parent, p = l.pinv, b = l.leftmost, g = [], N = 0, h = m, w = m + v, x = m + 2 * v, y, E, D, S, A;
    for (E = 0; E < v; E++)
      g[h + E] = -1, g[w + E] = -1, g[x + E] = 0;
    for (y = 0; y < m; y++)
      b[y] = -1;
    for (E = v - 1; E >= 0; E--)
      for (S = u[E], A = u[E + 1], D = S; D < A; D++)
        b[s[D]] = E;
    for (y = m - 1; y >= 0; y--)
      p[y] = -1, E = b[y], E !== -1 && (g[x + E]++ === 0 && (g[w + E] = y), g[N + y] = g[h + E], g[h + E] = y);
    for (l.lnz = 0, l.m2 = m, E = 0; E < v; E++)
      if (y = g[h + E], l.lnz++, y < 0 && (y = l.m2++), p[y] = E, !(--x[E] <= 0)) {
        l.lnz += g[x + E];
        var C = d[E];
        C !== -1 && (g[x + C] === 0 && (g[w + C] = g[w + E]), g[N + g[w + E]] = g[h + C], g[h + C] = g[N + y], g[x + C] += g[x + E]);
      }
    for (y = 0; y < m; y++)
      p[y] < 0 && (p[y] = E++);
    return !0;
  }
});
function cc(r, e) {
  return r[e] < 0;
}
function ug(r, e) {
  r[e] = wn(r[e]);
}
function yp(r) {
  return r < 0 ? wn(r) : r;
}
function B3(r, e, t, n, a) {
  var i = e._index, o = e._ptr, f = e._size, l = f[1], u, s, c, m = 0;
  for (n[0] = r; m >= 0; ) {
    r = n[m];
    var v = a ? a[r] : r;
    cc(o, r) || (ug(o, r), n[l + m] = v < 0 ? 0 : yp(o[v]));
    var d = 1;
    for (s = n[l + m], c = v < 0 ? 0 : yp(o[v + 1]); s < c; s++)
      if (u = i[s], !cc(o, u)) {
        n[l + m] = s, n[++m] = u, d = 0;
        break;
      }
    d && (m--, n[--t] = r);
  }
  return t;
}
function _3(r, e, t, n, a) {
  var i = r._ptr, o = r._size, f = e._index, l = e._ptr, u = o[1], s, c, m, v = u;
  for (c = l[t], m = l[t + 1], s = c; s < m; s++) {
    var d = f[s];
    cc(i, d) || (v = B3(d, r, v, n, a));
  }
  for (s = v; s < u; s++)
    ug(i, n[s]);
  return v;
}
var F3 = "csSpsolve", $3 = ["divideScalar", "multiply", "subtract"], R3 = /* @__PURE__ */ q(F3, $3, (r) => {
  var {
    divideScalar: e,
    multiply: t,
    subtract: n
  } = r;
  return function(i, o, f, l, u, s, c) {
    var m = i._values, v = i._index, d = i._ptr, p = i._size, b = p[1], g = o._values, N = o._index, h = o._ptr, w, x, y, E, D = _3(i, o, f, l, s);
    for (w = D; w < b; w++)
      u[l[w]] = 0;
    for (x = h[f], y = h[f + 1], w = x; w < y; w++)
      u[N[w]] = g[w];
    for (var S = D; S < b; S++) {
      var A = l[S], C = s ? s[A] : A;
      if (!(C < 0))
        for (x = d[C], y = d[C + 1], u[A] = e(u[A], m[c ? x : y - 1]), w = c ? x + 1 : x, E = c ? y : y - 1; w < E; w++) {
          var T = v[w];
          u[T] = n(u[T], t(m[w], u[A]));
        }
    }
    return D;
  };
}), I3 = "csLu", P3 = ["abs", "divideScalar", "multiply", "subtract", "larger", "largerEq", "SparseMatrix"], q3 = /* @__PURE__ */ q(I3, P3, (r) => {
  var {
    abs: e,
    divideScalar: t,
    multiply: n,
    subtract: a,
    larger: i,
    largerEq: o,
    SparseMatrix: f
  } = r, l = R3({
    divideScalar: t,
    multiply: n,
    subtract: a
  });
  return function(s, c, m) {
    if (!s)
      return null;
    var v = s._size, d = v[1], p, b = 100, g = 100;
    c && (p = c.q, b = c.lnz || b, g = c.unz || g);
    var N = [], h = [], w = [], x = new f({
      values: N,
      index: h,
      ptr: w,
      size: [d, d]
    }), y = [], E = [], D = [], S = new f({
      values: y,
      index: E,
      ptr: D,
      size: [d, d]
    }), A = [], C, T, $ = [], I = [];
    for (C = 0; C < d; C++)
      $[C] = 0, A[C] = -1, w[C + 1] = 0;
    b = 0, g = 0;
    for (var R = 0; R < d; R++) {
      w[R] = b, D[R] = g;
      var B = p ? p[R] : R, O = l(x, s, B, I, $, A, 1), G = -1, _ = -1;
      for (T = O; T < d; T++)
        if (C = I[T], A[C] < 0) {
          var U = e($[C]);
          i(U, _) && (_ = U, G = C);
        } else
          E[g] = A[C], y[g++] = $[C];
      if (G === -1 || _ <= 0)
        return null;
      A[B] < 0 && o(e($[B]), n(_, m)) && (G = B);
      var K = $[G];
      for (E[g] = R, y[g++] = K, A[G] = R, h[b] = G, N[b++] = 1, T = O; T < d; T++)
        C = I[T], A[C] < 0 && (h[b] = C, N[b++] = t($[C], K)), $[C] = 0;
    }
    for (w[d] = b, D[d] = g, T = 0; T < b; T++)
      h[T] = A[h[T]];
    return N.splice(b, N.length - b), h.splice(b, h.length - b), y.splice(g, y.length - g), E.splice(g, E.length - g), {
      L: x,
      U: S,
      pinv: A
    };
  };
}), bp = "slu", L3 = ["typed", "abs", "add", "multiply", "transpose", "divideScalar", "subtract", "larger", "largerEq", "SparseMatrix"], z3 = /* @__PURE__ */ q(bp, L3, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    multiply: a,
    transpose: i,
    divideScalar: o,
    subtract: f,
    larger: l,
    largerEq: u,
    SparseMatrix: s
  } = r, c = T3({
    add: n,
    multiply: a,
    transpose: i
  }), m = q3({
    abs: t,
    divideScalar: o,
    multiply: a,
    subtract: f,
    larger: l,
    largerEq: u,
    SparseMatrix: s
  });
  return e(bp, {
    "SparseMatrix, number, number": function(d, p, b) {
      if (!Ie(p) || p < 0 || p > 3)
        throw new Error("Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]");
      if (b < 0 || b > 1)
        throw new Error("Partial pivoting threshold must be a number from 0 to 1");
      var g = c(p, d, !1), N = m(d, g, b);
      return {
        L: N.L,
        U: N.U,
        p: N.pinv,
        q: g.q,
        toString: function() {
          return "L: " + this.L.toString() + `
U: ` + this.U.toString() + `
p: ` + this.p.toString() + (this.q ? `
q: ` + this.q.toString() : "") + `
`;
        }
      };
    }
  });
});
function xp(r, e) {
  var t, n = e.length, a = [];
  if (r)
    for (t = 0; t < n; t++)
      a[r[t]] = e[t];
  else
    for (t = 0; t < n; t++)
      a[t] = e[t];
  return a;
}
var wp = "lusolve", U3 = ["typed", "matrix", "lup", "slu", "usolve", "lsolve", "DenseMatrix"], k3 = /* @__PURE__ */ q(wp, U3, (r) => {
  var {
    typed: e,
    matrix: t,
    lup: n,
    slu: a,
    usolve: i,
    lsolve: o,
    DenseMatrix: f
  } = r, l = Oi({
    DenseMatrix: f
  });
  return e(wp, {
    "Array, Array | Matrix": function(m, v) {
      m = t(m);
      var d = n(m), p = s(d.L, d.U, d.p, null, v);
      return p.valueOf();
    },
    "DenseMatrix, Array | Matrix": function(m, v) {
      var d = n(m);
      return s(d.L, d.U, d.p, null, v);
    },
    "SparseMatrix, Array | Matrix": function(m, v) {
      var d = n(m);
      return s(d.L, d.U, d.p, null, v);
    },
    "SparseMatrix, Array | Matrix, number, number": function(m, v, d, p) {
      var b = a(m, d, p);
      return s(b.L, b.U, b.p, b.q, v);
    },
    "Object, Array | Matrix": function(m, v) {
      return s(m.L, m.U, m.p, m.q, v);
    }
  });
  function u(c) {
    if (Le(c))
      return c;
    if (sr(c))
      return t(c);
    throw new TypeError("Invalid Matrix LU decomposition");
  }
  function s(c, m, v, d, p) {
    c = u(c), m = u(m), v && (p = l(c, p, !0), p._data = xp(v, p._data));
    var b = o(c, p), g = i(m, b);
    return d && (g._data = xp(d, g._data)), g;
  }
}), Np = "polynomialRoot", G3 = ["typed", "isZero", "equalScalar", "add", "subtract", "multiply", "divide", "sqrt", "unaryMinus", "cbrt", "typeOf", "im", "re"], V3 = /* @__PURE__ */ q(Np, G3, (r) => {
  var {
    typed: e,
    isZero: t,
    equalScalar: n,
    add: a,
    subtract: i,
    multiply: o,
    divide: f,
    sqrt: l,
    unaryMinus: u,
    cbrt: s,
    typeOf: c,
    im: m,
    re: v
  } = r;
  return e(Np, {
    "number|Complex, ...number|Complex": (d, p) => {
      for (var b = [d, ...p]; b.length > 0 && t(b[b.length - 1]); )
        b.pop();
      if (b.length < 2)
        throw new RangeError("Polynomial [".concat(d, ", ").concat(p, "] must have a non-zero non-constant coefficient"));
      switch (b.length) {
        case 2:
          return [u(f(b[0], b[1]))];
        case 3: {
          var [g, N, h] = b, w = o(2, h), x = o(N, N), y = o(4, h, g);
          if (n(x, y))
            return [f(u(N), w)];
          var E = l(i(x, y));
          return [f(i(E, N), w), f(i(u(E), N), w)];
        }
        case 4: {
          var [D, S, A, C] = b, T = u(o(3, C)), $ = o(A, A), I = o(3, C, S), R = a(o(2, A, A, A), o(27, C, C, D)), B = o(9, C, A, S);
          if (n($, I) && n(R, B))
            return [f(A, T)];
          var O = i($, I), G = i(R, B), _ = a(o(18, C, A, S, D), o(A, A, S, S)), U = a(o(4, A, A, A, D), o(4, C, S, S, S), o(27, C, C, D, D));
          if (n(_, U))
            return [
              f(i(o(4, C, A, S), a(o(9, C, C, D), o(A, A, A))), o(C, O)),
              // simple root
              f(i(o(9, C, D), o(A, S)), o(2, O))
              // double root
            ];
          var K;
          n($, I) ? K = G : K = f(a(G, l(i(o(G, G), o(4, O, O, O)))), 2);
          var j = !0, z = s(K, j).toArray().map((Q) => f(a(A, Q, f(O, Q)), T));
          return z.map((Q) => c(Q) === "Complex" && n(v(Q), v(Q) + m(Q)) ? v(Q) : Q);
        }
        default:
          throw new RangeError("only implemented for cubic or lower-order polynomials, not ".concat(b));
      }
    }
  });
}), H3 = "Help", Z3 = ["parse"], Y3 = /* @__PURE__ */ q(H3, Z3, (r) => {
  var {
    parse: e
  } = r;
  function t(n) {
    if (!(this instanceof t))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!n)
      throw new Error('Argument "doc" missing');
    this.doc = n;
  }
  return t.prototype.type = "Help", t.prototype.isHelp = !0, t.prototype.toString = function() {
    var n = this.doc || {}, a = `
`;
    if (n.name && (a += "Name: " + n.name + `

`), n.category && (a += "Category: " + n.category + `

`), n.description && (a += `Description:
    ` + n.description + `

`), n.syntax && (a += `Syntax:
    ` + n.syntax.join(`
    `) + `

`), n.examples) {
      a += `Examples:
`;
      for (var i = {}, o = 0; o < n.examples.length; o++) {
        var f = n.examples[o];
        a += "    " + f + `
`;
        var l = void 0;
        try {
          l = e(f).compile().evaluate(i);
        } catch (u) {
          l = u;
        }
        l !== void 0 && !dh(l) && (a += "        " + Je(l, {
          precision: 14
        }) + `
`);
      }
      a += `
`;
    }
    return n.mayThrow && n.mayThrow.length && (a += "Throws: " + n.mayThrow.join(", ") + `

`), n.seealso && n.seealso.length && (a += "See also: " + n.seealso.join(", ") + `
`), a;
  }, t.prototype.toJSON = function() {
    var n = Ge(this.doc);
    return n.mathjs = "Help", n;
  }, t.fromJSON = function(n) {
    var a = {};
    return Object.keys(n).filter((i) => i !== "mathjs").forEach((i) => {
      a[i] = n[i];
    }), new t(a);
  }, t.prototype.valueOf = t.prototype.toString, t;
}, {
  isClass: !0
}), W3 = "Chain", J3 = ["?on", "math", "typed"], X3 = /* @__PURE__ */ q(W3, J3, (r) => {
  var {
    on: e,
    math: t,
    typed: n
  } = r;
  function a(u) {
    if (!(this instanceof a))
      throw new SyntaxError("Constructor must be called with the new operator");
    hh(u) ? this.value = u.value : this.value = u;
  }
  a.prototype.type = "Chain", a.prototype.isChain = !0, a.prototype.done = function() {
    return this.value;
  }, a.prototype.valueOf = function() {
    return this.value;
  }, a.prototype.toString = function() {
    return Je(this.value);
  }, a.prototype.toJSON = function() {
    return {
      mathjs: "Chain",
      value: this.value
    };
  }, a.fromJSON = function(u) {
    return new a(u.value);
  };
  function i(u, s) {
    typeof s == "function" && (a.prototype[u] = f(s));
  }
  function o(u, s) {
    Gx(a.prototype, u, function() {
      var m = s();
      if (typeof m == "function")
        return f(m);
    });
  }
  function f(u) {
    return function() {
      if (arguments.length === 0)
        return new a(u(this.value));
      for (var s = [this.value], c = 0; c < arguments.length; c++)
        s[c + 1] = arguments[c];
      if (n.isTypedFunction(u)) {
        var m = n.resolve(u, s);
        if (m.params.length === 1)
          throw new Error("chain function " + u.name + " cannot match rest parameter between chain value and additional arguments.");
        return new a(m.implementation.apply(u, s));
      }
      return new a(u.apply(u, s));
    };
  }
  a.createProxy = function(u, s) {
    if (typeof u == "string")
      i(u, s);
    else {
      var c = function(d) {
        $e(u, d) && l[d] === void 0 && o(d, () => u[d]);
      };
      for (var m in u)
        c(m);
    }
  };
  var l = {
    expression: !0,
    docs: !0,
    type: !0,
    classes: !0,
    json: !0,
    error: !0,
    isChain: !0
    // conflicts with the property isChain of a Chain instance
  };
  return a.createProxy(t), e && e("import", function(u, s, c) {
    c || o(u, s);
  }), a;
}, {
  isClass: !0
}), Ap = {
  name: "e",
  category: "Constants",
  syntax: ["e"],
  description: "Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",
  examples: ["e", "e ^ 2", "exp(2)", "log(e)"],
  seealso: ["exp"]
}, K3 = {
  name: "false",
  category: "Constants",
  syntax: ["false"],
  description: "Boolean value false",
  examples: ["false"],
  seealso: ["true"]
}, Q3 = {
  name: "i",
  category: "Constants",
  syntax: ["i"],
  description: "Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",
  examples: ["i", "i * i", "sqrt(-1)"],
  seealso: []
}, j3 = {
  name: "Infinity",
  category: "Constants",
  syntax: ["Infinity"],
  description: "Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",
  examples: ["Infinity", "1 / 0"],
  seealso: []
}, eB = {
  name: "LN10",
  category: "Constants",
  syntax: ["LN10"],
  description: "Returns the natural logarithm of 10, approximately equal to 2.302",
  examples: ["LN10", "log(10)"],
  seealso: []
}, rB = {
  name: "LN2",
  category: "Constants",
  syntax: ["LN2"],
  description: "Returns the natural logarithm of 2, approximately equal to 0.693",
  examples: ["LN2", "log(2)"],
  seealso: []
}, tB = {
  name: "LOG10E",
  category: "Constants",
  syntax: ["LOG10E"],
  description: "Returns the base-10 logarithm of E, approximately equal to 0.434",
  examples: ["LOG10E", "log(e, 10)"],
  seealso: []
}, nB = {
  name: "LOG2E",
  category: "Constants",
  syntax: ["LOG2E"],
  description: "Returns the base-2 logarithm of E, approximately equal to 1.442",
  examples: ["LOG2E", "log(e, 2)"],
  seealso: []
}, aB = {
  name: "NaN",
  category: "Constants",
  syntax: ["NaN"],
  description: "Not a number",
  examples: ["NaN", "0 / 0"],
  seealso: []
}, iB = {
  name: "null",
  category: "Constants",
  syntax: ["null"],
  description: "Value null",
  examples: ["null"],
  seealso: ["true", "false"]
}, oB = {
  name: "phi",
  category: "Constants",
  syntax: ["phi"],
  description: "Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",
  examples: ["phi"],
  seealso: []
}, Ep = {
  name: "pi",
  category: "Constants",
  syntax: ["pi"],
  description: "The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",
  examples: ["pi", "sin(pi/2)"],
  seealso: ["tau"]
}, sB = {
  name: "SQRT1_2",
  category: "Constants",
  syntax: ["SQRT1_2"],
  description: "Returns the square root of 1/2, approximately equal to 0.707",
  examples: ["SQRT1_2", "sqrt(1/2)"],
  seealso: []
}, uB = {
  name: "SQRT2",
  category: "Constants",
  syntax: ["SQRT2"],
  description: "Returns the square root of 2, approximately equal to 1.414",
  examples: ["SQRT2", "sqrt(2)"],
  seealso: []
}, cB = {
  name: "tau",
  category: "Constants",
  syntax: ["tau"],
  description: "Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",
  examples: ["tau", "2 * pi"],
  seealso: ["pi"]
}, lB = {
  name: "true",
  category: "Constants",
  syntax: ["true"],
  description: "Boolean value true",
  examples: ["true"],
  seealso: ["false"]
}, fB = {
  name: "version",
  category: "Constants",
  syntax: ["version"],
  description: "A string with the version number of math.js",
  examples: ["version"],
  seealso: []
}, mB = {
  name: "bignumber",
  category: "Construction",
  syntax: ["bignumber(x)"],
  description: "Create a big number from a number or string.",
  examples: ["0.1 + 0.2", "bignumber(0.1) + bignumber(0.2)", 'bignumber("7.2")', 'bignumber("7.2e500")', "bignumber([0.1, 0.2, 0.3])"],
  seealso: ["boolean", "complex", "fraction", "index", "matrix", "string", "unit"]
}, vB = {
  name: "boolean",
  category: "Construction",
  syntax: ["x", "boolean(x)"],
  description: "Convert a string or number into a boolean.",
  examples: ["boolean(0)", "boolean(1)", "boolean(3)", 'boolean("true")', 'boolean("false")', "boolean([1, 0, 1, 1])"],
  seealso: ["bignumber", "complex", "index", "matrix", "number", "string", "unit"]
}, pB = {
  name: "complex",
  category: "Construction",
  syntax: ["complex()", "complex(re, im)", "complex(string)"],
  description: "Create a complex number.",
  examples: ["complex()", "complex(2, 3)", 'complex("7 - 2i")'],
  seealso: ["bignumber", "boolean", "index", "matrix", "number", "string", "unit"]
}, dB = {
  name: "createUnit",
  category: "Construction",
  syntax: ["createUnit(definitions)", "createUnit(name, definition)"],
  description: "Create a user-defined unit and register it with the Unit type.",
  examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  seealso: ["unit", "splitUnit"]
}, hB = {
  name: "fraction",
  category: "Construction",
  syntax: ["fraction(num)", "fraction(matrix)", "fraction(num,den)", "fraction({n: num, d: den})"],
  description: "Create a fraction from a number or from integer numerator and denominator.",
  examples: ["fraction(0.125)", "fraction(1, 3) + fraction(2, 5)", "fraction({n: 333, d: 53})", "fraction([sqrt(9), sqrt(10), sqrt(11)])"],
  seealso: ["bignumber", "boolean", "complex", "index", "matrix", "string", "unit"]
}, gB = {
  name: "index",
  category: "Construction",
  syntax: ["[start]", "[start:end]", "[start:step:end]", "[start1, start 2, ...]", "[start1:end1, start2:end2, ...]", "[start1:step1:end1, start2:step2:end2, ...]"],
  description: "Create an index to get or replace a subset of a matrix",
  examples: ["A = [1, 2, 3; 4, 5, 6]", "A[1, :]", "A[1, 2] = 50", "A[1:2, 1:2] = 1", "B = [1, 2, 3]", "B[B>1 and B<3]"],
  seealso: ["bignumber", "boolean", "complex", "matrix,", "number", "range", "string", "unit"]
}, yB = {
  name: "matrix",
  category: "Construction",
  syntax: ["[]", "[a1, b1, ...; a2, b2, ...]", "matrix()", 'matrix("dense")', "matrix([...])"],
  description: "Create a matrix.",
  examples: ["[]", "[1, 2, 3]", "[1, 2, 3; 4, 5, 6]", "matrix()", "matrix([3, 4])", 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  seealso: ["bignumber", "boolean", "complex", "index", "number", "string", "unit", "sparse"]
}, bB = {
  name: "number",
  category: "Construction",
  syntax: ["x", "number(x)", "number(unit, valuelessUnit)"],
  description: "Create a number or convert a string or boolean into a number.",
  examples: ["2", "2e3", "4.05", "number(2)", 'number("7.2")', "number(true)", "number([true, false, true, true])", 'number(unit("52cm"), "m")'],
  seealso: ["bignumber", "boolean", "complex", "fraction", "index", "matrix", "string", "unit"]
}, xB = {
  name: "sparse",
  category: "Construction",
  syntax: ["sparse()", "sparse([a1, b1, ...; a1, b2, ...])", 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  description: "Create a sparse matrix.",
  examples: ["sparse()", "sparse([3, 4; 5, 6])", 'sparse([3, 0; 5, 0], "number")'],
  seealso: ["bignumber", "boolean", "complex", "index", "number", "string", "unit", "matrix"]
}, wB = {
  name: "splitUnit",
  category: "Construction",
  syntax: ["splitUnit(unit: Unit, parts: Unit[])"],
  description: "Split a unit in an array of units whose sum is equal to the original unit.",
  examples: ['splitUnit(1 m, ["feet", "inch"])'],
  seealso: ["unit", "createUnit"]
}, NB = {
  name: "string",
  category: "Construction",
  syntax: ['"text"', "string(x)"],
  description: "Create a string or convert a value to a string",
  examples: ['"Hello World!"', "string(4.2)", "string(3 + 2i)"],
  seealso: ["bignumber", "boolean", "complex", "index", "matrix", "number", "unit"]
}, AB = {
  name: "unit",
  category: "Construction",
  syntax: ["value unit", "unit(value, unit)", "unit(string)"],
  description: "Create a unit.",
  examples: ["5.5 mm", "3 inch", 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  seealso: ["bignumber", "boolean", "complex", "index", "matrix", "number", "string"]
}, EB = {
  name: "config",
  category: "Core",
  syntax: ["config()", "config(options)"],
  description: "Get configuration or change configuration.",
  examples: ["config()", "1/3 + 1/4", 'config({number: "Fraction"})', "1/3 + 1/4"],
  seealso: []
}, DB = {
  name: "import",
  category: "Core",
  syntax: ["import(functions)", "import(functions, options)"],
  description: "Import functions or constants from an object.",
  examples: ["import({myFn: f(x)=x^2, myConstant: 32 })", "myFn(2)", "myConstant"],
  seealso: []
}, SB = {
  name: "typed",
  category: "Core",
  syntax: ["typed(signatures)", "typed(name, signatures)"],
  description: "Create a typed function.",
  examples: ['double = typed({ "number": f(x)=x+x, "string": f(x)=concat(x,x) })', "double(2)", 'double("hello")'],
  seealso: []
}, CB = {
  name: "derivative",
  category: "Algebra",
  syntax: ["derivative(expr, variable)", "derivative(expr, variable, {simplify: boolean})"],
  description: "Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",
  examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', "df = derivative(f, x)", "df.evaluate({x: 3})"],
  seealso: ["simplify", "parse", "evaluate"]
}, MB = {
  name: "leafCount",
  category: "Algebra",
  syntax: ["leafCount(expr)"],
  description: "Computes the number of leaves in the parse tree of the given expression",
  examples: ['leafCount("e^(i*pi)-1")', 'leafCount(parse("{a: 22/7, b: 10^(1/2)}"))'],
  seealso: ["simplify"]
}, OB = {
  name: "lsolve",
  category: "Algebra",
  syntax: ["x=lsolve(L, b)"],
  description: "Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
  examples: ["a = [-2, 3; 2, 1]", "b = [11, 9]", "x = lsolve(a, b)"],
  seealso: ["lsolveAll", "lup", "lusolve", "usolve", "matrix", "sparse"]
}, TB = {
  name: "lsolveAll",
  category: "Algebra",
  syntax: ["x=lsolveAll(L, b)"],
  description: "Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
  examples: ["a = [-2, 3; 2, 1]", "b = [11, 9]", "x = lsolve(a, b)"],
  seealso: ["lsolve", "lup", "lusolve", "usolve", "matrix", "sparse"]
}, BB = {
  name: "lup",
  category: "Algebra",
  syntax: ["lup(m)"],
  description: "Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",
  examples: ["lup([[2, 1], [1, 4]])", "lup(matrix([[2, 1], [1, 4]]))", "lup(sparse([[2, 1], [1, 4]]))"],
  seealso: ["lusolve", "lsolve", "usolve", "matrix", "sparse", "slu", "qr"]
}, _B = {
  name: "lusolve",
  category: "Algebra",
  syntax: ["x=lusolve(A, b)", "x=lusolve(lu, b)"],
  description: "Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",
  examples: ["a = [-2, 3; 2, 1]", "b = [11, 9]", "x = lusolve(a, b)"],
  seealso: ["lup", "slu", "lsolve", "usolve", "matrix", "sparse"]
}, FB = {
  name: "polynomialRoot",
  category: "Algebra",
  syntax: ["x=polynomialRoot(-6, 3)", "x=polynomialRoot(4, -4, 1)", "x=polynomialRoot(-8, 12, -6, 1)"],
  description: "Finds the roots of a univariate polynomial given by its coefficients starting from constant, linear, and so on, increasing in degree.",
  examples: ["a = polynomialRoot(-6, 11, -6, 1)"],
  seealso: ["cbrt", "sqrt"]
}, $B = {
  name: "qr",
  category: "Algebra",
  syntax: ["qr(A)"],
  description: "Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",
  examples: ["qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"],
  seealso: ["lup", "slu", "matrix"]
}, RB = {
  name: "rationalize",
  category: "Algebra",
  syntax: ["rationalize(expr)", "rationalize(expr, scope)", "rationalize(expr, scope, detailed)"],
  description: "Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.",
  examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  seealso: ["simplify"]
}, IB = {
  name: "resolve",
  category: "Algebra",
  syntax: ["resolve(node, scope)"],
  description: "Recursively substitute variables in an expression tree.",
  examples: ['resolve(parse("1 + x"), { x: 7 })', 'resolve(parse("size(text)"), { text: "Hello World" })', 'resolve(parse("x + y"), { x: parse("3z") })', 'resolve(parse("3x"), { x: parse("y+z"), z: parse("w^y") })'],
  seealso: ["simplify", "evaluate"],
  mayThrow: ["ReferenceError"]
}, PB = {
  name: "simplify",
  category: "Algebra",
  syntax: ["simplify(expr)", "simplify(expr, rules)"],
  description: "Simplify an expression tree.",
  examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', "simplified = simplify(f)", "simplified.evaluate({x: 2})"],
  seealso: ["simplifyCore", "derivative", "evaluate", "parse", "rationalize", "resolve"]
}, qB = {
  name: "simplifyConstant",
  category: "Algebra",
  syntax: ["simplifyConstant(expr)", "simplifyConstant(expr, options)"],
  description: "Replace constant subexpressions of node with their values.",
  examples: ['simplifyConstant("(3-3)*x")', 'simplifyConstant(parse("z-cos(tau/8)"))'],
  seealso: ["simplify", "simplifyCore", "evaluate"]
}, LB = {
  name: "simplifyCore",
  category: "Algebra",
  syntax: ["simplifyCore(node)"],
  description: "Perform simple one-pass simplifications on an expression tree.",
  examples: ['simplifyCore(parse("0*x"))', 'simplifyCore(parse("(x+0)*2"))'],
  seealso: ["simplify", "simplifyConstant", "evaluate"]
}, zB = {
  name: "slu",
  category: "Algebra",
  syntax: ["slu(A, order, threshold)"],
  description: "Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",
  examples: ["slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"],
  seealso: ["lusolve", "lsolve", "usolve", "matrix", "sparse", "lup", "qr"]
}, UB = {
  name: "symbolicEqual",
  category: "Algebra",
  syntax: ["symbolicEqual(expr1, expr2)", "symbolicEqual(expr1, expr2, options)"],
  description: "Returns true if the difference of the expressions simplifies to 0",
  examples: ['symbolicEqual("x*y","y*x")', 'symbolicEqual("abs(x^2)", "x^2")', 'symbolicEqual("abs(x)", "x", {context: {abs: {trivial: true}}})'],
  seealso: ["simplify", "evaluate"]
}, kB = {
  name: "usolve",
  category: "Algebra",
  syntax: ["x=usolve(U, b)"],
  description: "Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
  examples: ["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],
  seealso: ["usolveAll", "lup", "lusolve", "lsolve", "matrix", "sparse"]
}, GB = {
  name: "usolveAll",
  category: "Algebra",
  syntax: ["x=usolve(U, b)"],
  description: "Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
  examples: ["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],
  seealso: ["usolve", "lup", "lusolve", "lsolve", "matrix", "sparse"]
}, VB = {
  name: "abs",
  category: "Arithmetic",
  syntax: ["abs(x)"],
  description: "Compute the absolute value.",
  examples: ["abs(3.5)", "abs(-4.2)"],
  seealso: ["sign"]
}, HB = {
  name: "add",
  category: "Operators",
  syntax: ["x + y", "add(x, y)"],
  description: "Add two values.",
  examples: ["a = 2.1 + 3.6", "a - 3.6", "3 + 2i", "3 cm + 2 inch", '"2.3" + "4"'],
  seealso: ["subtract"]
}, ZB = {
  name: "cbrt",
  category: "Arithmetic",
  syntax: ["cbrt(x)", "cbrt(x, allRoots)"],
  description: "Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",
  examples: ["cbrt(64)", "cube(4)", "cbrt(-8)", "cbrt(2 + 3i)", "cbrt(8i)", "cbrt(8i, true)", "cbrt(27 m^3)"],
  seealso: ["square", "sqrt", "cube", "multiply"]
}, YB = {
  name: "ceil",
  category: "Arithmetic",
  syntax: ["ceil(x)"],
  description: "Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",
  examples: ["ceil(3.2)", "ceil(3.8)", "ceil(-4.2)"],
  seealso: ["floor", "fix", "round"]
}, WB = {
  name: "cube",
  category: "Arithmetic",
  syntax: ["cube(x)"],
  description: "Compute the cube of a value. The cube of x is x * x * x.",
  examples: ["cube(2)", "2^3", "2 * 2 * 2"],
  seealso: ["multiply", "square", "pow"]
}, JB = {
  name: "divide",
  category: "Operators",
  syntax: ["x / y", "divide(x, y)"],
  description: "Divide two values.",
  examples: ["a = 2 / 3", "a * 3", "4.5 / 2", "3 + 4 / 2", "(3 + 4) / 2", "18 km / 4.5"],
  seealso: ["multiply"]
}, XB = {
  name: "dotDivide",
  category: "Operators",
  syntax: ["x ./ y", "dotDivide(x, y)"],
  description: "Divide two values element wise.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "b = [2, 1, 1; 3, 2, 5]", "a ./ b"],
  seealso: ["multiply", "dotMultiply", "divide"]
}, KB = {
  name: "dotMultiply",
  category: "Operators",
  syntax: ["x .* y", "dotMultiply(x, y)"],
  description: "Multiply two values element wise.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "b = [2, 1, 1; 3, 2, 5]", "a .* b"],
  seealso: ["multiply", "divide", "dotDivide"]
}, QB = {
  name: "dotPow",
  category: "Operators",
  syntax: ["x .^ y", "dotPow(x, y)"],
  description: "Calculates the power of x to y element wise.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "a .^ 2"],
  seealso: ["pow"]
}, jB = {
  name: "exp",
  category: "Arithmetic",
  syntax: ["exp(x)"],
  description: "Calculate the exponent of a value.",
  examples: ["exp(1.3)", "e ^ 1.3", "log(exp(1.3))", "x = 2.4", "(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],
  seealso: ["expm", "expm1", "pow", "log"]
}, e_ = {
  name: "expm",
  category: "Arithmetic",
  syntax: ["exp(x)"],
  description: "Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.",
  examples: ["expm([[0,2],[0,0]])"],
  seealso: ["exp"]
}, r_ = {
  name: "expm1",
  category: "Arithmetic",
  syntax: ["expm1(x)"],
  description: "Calculate the value of subtracting 1 from the exponential value.",
  examples: ["expm1(2)", "pow(e, 2) - 1", "log(expm1(2) + 1)"],
  seealso: ["exp", "pow", "log"]
}, t_ = {
  name: "fix",
  category: "Arithmetic",
  syntax: ["fix(x)"],
  description: "Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",
  examples: ["fix(3.2)", "fix(3.8)", "fix(-4.2)", "fix(-4.8)"],
  seealso: ["ceil", "floor", "round"]
}, n_ = {
  name: "floor",
  category: "Arithmetic",
  syntax: ["floor(x)"],
  description: "Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",
  examples: ["floor(3.2)", "floor(3.8)", "floor(-4.2)"],
  seealso: ["ceil", "fix", "round"]
}, a_ = {
  name: "gcd",
  category: "Arithmetic",
  syntax: ["gcd(a, b)", "gcd(a, b, c, ...)"],
  description: "Compute the greatest common divisor.",
  examples: ["gcd(8, 12)", "gcd(-4, 6)", "gcd(25, 15, -10)"],
  seealso: ["lcm", "xgcd"]
}, i_ = {
  name: "hypot",
  category: "Arithmetic",
  syntax: ["hypot(a, b, c, ...)", "hypot([a, b, c, ...])"],
  description: "Calculate the hypotenusa of a list with values. ",
  examples: ["hypot(3, 4)", "sqrt(3^2 + 4^2)", "hypot(-2)", "hypot([3, 4, 5])"],
  seealso: ["abs", "norm"]
}, o_ = {
  name: "invmod",
  category: "Arithmetic",
  syntax: ["invmod(a, b)"],
  description: "Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)",
  examples: ["invmod(8, 12)", "invmod(7, 13)", "invmod(15151, 15122)"],
  seealso: ["gcd", "xgcd"]
}, s_ = {
  name: "lcm",
  category: "Arithmetic",
  syntax: ["lcm(x, y)"],
  description: "Compute the least common multiple.",
  examples: ["lcm(4, 6)", "lcm(6, 21)", "lcm(6, 21, 5)"],
  seealso: ["gcd"]
}, u_ = {
  name: "log",
  category: "Arithmetic",
  syntax: ["log(x)", "log(x, base)"],
  description: "Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",
  examples: ["log(3.5)", "a = log(2.4)", "exp(a)", "10 ^ 4", "log(10000, 10)", "log(10000) / log(10)", "b = log(1024, 2)", "2 ^ b"],
  seealso: ["exp", "log1p", "log2", "log10"]
}, c_ = {
  name: "log10",
  category: "Arithmetic",
  syntax: ["log10(x)"],
  description: "Compute the 10-base logarithm of a value.",
  examples: ["log10(0.00001)", "log10(10000)", "10 ^ 4", "log(10000) / log(10)", "log(10000, 10)"],
  seealso: ["exp", "log"]
}, l_ = {
  name: "log1p",
  category: "Arithmetic",
  syntax: ["log1p(x)", "log1p(x, base)"],
  description: "Calculate the logarithm of a `value+1`",
  examples: ["log1p(2.5)", "exp(log1p(1.4))", "pow(10, 4)", "log1p(9999, 10)", "log1p(9999) / log(10)"],
  seealso: ["exp", "log", "log2", "log10"]
}, f_ = {
  name: "log2",
  category: "Arithmetic",
  syntax: ["log2(x)"],
  description: "Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.",
  examples: ["log2(0.03125)", "log2(16)", "log2(16) / log2(2)", "pow(2, 4)"],
  seealso: ["exp", "log1p", "log", "log10"]
}, m_ = {
  name: "mod",
  category: "Operators",
  syntax: ["x % y", "x mod y", "mod(x, y)"],
  description: "Calculates the modulus, the remainder of an integer division.",
  examples: ["7 % 3", "11 % 2", "10 mod 4", "isOdd(x) = x % 2", "isOdd(2)", "isOdd(3)"],
  seealso: ["divide"]
}, v_ = {
  name: "multiply",
  category: "Operators",
  syntax: ["x * y", "multiply(x, y)"],
  description: "multiply two values.",
  examples: ["a = 2.1 * 3.4", "a / 3.4", "2 * 3 + 4", "2 * (3 + 4)", "3 * 2.1 km"],
  seealso: ["divide"]
}, p_ = {
  name: "norm",
  category: "Arithmetic",
  syntax: ["norm(x)", "norm(x, p)"],
  description: "Calculate the norm of a number, vector or matrix.",
  examples: ["abs(-3.5)", "norm(-3.5)", "norm(3 - 4i)", "norm([1, 2, -3], Infinity)", "norm([1, 2, -3], -Infinity)", "norm([3, 4], 2)", "norm([[1, 2], [3, 4]], 1)", 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
}, d_ = {
  name: "nthRoot",
  category: "Arithmetic",
  syntax: ["nthRoot(a)", "nthRoot(a, root)"],
  description: 'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',
  examples: ["4 ^ 3", "nthRoot(64, 3)", "nthRoot(9, 2)", "sqrt(9)"],
  seealso: ["nthRoots", "pow", "sqrt"]
}, h_ = {
  name: "nthRoots",
  category: "Arithmetic",
  syntax: ["nthRoots(A)", "nthRoots(A, root)"],
  description: 'Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation "x^root = A". This function returns an array of complex values.',
  examples: ["nthRoots(1)", "nthRoots(1, 3)"],
  seealso: ["sqrt", "pow", "nthRoot"]
}, g_ = {
  name: "pow",
  category: "Operators",
  syntax: ["x ^ y", "pow(x, y)"],
  description: "Calculates the power of x to y, x^y.",
  examples: ["2^3", "2*2*2", "1 + e ^ (pi * i)", "pow([[1, 2], [4, 3]], 2)", "pow([[1, 2], [4, 3]], -1)"],
  seealso: ["multiply", "nthRoot", "nthRoots", "sqrt"]
}, y_ = {
  name: "round",
  category: "Arithmetic",
  syntax: ["round(x)", "round(x, n)"],
  description: "round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",
  examples: ["round(3.2)", "round(3.8)", "round(-4.2)", "round(-4.8)", "round(pi, 3)", "round(123.45678, 2)"],
  seealso: ["ceil", "floor", "fix"]
}, b_ = {
  name: "sign",
  category: "Arithmetic",
  syntax: ["sign(x)"],
  description: "Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",
  examples: ["sign(3.5)", "sign(-4.2)", "sign(0)"],
  seealso: ["abs"]
}, x_ = {
  name: "sqrt",
  category: "Arithmetic",
  syntax: ["sqrt(x)"],
  description: "Compute the square root value. If x = y * y, then y is the square root of x.",
  examples: ["sqrt(25)", "5 * 5", "sqrt(-1)"],
  seealso: ["square", "sqrtm", "multiply", "nthRoot", "nthRoots", "pow"]
}, w_ = {
  name: "sqrtm",
  category: "Arithmetic",
  syntax: ["sqrtm(x)"],
  description: "Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.",
  examples: ["sqrtm([[33, 24], [48, 57]])"],
  seealso: ["sqrt", "abs", "square", "multiply"]
}, N_ = {
  name: "sylvester",
  category: "Algebra",
  syntax: ["sylvester(A,B,C)"],
  description: "Solves the real-valued Sylvester equation AX+XB=C for X",
  examples: ["sylvester([[-1, -2], [1, 1]], [[-2, 1], [-1, 2]], [[-3, 2], [3, 0]])", "A = [[-1, -2], [1, 1]]; B = [[2, -1], [1, -2]]; C = [[-3, 2], [3, 0]]", "sylvester(A, B, C)"],
  seealso: ["schur", "lyap"]
}, A_ = {
  name: "schur",
  category: "Algebra",
  syntax: ["schur(A)"],
  description: "Performs a real Schur decomposition of the real matrix A = UTU'",
  examples: ["schur([[1, 0], [-4, 3]])", "A = [[1, 0], [-4, 3]]", "schur(A)"],
  seealso: ["lyap", "sylvester"]
}, E_ = {
  name: "lyap",
  category: "Algebra",
  syntax: ["lyap(A,Q)"],
  description: "Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P",
  examples: ["lyap([[-2, 0], [1, -4]], [[3, 1], [1, 3]])", "A = [[-2, 0], [1, -4]]", "Q = [[3, 1], [1, 3]]", "lyap(A,Q)"],
  seealso: ["schur", "sylvester"]
}, D_ = {
  name: "square",
  category: "Arithmetic",
  syntax: ["square(x)"],
  description: "Compute the square of a value. The square of x is x * x.",
  examples: ["square(3)", "sqrt(9)", "3^2", "3 * 3"],
  seealso: ["multiply", "pow", "sqrt", "cube"]
}, S_ = {
  name: "subtract",
  category: "Operators",
  syntax: ["x - y", "subtract(x, y)"],
  description: "subtract two values.",
  examples: ["a = 5.3 - 2", "a + 2", "2/3 - 1/6", "2 * 3 - 3", "2.1 km - 500m"],
  seealso: ["add"]
}, C_ = {
  name: "unaryMinus",
  category: "Operators",
  syntax: ["-x", "unaryMinus(x)"],
  description: "Inverse the sign of a value. Converts booleans and strings to numbers.",
  examples: ["-4.5", "-(-5.6)", '-"22"'],
  seealso: ["add", "subtract", "unaryPlus"]
}, M_ = {
  name: "unaryPlus",
  category: "Operators",
  syntax: ["+x", "unaryPlus(x)"],
  description: "Converts booleans and strings to numbers.",
  examples: ["+true", '+"2"'],
  seealso: ["add", "subtract", "unaryMinus"]
}, O_ = {
  name: "xgcd",
  category: "Arithmetic",
  syntax: ["xgcd(a, b)"],
  description: "Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",
  examples: ["xgcd(8, 12)", "gcd(8, 12)", "xgcd(36163, 21199)"],
  seealso: ["gcd", "lcm"]
}, T_ = {
  name: "bitAnd",
  category: "Bitwise",
  syntax: ["x & y", "bitAnd(x, y)"],
  description: "Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",
  examples: ["5 & 3", "bitAnd(53, 131)", "[1, 12, 31] & 42"],
  seealso: ["bitNot", "bitOr", "bitXor", "leftShift", "rightArithShift", "rightLogShift"]
}, B_ = {
  name: "bitNot",
  category: "Bitwise",
  syntax: ["~x", "bitNot(x)"],
  description: "Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",
  examples: ["~1", "~2", "bitNot([2, -3, 4])"],
  seealso: ["bitAnd", "bitOr", "bitXor", "leftShift", "rightArithShift", "rightLogShift"]
}, __ = {
  name: "bitOr",
  category: "Bitwise",
  syntax: ["x | y", "bitOr(x, y)"],
  description: "Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",
  examples: ["5 | 3", "bitOr([1, 2, 3], 4)"],
  seealso: ["bitAnd", "bitNot", "bitXor", "leftShift", "rightArithShift", "rightLogShift"]
}, F_ = {
  name: "bitXor",
  category: "Bitwise",
  syntax: ["bitXor(x, y)"],
  description: "Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",
  examples: ["bitOr(1, 2)", "bitXor([2, 3, 4], 4)"],
  seealso: ["bitAnd", "bitNot", "bitOr", "leftShift", "rightArithShift", "rightLogShift"]
}, $_ = {
  name: "leftShift",
  category: "Bitwise",
  syntax: ["x << y", "leftShift(x, y)"],
  description: "Bitwise left logical shift of a value x by y number of bits.",
  examples: ["4 << 1", "8 >> 1"],
  seealso: ["bitAnd", "bitNot", "bitOr", "bitXor", "rightArithShift", "rightLogShift"]
}, R_ = {
  name: "rightArithShift",
  category: "Bitwise",
  syntax: ["x >> y", "rightArithShift(x, y)"],
  description: "Bitwise right arithmetic shift of a value x by y number of bits.",
  examples: ["8 >> 1", "4 << 1", "-12 >> 2"],
  seealso: ["bitAnd", "bitNot", "bitOr", "bitXor", "leftShift", "rightLogShift"]
}, I_ = {
  name: "rightLogShift",
  category: "Bitwise",
  syntax: ["x >>> y", "rightLogShift(x, y)"],
  description: "Bitwise right logical shift of a value x by y number of bits.",
  examples: ["8 >>> 1", "4 << 1", "-12 >>> 2"],
  seealso: ["bitAnd", "bitNot", "bitOr", "bitXor", "leftShift", "rightArithShift"]
}, P_ = {
  name: "bellNumbers",
  category: "Combinatorics",
  syntax: ["bellNumbers(n)"],
  description: "The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",
  examples: ["bellNumbers(3)", "bellNumbers(8)"],
  seealso: ["stirlingS2"]
}, q_ = {
  name: "catalan",
  category: "Combinatorics",
  syntax: ["catalan(n)"],
  description: "The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",
  examples: ["catalan(3)", "catalan(8)"],
  seealso: ["bellNumbers"]
}, L_ = {
  name: "composition",
  category: "Combinatorics",
  syntax: ["composition(n, k)"],
  description: "The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",
  examples: ["composition(5, 3)"],
  seealso: ["combinations"]
}, z_ = {
  name: "stirlingS2",
  category: "Combinatorics",
  syntax: ["stirlingS2(n, k)"],
  description: "he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",
  examples: ["stirlingS2(5, 3)"],
  seealso: ["bellNumbers"]
}, U_ = {
  name: "arg",
  category: "Complex",
  syntax: ["arg(x)"],
  description: "Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",
  examples: ["arg(2 + 2i)", "atan2(3, 2)", "arg(2 + 3i)"],
  seealso: ["re", "im", "conj", "abs"]
}, k_ = {
  name: "conj",
  category: "Complex",
  syntax: ["conj(x)"],
  description: "Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",
  examples: ["conj(2 + 3i)", "conj(2 - 3i)", "conj(-5.2i)"],
  seealso: ["re", "im", "abs", "arg"]
}, G_ = {
  name: "im",
  category: "Complex",
  syntax: ["im(x)"],
  description: "Get the imaginary part of a complex number.",
  examples: ["im(2 + 3i)", "re(2 + 3i)", "im(-5.2i)", "im(2.4)"],
  seealso: ["re", "conj", "abs", "arg"]
}, V_ = {
  name: "re",
  category: "Complex",
  syntax: ["re(x)"],
  description: "Get the real part of a complex number.",
  examples: ["re(2 + 3i)", "im(2 + 3i)", "re(-5.2i)", "re(2.4)"],
  seealso: ["im", "conj", "abs", "arg"]
}, H_ = {
  name: "evaluate",
  category: "Expression",
  syntax: ["evaluate(expression)", "evaluate(expression, scope)", "evaluate([expr1, expr2, expr3, ...])", "evaluate([expr1, expr2, expr3, ...], scope)"],
  description: "Evaluate an expression or an array with expressions.",
  examples: ['evaluate("2 + 3")', 'evaluate("sqrt(16)")', 'evaluate("2 inch to cm")', 'evaluate("sin(x * pi)", { "x": 1/2 })', 'evaluate(["width=2", "height=4","width*height"])'],
  seealso: []
}, Z_ = {
  name: "help",
  category: "Expression",
  syntax: ["help(object)", "help(string)"],
  description: "Display documentation on a function or data type.",
  examples: ["help(sqrt)", 'help("complex")'],
  seealso: []
}, Y_ = {
  name: "distance",
  category: "Geometry",
  syntax: ["distance([x1, y1], [x2, y2])", "distance([[x1, y1], [x2, y2]])"],
  description: "Calculates the Euclidean distance between two points.",
  examples: ["distance([0,0], [4,4])", "distance([[0,0], [4,4]])"],
  seealso: []
}, W_ = {
  name: "intersect",
  category: "Geometry",
  syntax: ["intersect(expr1, expr2, expr3, expr4)", "intersect(expr1, expr2, expr3)"],
  description: "Computes the intersection point of lines and/or planes.",
  examples: ["intersect([0, 0], [10, 10], [10, 0], [0, 10])", "intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"],
  seealso: []
}, J_ = {
  name: "and",
  category: "Logical",
  syntax: ["x and y", "and(x, y)"],
  description: "Logical and. Test whether two values are both defined with a nonzero/nonempty value.",
  examples: ["true and false", "true and true", "2 and 4"],
  seealso: ["not", "or", "xor"]
}, X_ = {
  name: "not",
  category: "Logical",
  syntax: ["not x", "not(x)"],
  description: "Logical not. Flips the boolean value of given argument.",
  examples: ["not true", "not false", "not 2", "not 0"],
  seealso: ["and", "or", "xor"]
}, K_ = {
  name: "or",
  category: "Logical",
  syntax: ["x or y", "or(x, y)"],
  description: "Logical or. Test if at least one value is defined with a nonzero/nonempty value.",
  examples: ["true or false", "false or false", "0 or 4"],
  seealso: ["not", "and", "xor"]
}, Q_ = {
  name: "xor",
  category: "Logical",
  syntax: ["x xor y", "xor(x, y)"],
  description: "Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",
  examples: ["true xor false", "false xor false", "true xor true", "0 xor 4"],
  seealso: ["not", "and", "or"]
}, j_ = {
  name: "column",
  category: "Matrix",
  syntax: ["column(x, index)"],
  description: "Return a column from a matrix or array.",
  examples: ["A = [[1, 2], [3, 4]]", "column(A, 1)", "column(A, 2)"],
  seealso: ["row", "matrixFromColumns"]
}, eF = {
  name: "concat",
  category: "Matrix",
  syntax: ["concat(A, B, C, ...)", "concat(A, B, C, ..., dim)"],
  description: "Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",
  examples: ["A = [1, 2; 5, 6]", "B = [3, 4; 7, 8]", "concat(A, B)", "concat(A, B, 1)", "concat(A, B, 2)"],
  seealso: ["det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, rF = {
  name: "count",
  category: "Matrix",
  syntax: ["count(x)"],
  description: "Count the number of elements of a matrix, array or string.",
  examples: ["a = [1, 2; 3, 4; 5, 6]", "count(a)", "size(a)", 'count("hello world")'],
  seealso: ["size"]
}, tF = {
  name: "cross",
  category: "Matrix",
  syntax: ["cross(A, B)"],
  description: "Calculate the cross product for two vectors in three dimensional space.",
  examples: ["cross([1, 1, 0],  [0, 1, 1])", "cross([3, -3, 1], [4, 9, 2])", "cross([2, 3, 4],  [5, 6, 7])"],
  seealso: ["multiply", "dot"]
}, nF = {
  name: "ctranspose",
  category: "Matrix",
  syntax: ["x'", "ctranspose(x)"],
  description: "Complex Conjugate and Transpose a matrix",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "a'", "ctranspose(a)"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "zeros"]
}, aF = {
  name: "det",
  category: "Matrix",
  syntax: ["det(x)"],
  description: "Calculate the determinant of a matrix",
  examples: ["det([1, 2; 3, 4])", "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],
  seealso: ["concat", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, iF = {
  name: "diag",
  category: "Matrix",
  syntax: ["diag(x)", "diag(x, k)"],
  description: "Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",
  examples: ["diag(1:3)", "diag(1:3, 1)", "a = [1, 2, 3; 4, 5, 6; 7, 8, 9]", "diag(a)"],
  seealso: ["concat", "det", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, oF = {
  name: "diff",
  category: "Matrix",
  syntax: ["diff(arr)", "diff(arr, dim)"],
  description: ["Create a new matrix or array with the difference of the passed matrix or array.", "Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference", "If no dimension parameter is passed it is assumed as dimension 0", "Dimension is zero-based in javascript and one-based in the parser", "Arrays must be 'rectangular' meaning arrays like [1, 2]", "If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays"],
  examples: ["A = [1, 2, 4, 7, 0]", "diff(A)", "diff(A, 1)", "B = [[1, 2], [3, 4]]", "diff(B)", "diff(B, 1)", "diff(B, 2)", "diff(B, bignumber(2))", "diff([[1, 2], matrix([3, 4])], 2)"],
  seealso: ["subtract", "partitionSelect"]
}, sF = {
  name: "dot",
  category: "Matrix",
  syntax: ["dot(A, B)", "A * B"],
  description: "Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",
  examples: ["dot([2, 4, 1], [2, 2, 3])", "[2, 4, 1] * [2, 2, 3]"],
  seealso: ["multiply", "cross"]
}, uF = {
  name: "eigs",
  category: "Matrix",
  syntax: ["eigs(x)"],
  description: "Calculate the eigenvalues and eigenvectors of a real symmetric matrix",
  examples: ["eigs([[5, 2.3], [2.3, 1]])"],
  seealso: ["inv"]
}, cF = {
  name: "filter",
  category: "Matrix",
  syntax: ["filter(x, test)"],
  description: "Filter items in a matrix.",
  examples: ["isPositive(x) = x > 0", "filter([6, -2, -1, 4, 3], isPositive)", "filter([6, -2, 0, 1, 0], x != 0)"],
  seealso: ["sort", "map", "forEach"]
}, lF = {
  name: "flatten",
  category: "Matrix",
  syntax: ["flatten(x)"],
  description: "Flatten a multi dimensional matrix into a single dimensional matrix.",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "size(a)", "b = flatten(a)", "size(b)"],
  seealso: ["concat", "resize", "size", "squeeze"]
}, fF = {
  name: "forEach",
  category: "Matrix",
  syntax: ["forEach(x, callback)"],
  description: "Iterates over all elements of a matrix/array, and executes the given callback function.",
  examples: ["numberOfPets = {}", "addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;", 'forEach(["Dog","Cat","Cat"], addPet)', "numberOfPets"],
  seealso: ["map", "sort", "filter"]
}, mF = {
  name: "getMatrixDataType",
  category: "Matrix",
  syntax: ["getMatrixDataType(x)"],
  description: 'Find the data type of all elements in a matrix or array, for example "number" if all items are a number and "Complex" if all values are complex numbers. If a matrix contains more than one data type, it will return "mixed".',
  examples: ["getMatrixDataType([1, 2, 3])", "getMatrixDataType([[5 cm], [2 inch]])", 'getMatrixDataType([1, "text"])', "getMatrixDataType([1, bignumber(4)])"],
  seealso: ["matrix", "sparse", "typeOf"]
}, vF = {
  name: "identity",
  category: "Matrix",
  syntax: ["identity(n)", "identity(m, n)", "identity([m, n])"],
  description: "Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",
  examples: ["identity(3)", "identity(3, 5)", "a = [1, 2, 3; 4, 5, 6]", "identity(size(a))"],
  seealso: ["concat", "det", "diag", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, pF = {
  name: "inv",
  category: "Matrix",
  syntax: ["inv(x)"],
  description: "Calculate the inverse of a matrix",
  examples: ["inv([1, 2; 3, 4])", "inv(4)", "1 / 4"],
  seealso: ["concat", "det", "diag", "identity", "ones", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, dF = {
  name: "pinv",
  category: "Matrix",
  syntax: ["pinv(x)"],
  description: "Calculate the Moore–Penrose inverse of a matrix",
  examples: ["pinv([1, 2; 3, 4])", "pinv([[1, 0], [0, 1], [0, 1]])", "pinv(4)"],
  seealso: ["inv"]
}, hF = {
  name: "kron",
  category: "Matrix",
  syntax: ["kron(x, y)"],
  description: "Calculates the kronecker product of 2 matrices or vectors.",
  examples: ["kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])", "kron([1,1], [2,3,4])"],
  seealso: ["multiply", "dot", "cross"]
}, gF = {
  name: "map",
  category: "Matrix",
  syntax: ["map(x, callback)"],
  description: "Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",
  examples: ["map([1, 2, 3], square)"],
  seealso: ["filter", "forEach"]
}, yF = {
  name: "matrixFromColumns",
  category: "Matrix",
  syntax: ["matrixFromColumns(...arr)", "matrixFromColumns(row1, row2)", "matrixFromColumns(row1, row2, row3)"],
  description: "Create a dense matrix from vectors as individual columns.",
  examples: ["matrixFromColumns([1, 2, 3], [[4],[5],[6]])"],
  seealso: ["matrix", "matrixFromRows", "matrixFromFunction", "zeros"]
}, bF = {
  name: "matrixFromFunction",
  category: "Matrix",
  syntax: ["matrixFromFunction(size, fn)", "matrixFromFunction(size, fn, format)", "matrixFromFunction(size, fn, format, datatype)", "matrixFromFunction(size, format, fn)", "matrixFromFunction(size, format, datatype, fn)"],
  description: "Create a matrix by evaluating a generating function at each index.",
  examples: ["f(I) = I[1] - I[2]", "matrixFromFunction([3,3], f)", "g(I) = I[1] - I[2] == 1 ? 4 : 0", 'matrixFromFunction([100, 100], "sparse", g)', "matrixFromFunction([5], random)"],
  seealso: ["matrix", "matrixFromRows", "matrixFromColumns", "zeros"]
}, xF = {
  name: "matrixFromRows",
  category: "Matrix",
  syntax: ["matrixFromRows(...arr)", "matrixFromRows(row1, row2)", "matrixFromRows(row1, row2, row3)"],
  description: "Create a dense matrix from vectors as individual rows.",
  examples: ["matrixFromRows([1, 2, 3], [[4],[5],[6]])"],
  seealso: ["matrix", "matrixFromColumns", "matrixFromFunction", "zeros"]
}, wF = {
  name: "ones",
  category: "Matrix",
  syntax: ["ones(m)", "ones(m, n)", "ones(m, n, p, ...)", "ones([m])", "ones([m, n])", "ones([m, n, p, ...])"],
  description: "Create a matrix containing ones.",
  examples: ["ones(3)", "ones(3, 5)", "ones([2,3]) * 4.5", "a = [1, 2, 3; 4, 5, 6]", "ones(size(a))"],
  seealso: ["concat", "det", "diag", "identity", "inv", "range", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, NF = {
  name: "partitionSelect",
  category: "Matrix",
  syntax: ["partitionSelect(x, k)", "partitionSelect(x, k, compare)"],
  description: "Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",
  examples: ["partitionSelect([5, 10, 1], 2)", 'partitionSelect(["C", "B", "A", "D"], 1, compareText)', "arr = [5, 2, 1]", "partitionSelect(arr, 0) # returns 1, arr is now: [1, 2, 5]", "arr", "partitionSelect(arr, 1, 'desc') # returns 2, arr is now: [5, 2, 1]", "arr"],
  seealso: ["sort"]
}, AF = {
  name: "range",
  category: "Type",
  syntax: ["start:end", "start:step:end", "range(start, end)", "range(start, end, step)", "range(string)"],
  description: "Create a range. Lower bound of the range is included, upper bound is excluded.",
  examples: ["1:5", "3:-1:-3", "range(3, 7)", "range(0, 12, 2)", 'range("4:10")', "range(1m, 1m, 3m)", "a = [1, 2, 3, 4; 5, 6, 7, 8]", "a[1:2, 1:2]"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "size", "squeeze", "subset", "trace", "transpose", "zeros"]
}, EF = {
  name: "reshape",
  category: "Matrix",
  syntax: ["reshape(x, sizes)"],
  description: "Reshape a multi dimensional array to fit the specified dimensions.",
  examples: ["reshape([1, 2, 3, 4, 5, 6], [2, 3])", "reshape([[1, 2], [3, 4]], [1, 4])", "reshape([[1, 2], [3, 4]], [4])", "reshape([1, 2, 3, 4], [-1, 2])"],
  seealso: ["size", "squeeze", "resize"]
}, DF = {
  name: "resize",
  category: "Matrix",
  syntax: ["resize(x, size)", "resize(x, size, defaultValue)"],
  description: "Resize a matrix.",
  examples: ["resize([1,2,3,4,5], [3])", "resize([1,2,3], [5])", "resize([1,2,3], [5], -1)", "resize(2, [2, 3])", 'resize("hello", [8], "!")'],
  seealso: ["size", "subset", "squeeze", "reshape"]
}, SF = {
  name: "rotate",
  category: "Matrix",
  syntax: ["rotate(w, theta)", "rotate(w, theta, v)"],
  description: "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
  examples: ["rotate([1, 0], pi / 2)", 'rotate(matrix([1, 0]), unit("35deg"))', 'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],
  seealso: ["matrix", "rotationMatrix"]
}, CF = {
  name: "rotationMatrix",
  category: "Matrix",
  syntax: ["rotationMatrix(theta)", "rotationMatrix(theta, v)", "rotationMatrix(theta, v, format)"],
  description: "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
  examples: ["rotationMatrix(pi / 2)", 'rotationMatrix(unit("45deg"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],
  seealso: ["cos", "sin"]
}, MF = {
  name: "row",
  category: "Matrix",
  syntax: ["row(x, index)"],
  description: "Return a row from a matrix or array.",
  examples: ["A = [[1, 2], [3, 4]]", "row(A, 1)", "row(A, 2)"],
  seealso: ["column", "matrixFromRows"]
}, OF = {
  name: "size",
  category: "Matrix",
  syntax: ["size(x)"],
  description: "Calculate the size of a matrix.",
  examples: ["size(2.3)", 'size("hello world")', "a = [1, 2; 3, 4; 5, 6]", "size(a)", "size(1:6)"],
  seealso: ["concat", "count", "det", "diag", "identity", "inv", "ones", "range", "squeeze", "subset", "trace", "transpose", "zeros"]
}, TF = {
  name: "sort",
  category: "Matrix",
  syntax: ["sort(x)", "sort(x, compare)"],
  description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  examples: ["sort([5, 10, 1])", 'sort(["C", "B", "A", "D"], "natural")', "sortByLength(a, b) = size(a)[1] - size(b)[1]", 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  seealso: ["map", "filter", "forEach"]
}, BF = {
  name: "squeeze",
  category: "Matrix",
  syntax: ["squeeze(x)"],
  description: "Remove inner and outer singleton dimensions from a matrix.",
  examples: ["a = zeros(3,2,1)", "size(squeeze(a))", "b = zeros(1,1,3)", "size(squeeze(b))"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "subset", "trace", "transpose", "zeros"]
}, _F = {
  name: "subset",
  category: "Matrix",
  syntax: ["value(index)", "value(index) = replacement", "subset(value, [index])", "subset(value, [index], replacement)"],
  description: "Get or set a subset of the entries of a matrix or characters of a string. Indexes are one-based. There should be one index specification for each dimension of the target. Each specification can be a single index, a list of indices, or a range in colon notation `l:u`. In a range, both the lower bound l and upper bound u are included; and if a bound is omitted it defaults to the most extreme valid value. The cartesian product of the indices specified in each dimension determines the target of the operation.",
  examples: ["d = [1, 2; 3, 4]", "e = []", "e[1, 1:2] = [5, 6]", "e[2, :] = [7, 8]", "f = d * e", "f[2, 1]", "f[:, 1]", "f[[1,2], [1,3]] = [9, 10; 11, 12]", "f"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "trace", "transpose", "zeros"]
}, FF = {
  name: "trace",
  category: "Matrix",
  syntax: ["trace(A)"],
  description: "Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",
  examples: ["A = [1, 2, 3; -1, 2, 3; 2, 0, 3]", "trace(A)"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
}, $F = {
  name: "transpose",
  category: "Matrix",
  syntax: ["x'", "transpose(x)"],
  description: "Transpose a matrix",
  examples: ["a = [1, 2, 3; 4, 5, 6]", "a'", "transpose(a)"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "zeros"]
}, RF = {
  name: "zeros",
  category: "Matrix",
  syntax: ["zeros(m)", "zeros(m, n)", "zeros(m, n, p, ...)", "zeros([m])", "zeros([m, n])", "zeros([m, n, p, ...])"],
  description: "Create a matrix containing zeros.",
  examples: ["zeros(3)", "zeros(3, 5)", "a = [1, 2, 3; 4, 5, 6]", "zeros(size(a))"],
  seealso: ["concat", "det", "diag", "identity", "inv", "ones", "range", "size", "squeeze", "subset", "trace", "transpose"]
}, IF = {
  name: "fft",
  category: "Matrix",
  syntax: ["fft(x)"],
  description: "Calculate N-dimensional fourier transform",
  examples: ["fft([[1, 0], [1, 0]])"],
  seealso: ["ifft"]
}, PF = {
  name: "ifft",
  category: "Matrix",
  syntax: ["ifft(x)"],
  description: "Calculate N-dimensional inverse fourier transform",
  examples: ["ifft([[2, 2], [0, 0]])"],
  seealso: ["fft"]
}, qF = {
  name: "combinations",
  category: "Probability",
  syntax: ["combinations(n, k)"],
  description: "Compute the number of combinations of n items taken k at a time",
  examples: ["combinations(7, 5)"],
  seealso: ["combinationsWithRep", "permutations", "factorial"]
}, LF = {
  name: "combinationsWithRep",
  category: "Probability",
  syntax: ["combinationsWithRep(n, k)"],
  description: "Compute the number of combinations of n items taken k at a time with replacements.",
  examples: ["combinationsWithRep(7, 5)"],
  seealso: ["combinations", "permutations", "factorial"]
}, zF = {
  name: "factorial",
  category: "Probability",
  syntax: ["n!", "factorial(n)"],
  description: "Compute the factorial of a value",
  examples: ["5!", "5 * 4 * 3 * 2 * 1", "3!"],
  seealso: ["combinations", "combinationsWithRep", "permutations", "gamma"]
}, UF = {
  name: "gamma",
  category: "Probability",
  syntax: ["gamma(n)"],
  description: "Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",
  examples: ["gamma(4)", "3!", "gamma(1/2)", "sqrt(pi)"],
  seealso: ["factorial"]
}, kF = {
  name: "lgamma",
  category: "Probability",
  syntax: ["lgamma(n)"],
  description: "Logarithm of the gamma function for real, positive numbers and complex numbers, using Lanczos approximation for numbers and Stirling series for complex numbers.",
  examples: ["lgamma(4)", "lgamma(1/2)", "lgamma(i)", "lgamma(complex(1.1, 2))"],
  seealso: ["gamma"]
}, GF = {
  name: "kldivergence",
  category: "Probability",
  syntax: ["kldivergence(x, y)"],
  description: "Calculate the Kullback-Leibler (KL) divergence  between two distributions.",
  examples: ["kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"],
  seealso: []
}, VF = {
  name: "multinomial",
  category: "Probability",
  syntax: ["multinomial(A)"],
  description: "Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",
  examples: ["multinomial([1, 2, 1])"],
  seealso: ["combinations", "factorial"]
}, HF = {
  name: "permutations",
  category: "Probability",
  syntax: ["permutations(n)", "permutations(n, k)"],
  description: "Compute the number of permutations of n items taken k at a time",
  examples: ["permutations(5)", "permutations(5, 3)"],
  seealso: ["combinations", "combinationsWithRep", "factorial"]
}, ZF = {
  name: "pickRandom",
  category: "Probability",
  syntax: ["pickRandom(array)", "pickRandom(array, number)", "pickRandom(array, weights)", "pickRandom(array, number, weights)", "pickRandom(array, weights, number)"],
  description: "Pick a random entry from a given array.",
  examples: ["pickRandom(0:10)", "pickRandom([1, 3, 1, 6])", "pickRandom([1, 3, 1, 6], 2)", "pickRandom([1, 3, 1, 6], [2, 3, 2, 1])", "pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])", "pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"],
  seealso: ["random", "randomInt"]
}, YF = {
  name: "random",
  category: "Probability",
  syntax: ["random()", "random(max)", "random(min, max)", "random(size)", "random(size, max)", "random(size, min, max)"],
  description: "Return a random number.",
  examples: ["random()", "random(10, 20)", "random([2, 3])"],
  seealso: ["pickRandom", "randomInt"]
}, WF = {
  name: "randomInt",
  category: "Probability",
  syntax: ["randomInt(max)", "randomInt(min, max)", "randomInt(size)", "randomInt(size, max)", "randomInt(size, min, max)"],
  description: "Return a random integer number",
  examples: ["randomInt(10, 20)", "randomInt([2, 3], 10)"],
  seealso: ["pickRandom", "random"]
}, JF = {
  name: "compare",
  category: "Relational",
  syntax: ["compare(x, y)"],
  description: "Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
  examples: ["compare(2, 3)", "compare(3, 2)", "compare(2, 2)", "compare(5cm, 40mm)", "compare(2, [1, 2, 3])"],
  seealso: ["equal", "unequal", "smaller", "smallerEq", "largerEq", "compareNatural", "compareText"]
}, XF = {
  name: "compareNatural",
  category: "Relational",
  syntax: ["compareNatural(x, y)"],
  description: "Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
  examples: ["compareNatural(2, 3)", "compareNatural(3, 2)", "compareNatural(2, 2)", "compareNatural(5cm, 40mm)", 'compareNatural("2", "10")', "compareNatural(2 + 3i, 2 + 4i)", "compareNatural([1, 2, 4], [1, 2, 3])", "compareNatural([1, 5], [1, 2, 3])", "compareNatural([1, 2], [1, 2])", "compareNatural({a: 2}, {a: 4})"],
  seealso: ["equal", "unequal", "smaller", "smallerEq", "largerEq", "compare", "compareText"]
}, KF = {
  name: "compareText",
  category: "Relational",
  syntax: ["compareText(x, y)"],
  description: "Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
  examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', "compare(2, 10)", 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  seealso: ["compare", "compareNatural"]
}, QF = {
  name: "deepEqual",
  category: "Relational",
  syntax: ["deepEqual(x, y)"],
  description: "Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",
  examples: ["deepEqual([1,3,4], [1,3,4])", "deepEqual([1,3,4], [1,3])"],
  seealso: ["equal", "unequal", "smaller", "larger", "smallerEq", "largerEq", "compare"]
}, jF = {
  name: "equal",
  category: "Relational",
  syntax: ["x == y", "equal(x, y)"],
  description: "Check equality of two values. Returns true if the values are equal, and false if not.",
  examples: ["2+2 == 3", "2+2 == 4", "a = 3.2", "b = 6-2.8", "a == b", "50cm == 0.5m"],
  seealso: ["unequal", "smaller", "larger", "smallerEq", "largerEq", "compare", "deepEqual", "equalText"]
}, e4 = {
  name: "equalText",
  category: "Relational",
  syntax: ["equalText(x, y)"],
  description: "Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.",
  examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  seealso: ["compare", "compareNatural", "compareText", "equal"]
}, r4 = {
  name: "larger",
  category: "Relational",
  syntax: ["x > y", "larger(x, y)"],
  description: "Check if value x is larger than y. Returns true if x is larger than y, and false if not.",
  examples: ["2 > 3", "5 > 2*2", "a = 3.3", "b = 6-2.8", "(a > b)", "(b < a)", "5 cm > 2 inch"],
  seealso: ["equal", "unequal", "smaller", "smallerEq", "largerEq", "compare"]
}, t4 = {
  name: "largerEq",
  category: "Relational",
  syntax: ["x >= y", "largerEq(x, y)"],
  description: "Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",
  examples: ["2 >= 1+1", "2 > 1+1", "a = 3.2", "b = 6-2.8", "(a >= b)"],
  seealso: ["equal", "unequal", "smallerEq", "smaller", "compare"]
}, n4 = {
  name: "smaller",
  category: "Relational",
  syntax: ["x < y", "smaller(x, y)"],
  description: "Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",
  examples: ["2 < 3", "5 < 2*2", "a = 3.3", "b = 6-2.8", "(a < b)", "5 cm < 2 inch"],
  seealso: ["equal", "unequal", "larger", "smallerEq", "largerEq", "compare"]
}, a4 = {
  name: "smallerEq",
  category: "Relational",
  syntax: ["x <= y", "smallerEq(x, y)"],
  description: "Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",
  examples: ["2 <= 1+1", "2 < 1+1", "a = 3.2", "b = 6-2.8", "(a <= b)"],
  seealso: ["equal", "unequal", "larger", "smaller", "largerEq", "compare"]
}, i4 = {
  name: "unequal",
  category: "Relational",
  syntax: ["x != y", "unequal(x, y)"],
  description: "Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",
  examples: ["2+2 != 3", "2+2 != 4", "a = 3.2", "b = 6-2.8", "a != b", "50cm != 0.5m", "5 cm != 2 inch"],
  seealso: ["equal", "smaller", "larger", "smallerEq", "largerEq", "compare", "deepEqual"]
}, o4 = {
  name: "setCartesian",
  category: "Set",
  syntax: ["setCartesian(set1, set2)"],
  description: "Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.",
  examples: ["setCartesian([1, 2], [3, 4])"],
  seealso: ["setUnion", "setIntersect", "setDifference", "setPowerset"]
}, s4 = {
  name: "setDifference",
  category: "Set",
  syntax: ["setDifference(set1, set2)"],
  description: "Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setDifference([1, 2, 3, 4], [3, 4, 5, 6])", "setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setUnion", "setIntersect", "setSymDifference"]
}, u4 = {
  name: "setDistinct",
  category: "Set",
  syntax: ["setDistinct(set)"],
  description: "Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",
  examples: ["setDistinct([1, 1, 1, 2, 2, 3])"],
  seealso: ["setMultiplicity"]
}, c4 = {
  name: "setIntersect",
  category: "Set",
  syntax: ["setIntersect(set1, set2)"],
  description: "Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setIntersect([1, 2, 3, 4], [3, 4, 5, 6])", "setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setUnion", "setDifference"]
}, l4 = {
  name: "setIsSubset",
  category: "Set",
  syntax: ["setIsSubset(set1, set2)"],
  description: "Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setIsSubset([1, 2], [3, 4, 5, 6])", "setIsSubset([3, 4], [3, 4, 5, 6])"],
  seealso: ["setUnion", "setIntersect", "setDifference"]
}, f4 = {
  name: "setMultiplicity",
  category: "Set",
  syntax: ["setMultiplicity(element, set)"],
  description: "Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",
  examples: ["setMultiplicity(1, [1, 2, 2, 4])", "setMultiplicity(2, [1, 2, 2, 4])"],
  seealso: ["setDistinct", "setSize"]
}, m4 = {
  name: "setPowerset",
  category: "Set",
  syntax: ["setPowerset(set)"],
  description: "Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",
  examples: ["setPowerset([1, 2, 3])"],
  seealso: ["setCartesian"]
}, v4 = {
  name: "setSize",
  category: "Set",
  syntax: ["setSize(set)", "setSize(set, unique)"],
  description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ["setSize([1, 2, 2, 4])", "setSize([1, 2, 2, 4], true)"],
  seealso: ["setUnion", "setIntersect", "setDifference"]
}, p4 = {
  name: "setSymDifference",
  category: "Set",
  syntax: ["setSymDifference(set1, set2)"],
  description: "Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])", "setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setUnion", "setIntersect", "setDifference"]
}, d4 = {
  name: "setUnion",
  category: "Set",
  syntax: ["setUnion(set1, set2)"],
  description: "Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
  examples: ["setUnion([1, 2, 3, 4], [3, 4, 5, 6])", "setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],
  seealso: ["setIntersect", "setDifference"]
}, h4 = {
  name: "zpk2tf",
  category: "Signal",
  syntax: ["zpk2tf(z, p, k)"],
  description: "Compute the transfer function of a zero-pole-gain model.",
  examples: ["zpk2tf([1, 2], [-1, -2], 1)", "zpk2tf([1, 2], [-1, -2])", "zpk2tf([1 - 3i, 2 + 2i], [-1, -2])"],
  seealso: []
}, g4 = {
  name: "freqz",
  category: "Signal",
  syntax: ["freqz(b, a)", "freqz(b, a, w)"],
  description: "Calculates the frequency response of a filter given its numerator and denominator coefficients.",
  examples: ["freqz([1, 2], [1, 2, 3])", "freqz([1, 2], [1, 2, 3], [0, 1])", "freqz([1, 2], [1, 2, 3], 512)"],
  seealso: []
}, y4 = {
  name: "erf",
  category: "Special",
  syntax: ["erf(x)"],
  description: "Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",
  examples: ["erf(0.2)", "erf(-0.5)", "erf(4)"],
  seealso: []
}, b4 = {
  name: "zeta",
  category: "Special",
  syntax: ["zeta(s)"],
  description: "Compute the Riemann Zeta Function using an infinite series and Riemanns Functional Equation for the entire complex plane",
  examples: ["zeta(0.2)", "zeta(-0.5)", "zeta(4)"],
  seealso: []
}, x4 = {
  name: "mad",
  category: "Statistics",
  syntax: ["mad(a, b, c, ...)", "mad(A)"],
  description: "Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",
  examples: ["mad(10, 20, 30)", "mad([1, 2, 3])"],
  seealso: ["mean", "median", "std", "abs"]
}, w4 = {
  name: "max",
  category: "Statistics",
  syntax: ["max(a, b, c, ...)", "max(A)", "max(A, dimension)"],
  description: "Compute the maximum value of a list of values.",
  examples: ["max(2, 3, 4, 1)", "max([2, 3, 4, 1])", "max([2, 5; 4, 3])", "max([2, 5; 4, 3], 1)", "max([2, 5; 4, 3], 2)", "max(2.7, 7.1, -4.5, 2.0, 4.1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)"],
  seealso: ["mean", "median", "min", "prod", "std", "sum", "variance"]
}, N4 = {
  name: "mean",
  category: "Statistics",
  syntax: ["mean(a, b, c, ...)", "mean(A)", "mean(A, dimension)"],
  description: "Compute the arithmetic mean of a list of values.",
  examples: ["mean(2, 3, 4, 1)", "mean([2, 3, 4, 1])", "mean([2, 5; 4, 3])", "mean([2, 5; 4, 3], 1)", "mean([2, 5; 4, 3], 2)", "mean([1.0, 2.7, 3.2, 4.0])"],
  seealso: ["max", "median", "min", "prod", "std", "sum", "variance"]
}, A4 = {
  name: "median",
  category: "Statistics",
  syntax: ["median(a, b, c, ...)", "median(A)"],
  description: "Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",
  examples: ["median(5, 2, 7)", "median([3, -1, 5, 7])"],
  seealso: ["max", "mean", "min", "prod", "std", "sum", "variance", "quantileSeq"]
}, E4 = {
  name: "min",
  category: "Statistics",
  syntax: ["min(a, b, c, ...)", "min(A)", "min(A, dimension)"],
  description: "Compute the minimum value of a list of values.",
  examples: ["min(2, 3, 4, 1)", "min([2, 3, 4, 1])", "min([2, 5; 4, 3])", "min([2, 5; 4, 3], 1)", "min([2, 5; 4, 3], 2)", "min(2.7, 7.1, -4.5, 2.0, 4.1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)"],
  seealso: ["max", "mean", "median", "prod", "std", "sum", "variance"]
}, D4 = {
  name: "mode",
  category: "Statistics",
  syntax: ["mode(a, b, c, ...)", "mode(A)", "mode(A, a, b, B, c, ...)"],
  description: "Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",
  examples: ["mode(2, 1, 4, 3, 1)", "mode([1, 2.7, 3.2, 4, 2.7])", "mode(1, 4, 6, 1, 6)"],
  seealso: ["max", "mean", "min", "median", "prod", "std", "sum", "variance"]
}, S4 = {
  name: "prod",
  category: "Statistics",
  syntax: ["prod(a, b, c, ...)", "prod(A)"],
  description: "Compute the product of all values.",
  examples: ["prod(2, 3, 4)", "prod([2, 3, 4])", "prod([2, 5; 4, 3])"],
  seealso: ["max", "mean", "min", "median", "min", "std", "sum", "variance"]
}, C4 = {
  name: "quantileSeq",
  category: "Statistics",
  syntax: ["quantileSeq(A, prob[, sorted])", "quantileSeq(A, [prob1, prob2, ...][, sorted])", "quantileSeq(A, N[, sorted])"],
  description: `Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. 

In case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.`,
  examples: ["quantileSeq([3, -1, 5, 7], 0.5)", "quantileSeq([3, -1, 5, 7], [1/3, 2/3])", "quantileSeq([3, -1, 5, 7], 2)", "quantileSeq([-1, 3, 5, 7], 0.5, true)"],
  seealso: ["mean", "median", "min", "max", "prod", "std", "sum", "variance"]
}, M4 = {
  name: "std",
  category: "Statistics",
  syntax: ["std(a, b, c, ...)", "std(A)", "std(A, dimension)", "std(A, normalization)", "std(A, dimension, normalization)"],
  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ["std(2, 4, 6)", "std([2, 4, 6, 8])", 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', "std([1, 2, 3; 4, 5, 6])"],
  seealso: ["max", "mean", "min", "median", "prod", "sum", "variance"]
}, O4 = {
  name: "cumsum",
  category: "Statistics",
  syntax: ["cumsum(a, b, c, ...)", "cumsum(A)"],
  description: "Compute the cumulative sum of all values.",
  examples: ["cumsum(2, 3, 4, 1)", "cumsum([2, 3, 4, 1])", "cumsum([1, 2; 3, 4])", "cumsum([1, 2; 3, 4], 1)", "cumsum([1, 2; 3, 4], 2)"],
  seealso: ["max", "mean", "median", "min", "prod", "std", "sum", "variance"]
}, T4 = {
  name: "sum",
  category: "Statistics",
  syntax: ["sum(a, b, c, ...)", "sum(A)", "sum(A, dimension)"],
  description: "Compute the sum of all values.",
  examples: ["sum(2, 3, 4, 1)", "sum([2, 3, 4, 1])", "sum([2, 5; 4, 3])"],
  seealso: ["max", "mean", "median", "min", "prod", "std", "sum", "variance"]
}, B4 = {
  name: "variance",
  category: "Statistics",
  syntax: ["variance(a, b, c, ...)", "variance(A)", "variance(A, dimension)", "variance(A, normalization)", "variance(A, dimension, normalization)"],
  description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ["variance(2, 4, 6)", "variance([2, 4, 6, 8])", 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', "variance([1, 2, 3; 4, 5, 6])"],
  seealso: ["max", "mean", "min", "median", "min", "prod", "std", "sum"]
}, _4 = {
  name: "corr",
  category: "Statistics",
  syntax: ["corr(A,B)"],
  description: "Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.",
  examples: ["corr([2, 4, 6, 8],[1, 2, 3, 6])", "corr(matrix([[1, 2.2, 3, 4.8, 5], [1, 2, 3, 4, 5]]), matrix([[4, 5.3, 6.6, 7, 8], [1, 2, 3, 4, 5]]))"],
  seealso: ["max", "mean", "min", "median", "min", "prod", "std", "sum"]
}, F4 = {
  name: "acos",
  category: "Trigonometry",
  syntax: ["acos(x)"],
  description: "Compute the inverse cosine of a value in radians.",
  examples: ["acos(0.5)", "acos(cos(2.3))"],
  seealso: ["cos", "atan", "asin"]
}, $4 = {
  name: "acosh",
  category: "Trigonometry",
  syntax: ["acosh(x)"],
  description: "Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",
  examples: ["acosh(1.5)"],
  seealso: ["cosh", "asinh", "atanh"]
}, R4 = {
  name: "acot",
  category: "Trigonometry",
  syntax: ["acot(x)"],
  description: "Calculate the inverse cotangent of a value.",
  examples: ["acot(0.5)", "acot(cot(0.5))", "acot(2)"],
  seealso: ["cot", "atan"]
}, I4 = {
  name: "acoth",
  category: "Trigonometry",
  syntax: ["acoth(x)"],
  description: "Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",
  examples: ["acoth(2)", "acoth(0.5)"],
  seealso: ["acsch", "asech"]
}, P4 = {
  name: "acsc",
  category: "Trigonometry",
  syntax: ["acsc(x)"],
  description: "Calculate the inverse cotangent of a value.",
  examples: ["acsc(2)", "acsc(csc(0.5))", "acsc(0.5)"],
  seealso: ["csc", "asin", "asec"]
}, q4 = {
  name: "acsch",
  category: "Trigonometry",
  syntax: ["acsch(x)"],
  description: "Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",
  examples: ["acsch(0.5)"],
  seealso: ["asech", "acoth"]
}, L4 = {
  name: "asec",
  category: "Trigonometry",
  syntax: ["asec(x)"],
  description: "Calculate the inverse secant of a value.",
  examples: ["asec(0.5)", "asec(sec(0.5))", "asec(2)"],
  seealso: ["acos", "acot", "acsc"]
}, z4 = {
  name: "asech",
  category: "Trigonometry",
  syntax: ["asech(x)"],
  description: "Calculate the inverse secant of a value.",
  examples: ["asech(0.5)"],
  seealso: ["acsch", "acoth"]
}, U4 = {
  name: "asin",
  category: "Trigonometry",
  syntax: ["asin(x)"],
  description: "Compute the inverse sine of a value in radians.",
  examples: ["asin(0.5)", "asin(sin(0.5))"],
  seealso: ["sin", "acos", "atan"]
}, k4 = {
  name: "asinh",
  category: "Trigonometry",
  syntax: ["asinh(x)"],
  description: "Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",
  examples: ["asinh(0.5)"],
  seealso: ["acosh", "atanh"]
}, G4 = {
  name: "atan",
  category: "Trigonometry",
  syntax: ["atan(x)"],
  description: "Compute the inverse tangent of a value in radians.",
  examples: ["atan(0.5)", "atan(tan(0.5))"],
  seealso: ["tan", "acos", "asin"]
}, V4 = {
  name: "atan2",
  category: "Trigonometry",
  syntax: ["atan2(y, x)"],
  description: "Computes the principal value of the arc tangent of y/x in radians.",
  examples: ["atan2(2, 2) / pi", "angle = 60 deg in rad", "x = cos(angle)", "y = sin(angle)", "atan2(y, x)"],
  seealso: ["sin", "cos", "tan"]
}, H4 = {
  name: "atanh",
  category: "Trigonometry",
  syntax: ["atanh(x)"],
  description: "Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",
  examples: ["atanh(0.5)"],
  seealso: ["acosh", "asinh"]
}, Z4 = {
  name: "cos",
  category: "Trigonometry",
  syntax: ["cos(x)"],
  description: "Compute the cosine of x in radians.",
  examples: ["cos(2)", "cos(pi / 4) ^ 2", "cos(180 deg)", "cos(60 deg)", "sin(0.2)^2 + cos(0.2)^2"],
  seealso: ["acos", "sin", "tan"]
}, Y4 = {
  name: "cosh",
  category: "Trigonometry",
  syntax: ["cosh(x)"],
  description: "Compute the hyperbolic cosine of x in radians.",
  examples: ["cosh(0.5)"],
  seealso: ["sinh", "tanh", "coth"]
}, W4 = {
  name: "cot",
  category: "Trigonometry",
  syntax: ["cot(x)"],
  description: "Compute the cotangent of x in radians. Defined as 1/tan(x)",
  examples: ["cot(2)", "1 / tan(2)"],
  seealso: ["sec", "csc", "tan"]
}, J4 = {
  name: "coth",
  category: "Trigonometry",
  syntax: ["coth(x)"],
  description: "Compute the hyperbolic cotangent of x in radians.",
  examples: ["coth(2)", "1 / tanh(2)"],
  seealso: ["sech", "csch", "tanh"]
}, X4 = {
  name: "csc",
  category: "Trigonometry",
  syntax: ["csc(x)"],
  description: "Compute the cosecant of x in radians. Defined as 1/sin(x)",
  examples: ["csc(2)", "1 / sin(2)"],
  seealso: ["sec", "cot", "sin"]
}, K4 = {
  name: "csch",
  category: "Trigonometry",
  syntax: ["csch(x)"],
  description: "Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",
  examples: ["csch(2)", "1 / sinh(2)"],
  seealso: ["sech", "coth", "sinh"]
}, Q4 = {
  name: "sec",
  category: "Trigonometry",
  syntax: ["sec(x)"],
  description: "Compute the secant of x in radians. Defined as 1/cos(x)",
  examples: ["sec(2)", "1 / cos(2)"],
  seealso: ["cot", "csc", "cos"]
}, j4 = {
  name: "sech",
  category: "Trigonometry",
  syntax: ["sech(x)"],
  description: "Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",
  examples: ["sech(2)", "1 / cosh(2)"],
  seealso: ["coth", "csch", "cosh"]
}, e5 = {
  name: "sin",
  category: "Trigonometry",
  syntax: ["sin(x)"],
  description: "Compute the sine of x in radians.",
  examples: ["sin(2)", "sin(pi / 4) ^ 2", "sin(90 deg)", "sin(30 deg)", "sin(0.2)^2 + cos(0.2)^2"],
  seealso: ["asin", "cos", "tan"]
}, r5 = {
  name: "sinh",
  category: "Trigonometry",
  syntax: ["sinh(x)"],
  description: "Compute the hyperbolic sine of x in radians.",
  examples: ["sinh(0.5)"],
  seealso: ["cosh", "tanh"]
}, t5 = {
  name: "tan",
  category: "Trigonometry",
  syntax: ["tan(x)"],
  description: "Compute the tangent of x in radians.",
  examples: ["tan(0.5)", "sin(0.5) / cos(0.5)", "tan(pi / 4)", "tan(45 deg)"],
  seealso: ["atan", "sin", "cos"]
}, n5 = {
  name: "tanh",
  category: "Trigonometry",
  syntax: ["tanh(x)"],
  description: "Compute the hyperbolic tangent of x in radians.",
  examples: ["tanh(0.5)", "sinh(0.5) / cosh(0.5)"],
  seealso: ["sinh", "cosh"]
}, a5 = {
  name: "to",
  category: "Units",
  syntax: ["x to unit", "to(x, unit)"],
  description: "Change the unit of a value.",
  examples: ["5 inch to cm", "3.2kg to g", "16 bytes in bits"],
  seealso: []
}, i5 = {
  name: "bin",
  category: "Utils",
  syntax: ["bin(value)"],
  description: "Format a number as binary",
  examples: ["bin(2)"],
  seealso: ["oct", "hex"]
}, o5 = {
  name: "clone",
  category: "Utils",
  syntax: ["clone(x)"],
  description: "Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",
  examples: ["clone(3.5)", "clone(2 - 4i)", "clone(45 deg)", "clone([1, 2; 3, 4])", 'clone("hello world")'],
  seealso: []
}, s5 = {
  name: "format",
  category: "Utils",
  syntax: ["format(value)", "format(value, precision)"],
  description: "Format a value of any type as string.",
  examples: ["format(2.3)", "format(3 - 4i)", "format([])", "format(pi, 3)"],
  seealso: ["print"]
}, u5 = {
  name: "hasNumericValue",
  category: "Utils",
  syntax: ["hasNumericValue(x)"],
  description: "Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.",
  examples: ["hasNumericValue(2)", 'hasNumericValue("2")', 'isNumeric("2")', "hasNumericValue(0)", "hasNumericValue(bignumber(500))", "hasNumericValue(fraction(0.125))", "hasNumericValue(2 + 3i)", 'hasNumericValue([2.3, "foo", false])'],
  seealso: ["isInteger", "isZero", "isNegative", "isPositive", "isNaN", "isNumeric"]
}, c5 = {
  name: "hex",
  category: "Utils",
  syntax: ["hex(value)"],
  description: "Format a number as hexadecimal",
  examples: ["hex(240)"],
  seealso: ["bin", "oct"]
}, l5 = {
  name: "isInteger",
  category: "Utils",
  syntax: ["isInteger(x)"],
  description: "Test whether a value is an integer number.",
  examples: ["isInteger(2)", "isInteger(3.5)", "isInteger([3, 0.5, -2])"],
  seealso: ["isNegative", "isNumeric", "isPositive", "isZero"]
}, f5 = {
  name: "isNaN",
  category: "Utils",
  syntax: ["isNaN(x)"],
  description: "Test whether a value is NaN (not a number)",
  examples: ["isNaN(2)", "isNaN(0 / 0)", "isNaN(NaN)", "isNaN(Infinity)"],
  seealso: ["isNegative", "isNumeric", "isPositive", "isZero"]
}, m5 = {
  name: "isNegative",
  category: "Utils",
  syntax: ["isNegative(x)"],
  description: "Test whether a value is negative: smaller than zero.",
  examples: ["isNegative(2)", "isNegative(0)", "isNegative(-4)", "isNegative([3, 0.5, -2])"],
  seealso: ["isInteger", "isNumeric", "isPositive", "isZero"]
}, v5 = {
  name: "isNumeric",
  category: "Utils",
  syntax: ["isNumeric(x)"],
  description: "Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",
  examples: ["isNumeric(2)", 'isNumeric("2")', 'hasNumericValue("2")', "isNumeric(0)", "isNumeric(bignumber(500))", "isNumeric(fraction(0.125))", "isNumeric(2 + 3i)", 'isNumeric([2.3, "foo", false])'],
  seealso: ["isInteger", "isZero", "isNegative", "isPositive", "isNaN", "hasNumericValue"]
}, p5 = {
  name: "isPositive",
  category: "Utils",
  syntax: ["isPositive(x)"],
  description: "Test whether a value is positive: larger than zero.",
  examples: ["isPositive(2)", "isPositive(0)", "isPositive(-4)", "isPositive([3, 0.5, -2])"],
  seealso: ["isInteger", "isNumeric", "isNegative", "isZero"]
}, d5 = {
  name: "isPrime",
  category: "Utils",
  syntax: ["isPrime(x)"],
  description: "Test whether a value is prime: has no divisors other than itself and one.",
  examples: ["isPrime(3)", "isPrime(-2)", "isPrime([2, 17, 100])"],
  seealso: ["isInteger", "isNumeric", "isNegative", "isZero"]
}, h5 = {
  name: "isZero",
  category: "Utils",
  syntax: ["isZero(x)"],
  description: "Test whether a value is zero.",
  examples: ["isZero(2)", "isZero(0)", "isZero(-4)", "isZero([3, 0, -2, 0])"],
  seealso: ["isInteger", "isNumeric", "isNegative", "isPositive"]
}, g5 = {
  name: "numeric",
  category: "Utils",
  syntax: ["numeric(x)"],
  description: "Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.",
  examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction")', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number")'],
  seealso: ["number", "fraction", "bignumber", "string", "format"]
}, y5 = {
  name: "oct",
  category: "Utils",
  syntax: ["oct(value)"],
  description: "Format a number as octal",
  examples: ["oct(56)"],
  seealso: ["bin", "hex"]
}, b5 = {
  name: "print",
  category: "Utils",
  syntax: ["print(template, values)", "print(template, values, precision)"],
  description: "Interpolate values into a string template.",
  examples: ['print("Lucy is $age years old", {age: 5})', 'print("The value of pi is $pi", {pi: pi}, 3)', 'print("Hello, $user.name!", {user: {name: "John"}})', 'print("Values: $1, $2, $3", [6, 9, 4])'],
  seealso: ["format"]
}, x5 = {
  name: "typeOf",
  category: "Utils",
  syntax: ["typeOf(x)"],
  description: "Get the type of a variable.",
  examples: ["typeOf(3.5)", "typeOf(2 - 4i)", "typeOf(45 deg)", 'typeOf("hello world")'],
  seealso: ["getMatrixDataType"]
}, w5 = {
  name: "solveODE",
  category: "Numeric",
  syntax: ["solveODE(func, tspan, y0)", "solveODE(func, tspan, y0, options)"],
  description: "Numerical Integration of Ordinary Differential Equations.",
  examples: ["f(t,y) = y", "tspan = [0, 4]", "solveODE(f, tspan, 1)", "solveODE(f, tspan, [1, 2])", 'solveODE(f, tspan, 1, { method:"RK23", maxStep:0.1 })'],
  seealso: ["derivative", "simplifyCore"]
}, N5 = {
  // construction functions
  bignumber: mB,
  boolean: vB,
  complex: pB,
  createUnit: dB,
  fraction: hB,
  index: gB,
  matrix: yB,
  number: bB,
  sparse: xB,
  splitUnit: wB,
  string: NB,
  unit: AB,
  // constants
  e: Ap,
  E: Ap,
  false: K3,
  i: Q3,
  Infinity: j3,
  LN2: rB,
  LN10: eB,
  LOG2E: nB,
  LOG10E: tB,
  NaN: aB,
  null: iB,
  pi: Ep,
  PI: Ep,
  phi: oB,
  SQRT1_2: sB,
  SQRT2: uB,
  tau: cB,
  true: lB,
  version: fB,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: "Speed of light in vacuum",
    examples: ["speedOfLight"]
  },
  gravitationConstant: {
    description: "Newtonian constant of gravitation",
    examples: ["gravitationConstant"]
  },
  planckConstant: {
    description: "Planck constant",
    examples: ["planckConstant"]
  },
  reducedPlanckConstant: {
    description: "Reduced Planck constant",
    examples: ["reducedPlanckConstant"]
  },
  magneticConstant: {
    description: "Magnetic constant (vacuum permeability)",
    examples: ["magneticConstant"]
  },
  electricConstant: {
    description: "Electric constant (vacuum permeability)",
    examples: ["electricConstant"]
  },
  vacuumImpedance: {
    description: "Characteristic impedance of vacuum",
    examples: ["vacuumImpedance"]
  },
  coulomb: {
    description: "Coulomb's constant",
    examples: ["coulomb"]
  },
  elementaryCharge: {
    description: "Elementary charge",
    examples: ["elementaryCharge"]
  },
  bohrMagneton: {
    description: "Borh magneton",
    examples: ["bohrMagneton"]
  },
  conductanceQuantum: {
    description: "Conductance quantum",
    examples: ["conductanceQuantum"]
  },
  inverseConductanceQuantum: {
    description: "Inverse conductance quantum",
    examples: ["inverseConductanceQuantum"]
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: "Magnetic flux quantum",
    examples: ["magneticFluxQuantum"]
  },
  nuclearMagneton: {
    description: "Nuclear magneton",
    examples: ["nuclearMagneton"]
  },
  klitzing: {
    description: "Von Klitzing constant",
    examples: ["klitzing"]
  },
  bohrRadius: {
    description: "Borh radius",
    examples: ["bohrRadius"]
  },
  classicalElectronRadius: {
    description: "Classical electron radius",
    examples: ["classicalElectronRadius"]
  },
  electronMass: {
    description: "Electron mass",
    examples: ["electronMass"]
  },
  fermiCoupling: {
    description: "Fermi coupling constant",
    examples: ["fermiCoupling"]
  },
  fineStructure: {
    description: "Fine-structure constant",
    examples: ["fineStructure"]
  },
  hartreeEnergy: {
    description: "Hartree energy",
    examples: ["hartreeEnergy"]
  },
  protonMass: {
    description: "Proton mass",
    examples: ["protonMass"]
  },
  deuteronMass: {
    description: "Deuteron Mass",
    examples: ["deuteronMass"]
  },
  neutronMass: {
    description: "Neutron mass",
    examples: ["neutronMass"]
  },
  quantumOfCirculation: {
    description: "Quantum of circulation",
    examples: ["quantumOfCirculation"]
  },
  rydberg: {
    description: "Rydberg constant",
    examples: ["rydberg"]
  },
  thomsonCrossSection: {
    description: "Thomson cross section",
    examples: ["thomsonCrossSection"]
  },
  weakMixingAngle: {
    description: "Weak mixing angle",
    examples: ["weakMixingAngle"]
  },
  efimovFactor: {
    description: "Efimov factor",
    examples: ["efimovFactor"]
  },
  atomicMass: {
    description: "Atomic mass constant",
    examples: ["atomicMass"]
  },
  avogadro: {
    description: "Avogadro's number",
    examples: ["avogadro"]
  },
  boltzmann: {
    description: "Boltzmann constant",
    examples: ["boltzmann"]
  },
  faraday: {
    description: "Faraday constant",
    examples: ["faraday"]
  },
  firstRadiation: {
    description: "First radiation constant",
    examples: ["firstRadiation"]
  },
  loschmidt: {
    description: "Loschmidt constant at T=273.15 K and p=101.325 kPa",
    examples: ["loschmidt"]
  },
  gasConstant: {
    description: "Gas constant",
    examples: ["gasConstant"]
  },
  molarPlanckConstant: {
    description: "Molar Planck constant",
    examples: ["molarPlanckConstant"]
  },
  molarVolume: {
    description: "Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa",
    examples: ["molarVolume"]
  },
  sackurTetrode: {
    description: "Sackur-Tetrode constant at T=1 K and p=101.325 kPa",
    examples: ["sackurTetrode"]
  },
  secondRadiation: {
    description: "Second radiation constant",
    examples: ["secondRadiation"]
  },
  stefanBoltzmann: {
    description: "Stefan-Boltzmann constant",
    examples: ["stefanBoltzmann"]
  },
  wienDisplacement: {
    description: "Wien displacement law constant",
    examples: ["wienDisplacement"]
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: "Molar mass constant",
    examples: ["molarMass"]
  },
  molarMassC12: {
    description: "Molar mass constant of carbon-12",
    examples: ["molarMassC12"]
  },
  gravity: {
    description: "Standard acceleration of gravity (standard acceleration of free-fall on Earth)",
    examples: ["gravity"]
  },
  planckLength: {
    description: "Planck length",
    examples: ["planckLength"]
  },
  planckMass: {
    description: "Planck mass",
    examples: ["planckMass"]
  },
  planckTime: {
    description: "Planck time",
    examples: ["planckTime"]
  },
  planckCharge: {
    description: "Planck charge",
    examples: ["planckCharge"]
  },
  planckTemperature: {
    description: "Planck temperature",
    examples: ["planckTemperature"]
  },
  // functions - algebra
  derivative: CB,
  lsolve: OB,
  lsolveAll: TB,
  lup: BB,
  lusolve: _B,
  leafCount: MB,
  polynomialRoot: FB,
  resolve: IB,
  simplify: PB,
  simplifyConstant: qB,
  simplifyCore: LB,
  symbolicEqual: UB,
  rationalize: RB,
  slu: zB,
  usolve: kB,
  usolveAll: GB,
  qr: $B,
  // functions - arithmetic
  abs: VB,
  add: HB,
  cbrt: ZB,
  ceil: YB,
  cube: WB,
  divide: JB,
  dotDivide: XB,
  dotMultiply: KB,
  dotPow: QB,
  exp: jB,
  expm: e_,
  expm1: r_,
  fix: t_,
  floor: n_,
  gcd: a_,
  hypot: i_,
  lcm: s_,
  log: u_,
  log2: f_,
  log1p: l_,
  log10: c_,
  mod: m_,
  multiply: v_,
  norm: p_,
  nthRoot: d_,
  nthRoots: h_,
  pow: g_,
  round: y_,
  sign: b_,
  sqrt: x_,
  sqrtm: w_,
  square: D_,
  subtract: S_,
  unaryMinus: C_,
  unaryPlus: M_,
  xgcd: O_,
  invmod: o_,
  // functions - bitwise
  bitAnd: T_,
  bitNot: B_,
  bitOr: __,
  bitXor: F_,
  leftShift: $_,
  rightArithShift: R_,
  rightLogShift: I_,
  // functions - combinatorics
  bellNumbers: P_,
  catalan: q_,
  composition: L_,
  stirlingS2: z_,
  // functions - core
  config: EB,
  import: DB,
  typed: SB,
  // functions - complex
  arg: U_,
  conj: k_,
  re: V_,
  im: G_,
  // functions - expression
  evaluate: H_,
  help: Z_,
  // functions - geometry
  distance: Y_,
  intersect: W_,
  // functions - logical
  and: J_,
  not: X_,
  or: K_,
  xor: Q_,
  // functions - matrix
  concat: eF,
  count: rF,
  cross: tF,
  column: j_,
  ctranspose: nF,
  det: aF,
  diag: iF,
  diff: oF,
  dot: sF,
  getMatrixDataType: mF,
  identity: vF,
  filter: cF,
  flatten: lF,
  forEach: fF,
  inv: pF,
  pinv: dF,
  eigs: uF,
  kron: hF,
  matrixFromFunction: bF,
  matrixFromRows: xF,
  matrixFromColumns: yF,
  map: gF,
  ones: wF,
  partitionSelect: NF,
  range: AF,
  resize: DF,
  reshape: EF,
  rotate: SF,
  rotationMatrix: CF,
  row: MF,
  size: OF,
  sort: TF,
  squeeze: BF,
  subset: _F,
  trace: FF,
  transpose: $F,
  zeros: RF,
  fft: IF,
  ifft: PF,
  sylvester: N_,
  schur: A_,
  lyap: E_,
  // functions - numeric
  solveODE: w5,
  // functions - probability
  combinations: qF,
  combinationsWithRep: LF,
  // distribution: distributionDocs,
  factorial: zF,
  gamma: UF,
  kldivergence: GF,
  lgamma: kF,
  multinomial: VF,
  permutations: HF,
  pickRandom: ZF,
  random: YF,
  randomInt: WF,
  // functions - relational
  compare: JF,
  compareNatural: XF,
  compareText: KF,
  deepEqual: QF,
  equal: jF,
  equalText: e4,
  larger: r4,
  largerEq: t4,
  smaller: n4,
  smallerEq: a4,
  unequal: i4,
  // functions - set
  setCartesian: o4,
  setDifference: s4,
  setDistinct: u4,
  setIntersect: c4,
  setIsSubset: l4,
  setMultiplicity: f4,
  setPowerset: m4,
  setSize: v4,
  setSymDifference: p4,
  setUnion: d4,
  // functions - signal
  zpk2tf: h4,
  freqz: g4,
  // functions - special
  erf: y4,
  zeta: b4,
  // functions - statistics
  cumsum: O4,
  mad: x4,
  max: w4,
  mean: N4,
  median: A4,
  min: E4,
  mode: D4,
  prod: S4,
  quantileSeq: C4,
  std: M4,
  sum: T4,
  variance: B4,
  corr: _4,
  // functions - trigonometry
  acos: F4,
  acosh: $4,
  acot: R4,
  acoth: I4,
  acsc: P4,
  acsch: q4,
  asec: L4,
  asech: z4,
  asin: U4,
  asinh: k4,
  atan: G4,
  atanh: H4,
  atan2: V4,
  cos: Z4,
  cosh: Y4,
  cot: W4,
  coth: J4,
  csc: X4,
  csch: K4,
  sec: Q4,
  sech: j4,
  sin: e5,
  sinh: r5,
  tan: t5,
  tanh: n5,
  // functions - units
  to: a5,
  // functions - utils
  clone: o5,
  format: s5,
  bin: i5,
  oct: y5,
  hex: c5,
  isNaN: f5,
  isInteger: l5,
  isNegative: m5,
  isNumeric: v5,
  hasNumericValue: u5,
  isPositive: p5,
  isPrime: d5,
  isZero: h5,
  print: b5,
  typeOf: x5,
  numeric: g5
}, Dp = "help", A5 = ["typed", "mathWithTransform", "Help"], E5 = /* @__PURE__ */ q(Dp, A5, (r) => {
  var {
    typed: e,
    mathWithTransform: t,
    Help: n
  } = r;
  return e(Dp, {
    any: function(i) {
      var o, f = i;
      if (typeof i != "string") {
        for (o in t)
          if ($e(t, o) && i === t[o]) {
            f = o;
            break;
          }
      }
      var l = rt(N5, f);
      if (!l) {
        var u = typeof f == "function" ? f.name : f;
        throw new Error('No documentation found on "' + u + '"');
      }
      return new n(l);
    }
  });
}), Sp = "chain", D5 = ["typed", "Chain"], S5 = /* @__PURE__ */ q(Sp, D5, (r) => {
  var {
    typed: e,
    Chain: t
  } = r;
  return e(Sp, {
    "": function() {
      return new t();
    },
    any: function(a) {
      return new t(a);
    }
  });
}), Cp = "det", C5 = ["typed", "matrix", "subtractScalar", "multiply", "divideScalar", "isZero", "unaryMinus"], M5 = /* @__PURE__ */ q(Cp, C5, (r) => {
  var {
    typed: e,
    matrix: t,
    subtractScalar: n,
    multiply: a,
    divideScalar: i,
    isZero: o,
    unaryMinus: f
  } = r;
  return e(Cp, {
    any: function(s) {
      return Ge(s);
    },
    "Array | Matrix": function(s) {
      var c;
      switch (Le(s) ? c = s.size() : Array.isArray(s) ? (s = t(s), c = s.size()) : c = [], c.length) {
        case 0:
          return Ge(s);
        case 1:
          if (c[0] === 1)
            return Ge(s.valueOf()[0]);
          if (c[0] === 0)
            return 1;
          throw new RangeError("Matrix must be square (size: " + Je(c) + ")");
        case 2: {
          var m = c[0], v = c[1];
          if (m === v)
            return l(s.clone().valueOf(), m);
          if (v === 0)
            return 1;
          throw new RangeError("Matrix must be square (size: " + Je(c) + ")");
        }
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + Je(c) + ")");
      }
    }
  });
  function l(u, s, c) {
    if (s === 1)
      return Ge(u[0][0]);
    if (s === 2)
      return n(a(u[0][0], u[1][1]), a(u[1][0], u[0][1]));
    for (var m = !1, v = new Array(s).fill(0).map((E, D) => D), d = 0; d < s; d++) {
      var p = v[d];
      if (o(u[p][d])) {
        var b = void 0;
        for (b = d + 1; b < s; b++)
          if (!o(u[v[b]][d])) {
            p = v[b], v[b] = v[d], v[d] = p, m = !m;
            break;
          }
        if (b === s)
          return u[p][d];
      }
      for (var g = u[p][d], N = d === 0 ? 1 : u[v[d - 1]][d - 1], h = d + 1; h < s; h++)
        for (var w = v[h], x = d + 1; x < s; x++)
          u[w][x] = i(n(a(u[w][x], g), a(u[w][d], u[p][x])), N);
    }
    var y = u[v[s - 1]][s - 1];
    return m ? f(y) : y;
  }
}), Mp = "inv", O5 = ["typed", "matrix", "divideScalar", "addScalar", "multiply", "unaryMinus", "det", "identity", "abs"], T5 = /* @__PURE__ */ q(Mp, O5, (r) => {
  var {
    typed: e,
    matrix: t,
    divideScalar: n,
    addScalar: a,
    multiply: i,
    unaryMinus: o,
    det: f,
    identity: l,
    abs: u
  } = r;
  return e(Mp, {
    "Array | Matrix": function(m) {
      var v = Le(m) ? m.size() : Ye(m);
      switch (v.length) {
        case 1:
          if (v[0] === 1)
            return Le(m) ? t([n(1, m.valueOf()[0])]) : [n(1, m[0])];
          throw new RangeError("Matrix must be square (size: " + Je(v) + ")");
        case 2: {
          var d = v[0], p = v[1];
          if (d === p)
            return Le(m) ? t(s(m.valueOf(), d, p), m.storage()) : s(m, d, p);
          throw new RangeError("Matrix must be square (size: " + Je(v) + ")");
        }
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + Je(v) + ")");
      }
    },
    any: function(m) {
      return n(1, m);
    }
  });
  function s(c, m, v) {
    var d, p, b, g, N;
    if (m === 1) {
      if (g = c[0][0], g === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      return [[n(1, g)]];
    } else if (m === 2) {
      var h = f(c);
      if (h === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      return [[n(c[1][1], h), n(o(c[0][1]), h)], [n(o(c[1][0]), h), n(c[0][0], h)]];
    } else {
      var w = c.concat();
      for (d = 0; d < m; d++)
        w[d] = w[d].concat();
      for (var x = l(m).valueOf(), y = 0; y < v; y++) {
        var E = u(w[y][y]), D = y;
        for (d = y + 1; d < m; )
          u(w[d][y]) > E && (E = u(w[d][y]), D = d), d++;
        if (E === 0)
          throw Error("Cannot calculate inverse, determinant is zero");
        d = D, d !== y && (N = w[y], w[y] = w[d], w[d] = N, N = x[y], x[y] = x[d], x[d] = N);
        var S = w[y], A = x[y];
        for (d = 0; d < m; d++) {
          var C = w[d], T = x[d];
          if (d !== y) {
            if (C[y] !== 0) {
              for (b = n(o(C[y]), S[y]), p = y; p < v; p++)
                C[p] = a(C[p], i(b, S[p]));
              for (p = 0; p < v; p++)
                T[p] = a(T[p], i(b, A[p]));
            }
          } else {
            for (b = S[y], p = y; p < v; p++)
              C[p] = n(C[p], b);
            for (p = 0; p < v; p++)
              T[p] = n(T[p], b);
          }
        }
      }
      return x;
    }
  }
}), Op = "pinv", B5 = ["typed", "matrix", "inv", "deepEqual", "equal", "dotDivide", "dot", "ctranspose", "divideScalar", "multiply", "add", "Complex"], _5 = /* @__PURE__ */ q(Op, B5, (r) => {
  var {
    typed: e,
    matrix: t,
    inv: n,
    deepEqual: a,
    equal: i,
    dotDivide: o,
    dot: f,
    ctranspose: l,
    divideScalar: u,
    multiply: s,
    add: c,
    Complex: m
  } = r;
  return e(Op, {
    "Array | Matrix": function(h) {
      var w = Le(h) ? h.size() : Ye(h);
      switch (w.length) {
        case 1:
          return g(h) ? l(h) : w[0] === 1 ? n(h) : o(l(h), f(h, h));
        case 2: {
          if (g(h))
            return l(h);
          var x = w[0], y = w[1];
          if (x === y)
            try {
              return n(h);
            } catch (E) {
              if (!(E instanceof Error && E.message.match(/Cannot calculate inverse, determinant is zero/)))
                throw E;
            }
          return Le(h) ? t(v(h.valueOf(), x, y), h.storage()) : v(h, x, y);
        }
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + Je(w) + ")");
      }
    },
    any: function(h) {
      return i(h, 0) ? Ge(h) : u(1, h);
    }
  });
  function v(N, h, w) {
    var {
      C: x,
      F: y
    } = p(N, h, w), E = s(n(s(l(x), x)), l(x)), D = s(l(y), n(s(y, l(y))));
    return s(D, E);
  }
  function d(N, h, w) {
    for (var x = Ge(N), y = 0, E = 0; E < h; E++) {
      if (w <= y)
        return x;
      for (var D = E; b(x[D][y]); )
        if (D++, h === D && (D = E, y++, w === y))
          return x;
      [x[D], x[E]] = [x[E], x[D]];
      for (var S = x[E][y], A = 0; A < w; A++)
        x[E][A] = o(x[E][A], S);
      for (var C = 0; C < h; C++)
        if (C !== E) {
          S = x[C][y];
          for (var T = 0; T < w; T++)
            x[C][T] = c(x[C][T], s(-1, s(S, x[E][T])));
        }
      y++;
    }
    return x;
  }
  function p(N, h, w) {
    var x = d(N, h, w), y = N.map((D, S) => D.filter((A, C) => C < h && !b(f(x[C], x[C])))), E = x.filter((D, S) => !b(f(x[S], x[S])));
    return {
      C: y,
      F: E
    };
  }
  function b(N) {
    return i(c(N, m(1, 1)), c(0, m(1, 1)));
  }
  function g(N) {
    return a(c(N, m(1, 1)), c(s(N, 0), m(1, 1)));
  }
});
function F5(r) {
  var {
    addScalar: e,
    subtract: t,
    flatten: n,
    multiply: a,
    multiplyScalar: i,
    divideScalar: o,
    sqrt: f,
    abs: l,
    bignumber: u,
    diag: s,
    inv: c,
    qr: m,
    usolve: v,
    usolveAll: d,
    equal: p,
    complex: b,
    larger: g,
    smaller: N,
    matrixFromColumns: h,
    dot: w
  } = r;
  function x(U, K, j, z, Q) {
    Q === void 0 && (Q = !0);
    var ae = y(U, K, j, z, Q);
    E(U, K, j, z, Q, ae);
    var {
      values: re,
      C: fe
    } = D(U, K, j, z, Q), de;
    return Q && (de = S(U, K, fe, ae, re, j, z), de = h(...de)), {
      values: re,
      vectors: de
    };
  }
  function y(U, K, j, z, Q) {
    var ae = z === "BigNumber", re = z === "Complex", fe = ae ? u(0) : 0, de = ae ? u(1) : re ? b(1) : 1, le = ae ? u(1) : 1, ie = ae ? u(10) : 2, ye = i(ie, ie), _e;
    Q && (_e = Array(K).fill(de));
    for (var De = !1; !De; ) {
      De = !0;
      for (var Be = 0; Be < K; Be++) {
        for (var k = fe, Z = fe, oe = 0; oe < K; oe++)
          if (Be !== oe) {
            var H = l(U[Be][oe]);
            k = e(k, H), Z = e(Z, H);
          }
        if (!p(k, 0) && !p(Z, 0)) {
          for (var W = le, te = k, ge = o(Z, ie), ve = i(Z, ie); N(te, ge); )
            te = i(te, ye), W = i(W, ie);
          for (; g(te, ve); )
            te = o(te, ye), W = o(W, ie);
          var P = N(o(e(te, Z), W), i(e(k, Z), 0.95));
          if (P) {
            De = !1;
            for (var V = o(1, W), ee = 0; ee < K; ee++)
              Be !== ee && (U[Be][ee] = i(U[Be][ee], W), U[ee][Be] = i(U[ee][Be], V));
            Q && (_e[Be] = i(_e[Be], W));
          }
        }
      }
    }
    return s(_e);
  }
  function E(U, K, j, z, Q, ae) {
    var re = z === "BigNumber", fe = z === "Complex", de = re ? u(0) : fe ? b(0) : 0;
    re && (j = u(j));
    for (var le = 0; le < K - 2; le++) {
      for (var ie = 0, ye = de, _e = le + 1; _e < K; _e++) {
        var De = U[_e][le];
        N(l(ye), l(De)) && (ye = De, ie = _e);
      }
      if (!N(l(ye), j)) {
        if (ie !== le + 1) {
          var Be = U[ie];
          U[ie] = U[le + 1], U[le + 1] = Be;
          for (var k = 0; k < K; k++) {
            var Z = U[k][ie];
            U[k][ie] = U[k][le + 1], U[k][le + 1] = Z;
          }
          if (Q) {
            var oe = ae[ie];
            ae[ie] = ae[le + 1], ae[le + 1] = oe;
          }
        }
        for (var H = le + 2; H < K; H++) {
          var W = o(U[H][le], ye);
          if (W !== 0) {
            for (var te = 0; te < K; te++)
              U[H][te] = t(U[H][te], i(W, U[le + 1][te]));
            for (var ge = 0; ge < K; ge++)
              U[ge][le + 1] = e(U[ge][le + 1], i(W, U[ge][H]));
            if (Q)
              for (var ve = 0; ve < K; ve++)
                ae[H][ve] = t(ae[H][ve], i(W, ae[le + 1][ve]));
          }
        }
      }
    }
    return ae;
  }
  function D(U, K, j, z, Q) {
    var ae = z === "BigNumber", re = z === "Complex", fe = ae ? u(1) : re ? b(1) : 1;
    ae && (j = u(j));
    for (var de = Ge(U), le = [], ie = K, ye = [], _e = Q ? s(Array(K).fill(fe)) : void 0, De = Q ? s(Array(ie).fill(fe)) : void 0, Be = 0; Be <= 100; ) {
      Be += 1;
      for (var k = 0, Z = 0; Z < ie; Z++)
        de[Z][Z] = t(de[Z][Z], k);
      var {
        Q: oe,
        R: H
      } = m(de);
      de = a(H, oe);
      for (var W = 0; W < ie; W++)
        de[W][W] = e(de[W][W], k);
      if (Q && (De = a(De, oe)), ie === 1 || N(l(de[ie - 1][ie - 2]), j)) {
        Be = 0, le.push(de[ie - 1][ie - 1]), Q && (ye.unshift([[1]]), T(De, K), _e = a(_e, De), ie > 1 && (De = s(Array(ie - 1).fill(fe)))), ie -= 1, de.pop();
        for (var te = 0; te < ie; te++)
          de[te].pop();
      } else if (ie === 2 || N(l(de[ie - 2][ie - 3]), j)) {
        Be = 0;
        var ge = A(de[ie - 2][ie - 2], de[ie - 2][ie - 1], de[ie - 1][ie - 2], de[ie - 1][ie - 1]);
        le.push(...ge), Q && (ye.unshift(C(de[ie - 2][ie - 2], de[ie - 2][ie - 1], de[ie - 1][ie - 2], de[ie - 1][ie - 1], ge[0], ge[1], j, z)), T(De, K), _e = a(_e, De), ie > 2 && (De = s(Array(ie - 2).fill(fe)))), ie -= 2, de.pop(), de.pop();
        for (var ve = 0; ve < ie; ve++)
          de[ve].pop(), de[ve].pop();
      }
      if (ie === 0)
        break;
    }
    if (le.sort((ee, ue) => +t(l(ee), l(ue))), Be > 100) {
      var P = Error("The eigenvalues failed to converge. Only found these eigenvalues: " + le.join(", "));
      throw P.values = le, P.vectors = [], P;
    }
    var V = Q ? a(_e, $(ye, K)) : void 0;
    return {
      values: le,
      C: V
    };
  }
  function S(U, K, j, z, Q, ae, re) {
    var fe = c(j), de = a(fe, U, j), le = re === "BigNumber", ie = re === "Complex", ye = le ? u(0) : ie ? b(0) : 0, _e = le ? u(1) : ie ? b(1) : 1, De = [], Be = [];
    for (var k of Q) {
      var Z = I(De, k, p);
      Z === -1 ? (De.push(k), Be.push(1)) : Be[Z] += 1;
    }
    for (var oe = [], H = De.length, W = Array(K).fill(ye), te = s(Array(K).fill(_e)), ge = [], ve = function() {
      var ue = De[P], pe = t(de, a(ue, te)), me = d(pe, W);
      for (me.shift(); me.length < Be[P]; ) {
        var Ne = R(pe, K, me, ae, re);
        if (Ne == null) {
          ge.push(ue);
          break;
        }
        me.push(Ne);
      }
      var be = a(c(z), j);
      me = me.map((Oe) => a(be, Oe)), oe.push(...me.map((Oe) => n(Oe)));
    }, P = 0; P < H; P++)
      ve();
    if (ge.length !== 0) {
      var V = new Error("Failed to find eigenvectors for the following eigenvalues: " + ge.join(", "));
      throw V.values = Q, V.vectors = oe, V;
    }
    return oe;
  }
  function A(U, K, j, z) {
    var Q = e(U, z), ae = t(i(U, z), i(K, j)), re = i(Q, 0.5), fe = i(f(t(i(Q, Q), i(4, ae))), 0.5);
    return [e(re, fe), t(re, fe)];
  }
  function C(U, K, j, z, Q, ae, re, fe) {
    var de = fe === "BigNumber", le = fe === "Complex", ie = de ? u(0) : le ? b(0) : 0, ye = de ? u(1) : le ? b(1) : 1;
    if (N(l(j), re))
      return [[ye, ie], [ie, ye]];
    if (g(l(t(Q, ae)), re))
      return [[t(Q, z), t(ae, z)], [j, j]];
    var _e = t(U, Q), De = t(K, Q), Be = t(j, Q), k = t(z, Q);
    return N(l(De), re) ? [[_e, ye], [Be, ie]] : [[De, ie], [k, ye]];
  }
  function T(U, K) {
    for (var j = 0; j < U.length; j++)
      U[j].push(...Array(K - U[j].length).fill(0));
    for (var z = U.length; z < K; z++)
      U.push(Array(K).fill(0)), U[z][z] = 1;
    return U;
  }
  function $(U, K) {
    for (var j = [], z = 0; z < K; z++)
      j[z] = Array(K).fill(0);
    var Q = 0;
    for (var ae of U) {
      for (var re = ae.length, fe = 0; fe < re; fe++)
        for (var de = 0; de < re; de++)
          j[Q + fe][Q + de] = ae[fe][de];
      Q += re;
    }
    return j;
  }
  function I(U, K, j) {
    for (var z = 0; z < U.length; z++)
      if (j(U[z], K))
        return z;
    return -1;
  }
  function R(U, K, j, z, Q) {
    for (var ae = Q === "BigNumber" ? u(1e3) : 1e3, re, fe = 0; re = B(K, j, Q), re = v(U, re), !g(G(re), ae); )
      if (++fe >= 5)
        return null;
    for (fe = 0; ; ) {
      var de = v(U, re);
      if (N(G(O(re, [de])), z))
        break;
      if (++fe >= 10)
        return null;
      re = _(de);
    }
    return re;
  }
  function B(U, K, j) {
    var z = j === "BigNumber", Q = j === "Complex", ae = Array(U).fill(0).map((re) => 2 * Math.random() - 1);
    return z && (ae = ae.map((re) => u(re))), Q && (ae = ae.map((re) => b(re))), ae = O(ae, K), _(ae, j);
  }
  function O(U, K) {
    for (var j of K)
      U = t(U, a(o(w(j, U), w(j, j)), j));
    return U;
  }
  function G(U) {
    return l(f(w(U, U)));
  }
  function _(U, K) {
    var j = K === "BigNumber", z = K === "Complex", Q = j ? u(1) : z ? b(1) : 1;
    return a(o(Q, G(U)), U);
  }
  return x;
}
function $5(r) {
  var {
    config: e,
    addScalar: t,
    subtract: n,
    abs: a,
    atan: i,
    cos: o,
    sin: f,
    multiplyScalar: l,
    inv: u,
    bignumber: s,
    multiply: c,
    add: m
  } = r;
  function v(A, C) {
    var T = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e.epsilon, $ = arguments.length > 3 ? arguments[3] : void 0;
    if ($ === "number")
      return d(A, T);
    if ($ === "BigNumber")
      return p(A, T);
    throw TypeError("Unsupported data type: " + $);
  }
  function d(A, C) {
    for (var T = A.length, $ = Math.abs(C / T), I, R = new Array(T), B = 0; B < T; B++)
      R[B] = S(T, 0), R[B][B] = 1;
    for (var O = y(A); Math.abs(O[1]) >= Math.abs($); ) {
      var G = O[0][0], _ = O[0][1];
      I = b(A[G][G], A[_][_], A[G][_]), A = x(A, I, G, _), R = N(R, I, G, _), O = y(A);
    }
    for (var U = S(T, 0), K = 0; K < T; K++)
      U[K] = A[K][K];
    return D(Ge(U), Ge(R));
  }
  function p(A, C) {
    for (var T = A.length, $ = a(C / T), I, R = new Array(T), B = 0; B < T; B++)
      R[B] = S(T, 0), R[B][B] = 1;
    for (var O = E(A); a(O[1]) >= a($); ) {
      var G = O[0][0], _ = O[0][1];
      I = g(A[G][G], A[_][_], A[G][_]), A = w(A, I, G, _), R = h(R, I, G, _), O = E(A);
    }
    for (var U = S(T, 0), K = 0; K < T; K++)
      U[K] = A[K][K];
    return D(Ge(U), Ge(R));
  }
  function b(A, C, T) {
    var $ = C - A;
    return Math.abs($) <= e.epsilon ? Math.PI / 4 : 0.5 * Math.atan(2 * T / (C - A));
  }
  function g(A, C, T) {
    var $ = n(C, A);
    return a($) <= e.epsilon ? s(-1).acos().div(4) : l(0.5, i(c(2, T, u($))));
  }
  function N(A, C, T, $) {
    for (var I = A.length, R = Math.cos(C), B = Math.sin(C), O = S(I, 0), G = S(I, 0), _ = 0; _ < I; _++)
      O[_] = R * A[_][T] - B * A[_][$], G[_] = B * A[_][T] + R * A[_][$];
    for (var U = 0; U < I; U++)
      A[U][T] = O[U], A[U][$] = G[U];
    return A;
  }
  function h(A, C, T, $) {
    for (var I = A.length, R = o(C), B = f(C), O = S(I, s(0)), G = S(I, s(0)), _ = 0; _ < I; _++)
      O[_] = n(l(R, A[_][T]), l(B, A[_][$])), G[_] = t(l(B, A[_][T]), l(R, A[_][$]));
    for (var U = 0; U < I; U++)
      A[U][T] = O[U], A[U][$] = G[U];
    return A;
  }
  function w(A, C, T, $) {
    for (var I = A.length, R = s(o(C)), B = s(f(C)), O = l(R, R), G = l(B, B), _ = S(I, s(0)), U = S(I, s(0)), K = c(s(2), R, B, A[T][$]), j = t(n(l(O, A[T][T]), K), l(G, A[$][$])), z = m(l(G, A[T][T]), K, l(O, A[$][$])), Q = 0; Q < I; Q++)
      _[Q] = n(l(R, A[T][Q]), l(B, A[$][Q])), U[Q] = t(l(B, A[T][Q]), l(R, A[$][Q]));
    A[T][T] = j, A[$][$] = z, A[T][$] = s(0), A[$][T] = s(0);
    for (var ae = 0; ae < I; ae++)
      ae !== T && ae !== $ && (A[T][ae] = _[ae], A[ae][T] = _[ae], A[$][ae] = U[ae], A[ae][$] = U[ae]);
    return A;
  }
  function x(A, C, T, $) {
    for (var I = A.length, R = Math.cos(C), B = Math.sin(C), O = R * R, G = B * B, _ = S(I, 0), U = S(I, 0), K = O * A[T][T] - 2 * R * B * A[T][$] + G * A[$][$], j = G * A[T][T] + 2 * R * B * A[T][$] + O * A[$][$], z = 0; z < I; z++)
      _[z] = R * A[T][z] - B * A[$][z], U[z] = B * A[T][z] + R * A[$][z];
    A[T][T] = K, A[$][$] = j, A[T][$] = 0, A[$][T] = 0;
    for (var Q = 0; Q < I; Q++)
      Q !== T && Q !== $ && (A[T][Q] = _[Q], A[Q][T] = _[Q], A[$][Q] = U[Q], A[Q][$] = U[Q]);
    return A;
  }
  function y(A) {
    for (var C = A.length, T = 0, $ = [0, 1], I = 0; I < C; I++)
      for (var R = I + 1; R < C; R++)
        Math.abs(T) < Math.abs(A[I][R]) && (T = Math.abs(A[I][R]), $ = [I, R]);
    return [$, T];
  }
  function E(A) {
    for (var C = A.length, T = 0, $ = [0, 1], I = 0; I < C; I++)
      for (var R = I + 1; R < C; R++)
        a(T) < a(A[I][R]) && (T = a(A[I][R]), $ = [I, R]);
    return [$, T];
  }
  function D(A, C) {
    for (var T = A.length, $ = Array(T), I = Array(T), R = 0; R < T; R++)
      I[R] = Array(T);
    for (var B = 0; B < T; B++) {
      for (var O = 0, G = A[0], _ = 0; _ < A.length; _++)
        a(A[_]) < a(G) && (O = _, G = A[O]);
      $[B] = A.splice(O, 1)[0];
      for (var U = 0; U < T; U++)
        I[U][B] = C[U][O], C[U].splice(O, 1);
    }
    return {
      values: $,
      vectors: I
    };
  }
  function S(A, C) {
    for (var T = new Array(A), $ = 0; $ < A; $++)
      T[$] = C;
    return T;
  }
  return v;
}
var R5 = "eigs", I5 = ["config", "typed", "matrix", "addScalar", "equal", "subtract", "abs", "atan", "cos", "sin", "multiplyScalar", "divideScalar", "inv", "bignumber", "multiply", "add", "larger", "column", "flatten", "number", "complex", "sqrt", "diag", "qr", "usolve", "usolveAll", "im", "re", "smaller", "matrixFromColumns", "dot"], P5 = /* @__PURE__ */ q(R5, I5, (r) => {
  var {
    config: e,
    typed: t,
    matrix: n,
    addScalar: a,
    subtract: i,
    equal: o,
    abs: f,
    atan: l,
    cos: u,
    sin: s,
    multiplyScalar: c,
    divideScalar: m,
    inv: v,
    bignumber: d,
    multiply: p,
    add: b,
    larger: g,
    column: N,
    flatten: h,
    number: w,
    complex: x,
    sqrt: y,
    diag: E,
    qr: D,
    usolve: S,
    usolveAll: A,
    im: C,
    re: T,
    smaller: $,
    matrixFromColumns: I,
    dot: R
  } = r, B = $5({
    config: e,
    addScalar: a,
    subtract: i,
    column: N,
    flatten: h,
    equal: o,
    abs: f,
    atan: l,
    cos: u,
    sin: s,
    multiplyScalar: c,
    inv: v,
    bignumber: d,
    complex: x,
    multiply: p,
    add: b
  }), O = F5({
    config: e,
    addScalar: a,
    subtract: i,
    multiply: p,
    multiplyScalar: c,
    flatten: h,
    divideScalar: m,
    sqrt: y,
    abs: f,
    bignumber: d,
    diag: E,
    qr: D,
    inv: v,
    usolve: S,
    usolveAll: A,
    equal: o,
    complex: x,
    larger: g,
    smaller: $,
    matrixFromColumns: I,
    dot: R
  });
  return t("eigs", {
    Array: function(Q) {
      var ae = n(Q);
      return G(ae);
    },
    "Array, number|BigNumber": function(Q, ae) {
      var re = n(Q);
      return G(re, ae);
    },
    Matrix: function(Q) {
      var {
        values: ae,
        vectors: re
      } = G(Q);
      return {
        values: n(ae),
        vectors: n(re)
      };
    },
    "Matrix, number|BigNumber": function(Q, ae) {
      var {
        values: re,
        vectors: fe
      } = G(Q, ae);
      return {
        values: n(re),
        vectors: n(fe)
      };
    }
  });
  function G(z, Q) {
    Q === void 0 && (Q = e.epsilon);
    var ae = z.size();
    if (ae.length !== 2 || ae[0] !== ae[1])
      throw new RangeError("Matrix must be square (size: " + Je(ae) + ")");
    var re = z.toArray(), fe = ae[0];
    if (U(re, fe, Q) && (K(re, fe), _(re, fe, Q))) {
      var de = j(z, re, fe);
      return B(re, fe, Q, de);
    }
    var le = j(z, re, fe);
    return O(re, fe, Q, le);
  }
  function _(z, Q, ae) {
    for (var re = 0; re < Q; re++)
      for (var fe = re; fe < Q; fe++)
        if (g(d(f(i(z[re][fe], z[fe][re]))), ae))
          return !1;
    return !0;
  }
  function U(z, Q, ae) {
    for (var re = 0; re < Q; re++)
      for (var fe = 0; fe < Q; fe++)
        if (g(d(f(C(z[re][fe]))), ae))
          return !1;
    return !0;
  }
  function K(z, Q) {
    for (var ae = 0; ae < Q; ae++)
      for (var re = 0; re < Q; re++)
        z[ae][re] = T(z[ae][re]);
  }
  function j(z, Q, ae) {
    var re = z.datatype();
    if (re === "number" || re === "BigNumber" || re === "Complex")
      return re;
    for (var fe = !1, de = !1, le = !1, ie = 0; ie < ae; ie++)
      for (var ye = 0; ye < ae; ye++) {
        var _e = Q[ie][ye];
        if (Xe(_e) || Si(_e))
          fe = !0;
        else if (rr(_e))
          de = !0;
        else if (on(_e))
          le = !0;
        else
          throw TypeError("Unsupported type in Matrix: " + hr(_e));
      }
    if (de && le && console.warn("Complex BigNumbers not supported, this operation will lose precission."), le) {
      for (var De = 0; De < ae; De++)
        for (var Be = 0; Be < ae; Be++)
          Q[De][Be] = x(Q[De][Be]);
      return "Complex";
    }
    if (de) {
      for (var k = 0; k < ae; k++)
        for (var Z = 0; Z < ae; Z++)
          Q[k][Z] = d(Q[k][Z]);
      return "BigNumber";
    }
    if (fe) {
      for (var oe = 0; oe < ae; oe++)
        for (var H = 0; H < ae; H++)
          Q[oe][H] = w(Q[oe][H]);
      return "number";
    } else
      throw TypeError("Matrix contains unsupported types only.");
  }
}), Tp = "expm", q5 = ["typed", "abs", "add", "identity", "inv", "multiply"], L5 = /* @__PURE__ */ q(Tp, q5, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    identity: a,
    inv: i,
    multiply: o
  } = r;
  return e(Tp, {
    Matrix: function(c) {
      var m = c.size();
      if (m.length !== 2 || m[0] !== m[1])
        throw new RangeError("Matrix must be square (size: " + Je(m) + ")");
      for (var v = m[0], d = 1e-15, p = f(c), b = l(p, d), g = b.q, N = b.j, h = o(c, Math.pow(2, -N)), w = a(v), x = a(v), y = 1, E = h, D = -1, S = 1; S <= g; S++)
        S > 1 && (E = o(E, h), D = -D), y = y * (g - S + 1) / ((2 * g - S + 1) * S), w = n(w, o(y, E)), x = n(x, o(y * D, E));
      for (var A = o(i(x), w), C = 0; C < N; C++)
        A = o(A, A);
      return Vn(c) ? c.createSparseMatrix(A) : A;
    }
  });
  function f(s) {
    for (var c = s.size()[0], m = 0, v = 0; v < c; v++) {
      for (var d = 0, p = 0; p < c; p++)
        d += t(s.get([v, p]));
      m = Math.max(d, m);
    }
    return m;
  }
  function l(s, c) {
    for (var m = 30, v = 0; v < m; v++)
      for (var d = 0; d <= v; d++) {
        var p = v - d;
        if (u(s, d, p) < c)
          return {
            q: d,
            j: p
          };
      }
    throw new Error("Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)");
  }
  function u(s, c, m) {
    for (var v = 1, d = 2; d <= c; d++)
      v *= d;
    for (var p = v, b = c + 1; b <= 2 * c; b++)
      p *= b;
    var g = p * (2 * c + 1);
    return 8 * Math.pow(s / Math.pow(2, m), 2 * c) * v * v / (p * g);
  }
}), Bp = "sqrtm", z5 = ["typed", "abs", "add", "multiply", "map", "sqrt", "subtract", "inv", "size", "max", "identity"], U5 = /* @__PURE__ */ q(Bp, z5, (r) => {
  var {
    typed: e,
    abs: t,
    add: n,
    multiply: a,
    map: i,
    sqrt: o,
    subtract: f,
    inv: l,
    size: u,
    max: s,
    identity: c
  } = r, m = 1e3, v = 1e-6;
  function d(p) {
    var b, g = 0, N = p, h = c(u(p));
    do {
      var w = N;
      if (N = a(0.5, n(w, l(h))), h = a(0.5, n(h, l(w))), b = s(t(f(N, w))), b > v && ++g > m)
        throw new Error("computing square root of matrix: iterative method could not converge");
    } while (b > v);
    return N;
  }
  return e(Bp, {
    "Array | Matrix": function(b) {
      var g = Le(b) ? b.size() : Ye(b);
      switch (g.length) {
        case 1:
          if (g[0] === 1)
            return i(b, o);
          throw new RangeError("Matrix must be square (size: " + Je(g) + ")");
        case 2: {
          var N = g[0], h = g[1];
          if (N === h)
            return d(b);
          throw new RangeError("Matrix must be square (size: " + Je(g) + ")");
        }
        default:
          throw new RangeError("Matrix must be at most two dimensional (size: " + Je(g) + ")");
      }
    }
  });
}), _p = "sylvester", k5 = ["typed", "schur", "matrixFromColumns", "matrix", "multiply", "range", "concat", "transpose", "index", "subset", "add", "subtract", "identity", "lusolve", "abs"], G5 = /* @__PURE__ */ q(_p, k5, (r) => {
  var {
    typed: e,
    schur: t,
    matrixFromColumns: n,
    matrix: a,
    multiply: i,
    range: o,
    concat: f,
    transpose: l,
    index: u,
    subset: s,
    add: c,
    subtract: m,
    identity: v,
    lusolve: d,
    abs: p
  } = r;
  return e(_p, {
    "Matrix, Matrix, Matrix": b,
    "Array, Matrix, Matrix": function(N, h, w) {
      return b(a(N), h, w);
    },
    "Array, Array, Matrix": function(N, h, w) {
      return b(a(N), a(h), w);
    },
    "Array, Matrix, Array": function(N, h, w) {
      return b(a(N), h, a(w));
    },
    "Matrix, Array, Matrix": function(N, h, w) {
      return b(N, a(h), w);
    },
    "Matrix, Array, Array": function(N, h, w) {
      return b(N, a(h), a(w));
    },
    "Matrix, Matrix, Array": function(N, h, w) {
      return b(N, h, a(w));
    },
    "Array, Array, Array": function(N, h, w) {
      return b(a(N), a(h), a(w)).toArray();
    }
  });
  function b(g, N, h) {
    for (var w = N.size()[0], x = g.size()[0], y = t(g), E = y.T, D = y.U, S = t(i(-1, N)), A = S.T, C = S.U, T = i(i(l(D), h), C), $ = o(0, x), I = [], R = (_e, De) => f(_e, De, 1), B = (_e, De) => f(_e, De, 0), O = 0; O < w; O++)
      if (O < w - 1 && p(s(A, u(O + 1, O))) > 1e-5) {
        for (var G = B(s(T, u($, O)), s(T, u($, O + 1))), _ = 0; _ < O; _++)
          G = c(G, B(i(I[_], s(A, u(_, O))), i(I[_], s(A, u(_, O + 1)))));
        var U = i(v(x), i(-1, s(A, u(O, O)))), K = i(v(x), i(-1, s(A, u(O + 1, O)))), j = i(v(x), i(-1, s(A, u(O, O + 1)))), z = i(v(x), i(-1, s(A, u(O + 1, O + 1)))), Q = B(R(c(E, U), K), R(j, c(E, z))), ae = d(Q, G);
        I[O] = ae.subset(u(o(0, x), 0)), I[O + 1] = ae.subset(u(o(x, 2 * x), 0)), O++;
      } else {
        for (var re = s(T, u($, O)), fe = 0; fe < O; fe++)
          re = c(re, i(I[fe], s(A, u(fe, O))));
        var de = s(A, u(O, O)), le = m(E, i(de, v(x)));
        I[O] = d(le, re);
      }
    var ie = a(n(...I)), ye = i(D, i(ie, l(C)));
    return ye;
  }
}), Fp = "schur", V5 = ["typed", "matrix", "identity", "multiply", "qr", "norm", "subtract"], H5 = /* @__PURE__ */ q(Fp, V5, (r) => {
  var {
    typed: e,
    matrix: t,
    identity: n,
    multiply: a,
    qr: i,
    norm: o,
    subtract: f
  } = r;
  return e(Fp, {
    Array: function(s) {
      var c = l(t(s));
      return {
        U: c.U.valueOf(),
        T: c.T.valueOf()
      };
    },
    Matrix: function(s) {
      return l(s);
    }
  });
  function l(u) {
    var s = u.size()[0], c = u, m = n(s), v = 0, d;
    do {
      d = c;
      var p = i(c), b = p.Q, g = p.R;
      if (c = a(g, b), m = a(m, b), v++ > 100)
        break;
    } while (o(f(c, d)) > 1e-4);
    return {
      U: m,
      T: c
    };
  }
}), $p = "lyap", Z5 = ["typed", "matrix", "sylvester", "multiply", "transpose"], Y5 = /* @__PURE__ */ q($p, Z5, (r) => {
  var {
    typed: e,
    matrix: t,
    sylvester: n,
    multiply: a,
    transpose: i
  } = r;
  return e($p, {
    "Matrix, Matrix": function(f, l) {
      return n(f, i(f), a(-1, l));
    },
    "Array, Matrix": function(f, l) {
      return n(t(f), i(t(f)), a(-1, l));
    },
    "Matrix, Array": function(f, l) {
      return n(f, i(t(f)), t(a(-1, l)));
    },
    "Array, Array": function(f, l) {
      return n(t(f), i(t(f)), t(a(-1, l))).toArray();
    }
  });
}), W5 = "divide", J5 = ["typed", "matrix", "multiply", "equalScalar", "divideScalar", "inv"], X5 = /* @__PURE__ */ q(W5, J5, (r) => {
  var {
    typed: e,
    matrix: t,
    multiply: n,
    equalScalar: a,
    divideScalar: i,
    inv: o
  } = r, f = Gr({
    typed: e,
    equalScalar: a
  }), l = Pt({
    typed: e
  });
  return e("divide", gh({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    "Array | Matrix, Array | Matrix": function(s, c) {
      return n(s, o(c));
    },
    "DenseMatrix, any": function(s, c) {
      return l(s, c, i, !1);
    },
    "SparseMatrix, any": function(s, c) {
      return f(s, c, i, !1);
    },
    "Array, any": function(s, c) {
      return l(t(s), c, i, !1).valueOf();
    },
    "any, Array | Matrix": function(s, c) {
      return n(s, o(c));
    }
  }, i.signatures));
}), Rp = "distance", K5 = ["typed", "addScalar", "subtractScalar", "divideScalar", "multiplyScalar", "deepEqual", "sqrt", "abs"], Q5 = /* @__PURE__ */ q(Rp, K5, (r) => {
  var {
    typed: e,
    addScalar: t,
    subtractScalar: n,
    multiplyScalar: a,
    divideScalar: i,
    deepEqual: o,
    sqrt: f,
    abs: l
  } = r;
  return e(Rp, {
    "Array, Array, Array": function(x, y, E) {
      if (x.length === 2 && y.length === 2 && E.length === 2) {
        if (!s(x))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");
        if (!s(y))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");
        if (!s(E))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");
        if (o(y, E))
          throw new TypeError("LinePoint1 should not be same with LinePoint2");
        var D = n(E[1], y[1]), S = n(y[0], E[0]), A = n(a(E[0], y[1]), a(y[0], E[1]));
        return b(x[0], x[1], D, S, A);
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    "Object, Object, Object": function(x, y, E) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(E).length === 2) {
        if (!s(x))
          throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");
        if (!s(y))
          throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers");
        if (!s(E))
          throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers");
        if (o(d(y), d(E)))
          throw new TypeError("LinePoint1 should not be same with LinePoint2");
        if ("pointX" in x && "pointY" in x && "lineOnePtX" in y && "lineOnePtY" in y && "lineTwoPtX" in E && "lineTwoPtY" in E) {
          var D = n(E.lineTwoPtY, y.lineOnePtY), S = n(y.lineOnePtX, E.lineTwoPtX), A = n(a(E.lineTwoPtX, y.lineOnePtY), a(y.lineOnePtX, E.lineTwoPtY));
          return b(x.pointX, x.pointY, D, S, A);
        } else
          throw new TypeError("Key names do not match");
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    "Array, Array": function(x, y) {
      if (x.length === 2 && y.length === 3) {
        if (!s(x))
          throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");
        if (!c(y))
          throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");
        return b(x[0], x[1], y[0], y[1], y[2]);
      } else if (x.length === 3 && y.length === 6) {
        if (!c(x))
          throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");
        if (!v(y))
          throw new TypeError("Array with 6 numbers or BigNumbers expected for second argument");
        return g(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      } else if (x.length === y.length && x.length > 0) {
        if (!m(x))
          throw new TypeError("All values of an array should be numbers or BigNumbers");
        if (!m(y))
          throw new TypeError("All values of an array should be numbers or BigNumbers");
        return N(x, y);
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    "Object, Object": function(x, y) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
        if (!s(x))
          throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");
        if (!c(y))
          throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers");
        if ("pointX" in x && "pointY" in x && "xCoeffLine" in y && "yCoeffLine" in y && "constant" in y)
          return b(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        throw new TypeError("Key names do not match");
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
        if (!c(x))
          throw new TypeError("Values of pointX, pointY and pointZ should be numbers or BigNumbers");
        if (!v(y))
          throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers or BigNumbers");
        if ("pointX" in x && "pointY" in x && "x0" in y && "y0" in y && "z0" in y && "a" in y && "b" in y && "c" in y)
          return g(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        throw new TypeError("Key names do not match");
      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
        if (!s(x))
          throw new TypeError("Values of pointOneX and pointOneY should be numbers or BigNumbers");
        if (!s(y))
          throw new TypeError("Values of pointTwoX and pointTwoY should be numbers or BigNumbers");
        if ("pointOneX" in x && "pointOneY" in x && "pointTwoX" in y && "pointTwoY" in y)
          return N([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
        throw new TypeError("Key names do not match");
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
        if (!c(x))
          throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers");
        if (!c(y))
          throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers");
        if ("pointOneX" in x && "pointOneY" in x && "pointOneZ" in x && "pointTwoX" in y && "pointTwoY" in y && "pointTwoZ" in y)
          return N([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
        throw new TypeError("Key names do not match");
      } else
        throw new TypeError("Invalid Arguments: Try again");
    },
    Array: function(x) {
      if (!p(x))
        throw new TypeError("Incorrect array format entered for pairwise distance calculation");
      return h(x);
    }
  });
  function u(w) {
    return typeof w == "number" || rr(w);
  }
  function s(w) {
    return w.constructor !== Array && (w = d(w)), u(w[0]) && u(w[1]);
  }
  function c(w) {
    return w.constructor !== Array && (w = d(w)), u(w[0]) && u(w[1]) && u(w[2]);
  }
  function m(w) {
    return Array.isArray(w) || (w = d(w)), w.every(u);
  }
  function v(w) {
    return w.constructor !== Array && (w = d(w)), u(w[0]) && u(w[1]) && u(w[2]) && u(w[3]) && u(w[4]) && u(w[5]);
  }
  function d(w) {
    for (var x = Object.keys(w), y = [], E = 0; E < x.length; E++)
      y.push(w[x[E]]);
    return y;
  }
  function p(w) {
    if (w[0].length === 2 && u(w[0][0]) && u(w[0][1])) {
      if (w.some((x) => x.length !== 2 || !u(x[0]) || !u(x[1])))
        return !1;
    } else if (w[0].length === 3 && u(w[0][0]) && u(w[0][1]) && u(w[0][2])) {
      if (w.some((x) => x.length !== 3 || !u(x[0]) || !u(x[1]) || !u(x[2])))
        return !1;
    } else
      return !1;
    return !0;
  }
  function b(w, x, y, E, D) {
    var S = l(t(t(a(y, w), a(E, x)), D)), A = f(t(a(y, y), a(E, E)));
    return i(S, A);
  }
  function g(w, x, y, E, D, S, A, C, T) {
    var $ = [n(a(n(D, x), T), a(n(S, y), C)), n(a(n(S, y), A), a(n(E, w), T)), n(a(n(E, w), C), a(n(D, x), A))];
    $ = f(t(t(a($[0], $[0]), a($[1], $[1])), a($[2], $[2])));
    var I = f(t(t(a(A, A), a(C, C)), a(T, T)));
    return i($, I);
  }
  function N(w, x) {
    for (var y = w.length, E = 0, D = 0, S = 0; S < y; S++)
      D = n(w[S], x[S]), E = t(a(D, D), E);
    return f(E);
  }
  function h(w) {
    for (var x = [], y = [], E = [], D = 0; D < w.length - 1; D++)
      for (var S = D + 1; S < w.length; S++)
        w[0].length === 2 ? (y = [w[D][0], w[D][1]], E = [w[S][0], w[S][1]]) : w[0].length === 3 && (y = [w[D][0], w[D][1], w[D][2]], E = [w[S][0], w[S][1], w[S][2]]), x.push(N(y, E));
    return x;
  }
}), j5 = "intersect", e$ = ["typed", "config", "abs", "add", "addScalar", "matrix", "multiply", "multiplyScalar", "divideScalar", "subtract", "smaller", "equalScalar", "flatten", "isZero", "isNumeric"], r$ = /* @__PURE__ */ q(j5, e$, (r) => {
  var {
    typed: e,
    config: t,
    abs: n,
    add: a,
    addScalar: i,
    matrix: o,
    multiply: f,
    multiplyScalar: l,
    divideScalar: u,
    subtract: s,
    smaller: c,
    equalScalar: m,
    flatten: v,
    isZero: d,
    isNumeric: p
  } = r;
  return e("intersect", {
    "Array, Array, Array": b,
    "Array, Array, Array, Array": g,
    "Matrix, Matrix, Matrix": function(C, T, $) {
      var I = b(C.valueOf(), T.valueOf(), $.valueOf());
      return I === null ? null : o(I);
    },
    "Matrix, Matrix, Matrix, Matrix": function(C, T, $, I) {
      var R = g(C.valueOf(), T.valueOf(), $.valueOf(), I.valueOf());
      return R === null ? null : o(R);
    }
  });
  function b(A, C, T) {
    if (A = N(A), C = N(C), T = N(T), !w(A))
      throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");
    if (!w(C))
      throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");
    if (!x(T))
      throw new TypeError("Array with 4 numbers expected as third argument");
    return S(A[0], A[1], A[2], C[0], C[1], C[2], T[0], T[1], T[2], T[3]);
  }
  function g(A, C, T, $) {
    if (A = N(A), C = N(C), T = N(T), $ = N($), A.length === 2) {
      if (!h(A))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");
      if (!h(C))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");
      if (!h(T))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");
      if (!h($))
        throw new TypeError("Array with 2 numbers or BigNumbers expected for fourth argument");
      return y(A, C, T, $);
    } else if (A.length === 3) {
      if (!w(A))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");
      if (!w(C))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");
      if (!w(T))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for third argument");
      if (!w($))
        throw new TypeError("Array with 3 numbers or BigNumbers expected for fourth argument");
      return D(A[0], A[1], A[2], C[0], C[1], C[2], T[0], T[1], T[2], $[0], $[1], $[2]);
    } else
      throw new TypeError("Arrays with two or thee dimensional points expected");
  }
  function N(A) {
    return A.length === 1 ? A[0] : A.length > 1 && Array.isArray(A[0]) && A.every((C) => Array.isArray(C) && C.length === 1) ? v(A) : A;
  }
  function h(A) {
    return A.length === 2 && p(A[0]) && p(A[1]);
  }
  function w(A) {
    return A.length === 3 && p(A[0]) && p(A[1]) && p(A[2]);
  }
  function x(A) {
    return A.length === 4 && p(A[0]) && p(A[1]) && p(A[2]) && p(A[3]);
  }
  function y(A, C, T, $) {
    var I = A, R = T, B = s(I, C), O = s(R, $), G = s(l(B[0], O[1]), l(O[0], B[1]));
    if (d(G) || c(n(G), t.epsilon))
      return null;
    var _ = l(O[0], I[1]), U = l(O[1], I[0]), K = l(O[0], R[1]), j = l(O[1], R[0]), z = u(i(s(s(_, U), K), j), G);
    return a(f(B, z), I);
  }
  function E(A, C, T, $, I, R, B, O, G, _, U, K) {
    var j = l(s(A, C), s(T, $)), z = l(s(I, R), s(B, O)), Q = l(s(G, _), s(U, K));
    return i(i(j, z), Q);
  }
  function D(A, C, T, $, I, R, B, O, G, _, U, K) {
    var j = E(A, B, _, B, C, O, U, O, T, G, K, G), z = E(_, B, $, A, U, O, I, C, K, G, R, T), Q = E(A, B, $, A, C, O, I, C, T, G, R, T), ae = E(_, B, _, B, U, O, U, O, K, G, K, G), re = E($, A, $, A, I, C, I, C, R, T, R, T), fe = s(l(j, z), l(Q, ae)), de = s(l(re, ae), l(z, z));
    if (d(de))
      return null;
    var le = u(fe, de), ie = u(i(j, l(le, z)), ae), ye = i(A, l(le, s($, A))), _e = i(C, l(le, s(I, C))), De = i(T, l(le, s(R, T))), Be = i(B, l(ie, s(_, B))), k = i(O, l(ie, s(U, O))), Z = i(G, l(ie, s(K, G)));
    return m(ye, Be) && m(_e, k) && m(De, Z) ? [ye, _e, De] : null;
  }
  function S(A, C, T, $, I, R, B, O, G, _) {
    var U = l(A, B), K = l($, B), j = l(C, O), z = l(I, O), Q = l(T, G), ae = l(R, G), re = s(s(s(_, U), j), Q), fe = s(s(s(i(i(K, z), ae), U), j), Q), de = u(re, fe), le = i(A, l(de, s($, A))), ie = i(C, l(de, s(I, C))), ye = i(T, l(de, s(R, T)));
    return [le, ie, ye];
  }
}), Ip = "sum", t$ = ["typed", "config", "add", "numeric"], cg = /* @__PURE__ */ q(Ip, t$, (r) => {
  var {
    typed: e,
    config: t,
    add: n,
    numeric: a
  } = r;
  return e(Ip, {
    // sum([a, b, c, d, ...])
    "Array | Matrix": i,
    // sum([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": o,
    // sum(a, b, c, d, ...)
    "...": function(l) {
      if (Wa(l))
        throw new TypeError("Scalar values expected in function sum");
      return i(l);
    }
  });
  function i(f) {
    var l;
    return ln(f, function(u) {
      try {
        l = l === void 0 ? u : n(l, u);
      } catch (s) {
        throw at(s, "sum", u);
      }
    }), l === void 0 && (l = a(0, t.number)), typeof l == "string" && (l = a(l, t.number)), l;
  }
  function o(f, l) {
    try {
      var u = vs(f, l, n);
      return u;
    } catch (s) {
      throw at(s, "sum");
    }
  }
}), yo = "cumsum", n$ = ["typed", "add", "unaryPlus"], lg = /* @__PURE__ */ q(yo, n$, (r) => {
  var {
    typed: e,
    add: t,
    unaryPlus: n
  } = r;
  return e(yo, {
    // sum([a, b, c, d, ...])
    Array: a,
    Matrix: function(u) {
      return u.create(a(u.valueOf()));
    },
    // sum([a, b, c, d, ...], dim)
    "Array, number | BigNumber": o,
    "Matrix, number | BigNumber": function(u, s) {
      return u.create(o(u.valueOf(), s));
    },
    // cumsum(a, b, c, d, ...)
    "...": function(u) {
      if (Wa(u))
        throw new TypeError("All values expected to be scalar in function cumsum");
      return a(u);
    }
  });
  function a(l) {
    try {
      return i(l);
    } catch (u) {
      throw at(u, yo);
    }
  }
  function i(l) {
    if (l.length === 0)
      return [];
    for (var u = [n(l[0])], s = 1; s < l.length; ++s)
      u.push(t(u[s - 1], l[s]));
    return u;
  }
  function o(l, u) {
    var s = Ye(l);
    if (u < 0 || u >= s.length)
      throw new Rt(u, s.length);
    try {
      return f(l, u);
    } catch (c) {
      throw at(c, yo);
    }
  }
  function f(l, u) {
    var s, c, m;
    if (u <= 0) {
      var v = l[0][0];
      if (Array.isArray(v)) {
        for (m = Yh(l), c = [], s = 0; s < m.length; s++)
          c[s] = f(m[s], u - 1);
        return c;
      } else
        return i(l);
    } else {
      for (c = [], s = 0; s < l.length; s++)
        c[s] = f(l[s], u - 1);
      return c;
    }
  }
}), Pp = "mean", a$ = ["typed", "add", "divide"], fg = /* @__PURE__ */ q(Pp, a$, (r) => {
  var {
    typed: e,
    add: t,
    divide: n
  } = r;
  return e(Pp, {
    // mean([a, b, c, d, ...])
    "Array | Matrix": i,
    // mean([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": a,
    // mean(a, b, c, d, ...)
    "...": function(f) {
      if (Wa(f))
        throw new TypeError("Scalar values expected in function mean");
      return i(f);
    }
  });
  function a(o, f) {
    try {
      var l = vs(o, f, t), u = Array.isArray(o) ? Ye(o) : o.size();
      return n(l, u[f]);
    } catch (s) {
      throw at(s, "mean");
    }
  }
  function i(o) {
    var f, l = 0;
    if (ln(o, function(u) {
      try {
        f = f === void 0 ? u : t(f, u), l++;
      } catch (s) {
        throw at(s, "mean", u);
      }
    }), l === 0)
      throw new Error("Cannot calculate the mean of an empty array");
    return n(f, l);
  }
}), qp = "median", i$ = ["typed", "add", "divide", "compare", "partitionSelect"], o$ = /* @__PURE__ */ q(qp, i$, (r) => {
  var {
    typed: e,
    add: t,
    divide: n,
    compare: a,
    partitionSelect: i
  } = r;
  function o(u) {
    try {
      u = or(u.valueOf());
      var s = u.length;
      if (s === 0)
        throw new Error("Cannot calculate median of an empty array");
      if (s % 2 === 0) {
        for (var c = s / 2 - 1, m = i(u, c + 1), v = u[c], d = 0; d < c; ++d)
          a(u[d], v) > 0 && (v = u[d]);
        return l(v, m);
      } else {
        var p = i(u, (s - 1) / 2);
        return f(p);
      }
    } catch (b) {
      throw at(b, "median");
    }
  }
  var f = e({
    "number | BigNumber | Complex | Unit": function(s) {
      return s;
    }
  }), l = e({
    "number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit": function(s, c) {
      return n(t(s, c), 2);
    }
  });
  return e(qp, {
    // median([a, b, c, d, ...])
    "Array | Matrix": o,
    // median([a, b, c, d, ...], dim)
    "Array | Matrix, number | BigNumber": function(s, c) {
      throw new Error("median(A, dim) is not yet supported");
    },
    // median(a, b, c, d, ...)
    "...": function(s) {
      if (Wa(s))
        throw new TypeError("Scalar values expected in function median");
      return o(s);
    }
  });
}), Lp = "mad", s$ = ["typed", "abs", "map", "median", "subtract"], u$ = /* @__PURE__ */ q(Lp, s$, (r) => {
  var {
    typed: e,
    abs: t,
    map: n,
    median: a,
    subtract: i
  } = r;
  return e(Lp, {
    // mad([a, b, c, d, ...])
    "Array | Matrix": o,
    // mad(a, b, c, d, ...)
    "...": function(l) {
      return o(l);
    }
  });
  function o(f) {
    if (f = or(f.valueOf()), f.length === 0)
      throw new Error("Cannot calculate median absolute deviation (mad) of an empty array");
    try {
      var l = a(f);
      return a(n(f, function(u) {
        return t(i(u, l));
      }));
    } catch (u) {
      throw u instanceof TypeError && u.message.indexOf("median") !== -1 ? new TypeError(u.message.replace("median", "mad")) : at(u, "mad");
    }
  }
}), yu = "unbiased", zp = "variance", c$ = ["typed", "add", "subtract", "multiply", "divide", "apply", "isNaN"], mg = /* @__PURE__ */ q(zp, c$, (r) => {
  var {
    typed: e,
    add: t,
    subtract: n,
    multiply: a,
    divide: i,
    apply: o,
    isNaN: f
  } = r;
  return e(zp, {
    // variance([a, b, c, d, ...])
    "Array | Matrix": function(c) {
      return l(c, yu);
    },
    // variance([a, b, c, d, ...], normalization)
    "Array | Matrix, string": l,
    // variance([a, b, c, c, ...], dim)
    "Array | Matrix, number | BigNumber": function(c, m) {
      return u(c, m, yu);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    "Array | Matrix, number | BigNumber, string": u,
    // variance(a, b, c, d, ...)
    "...": function(c) {
      return l(c, yu);
    }
  });
  function l(s, c) {
    var m, v = 0;
    if (s.length === 0)
      throw new SyntaxError("Function variance requires one or more parameters (0 provided)");
    if (ln(s, function(b) {
      try {
        m = m === void 0 ? b : t(m, b), v++;
      } catch (g) {
        throw at(g, "variance", b);
      }
    }), v === 0)
      throw new Error("Cannot calculate variance of an empty array");
    var d = i(m, v);
    if (m = void 0, ln(s, function(b) {
      var g = n(b, d);
      m = m === void 0 ? a(g, g) : t(m, a(g, g));
    }), f(m))
      return m;
    switch (c) {
      case "uncorrected":
        return i(m, v);
      case "biased":
        return i(m, v + 1);
      case "unbiased": {
        var p = rr(m) ? m.mul(0) : 0;
        return v === 1 ? p : i(m, v - 1);
      }
      default:
        throw new Error('Unknown normalization "' + c + '". Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }
  function u(s, c, m) {
    try {
      if (s.length === 0)
        throw new SyntaxError("Function variance requires one or more parameters (0 provided)");
      return o(s, c, (v) => l(v, m));
    } catch (v) {
      throw at(v, "variance");
    }
  }
}), Up = "quantileSeq", l$ = ["typed", "?bignumber", "add", "subtract", "divide", "multiply", "partitionSelect", "compare", "isInteger", "smaller", "smallerEq", "larger"], vg = /* @__PURE__ */ q(Up, l$, (r) => {
  var {
    typed: e,
    bignumber: t,
    add: n,
    subtract: a,
    divide: i,
    multiply: o,
    partitionSelect: f,
    compare: l,
    isInteger: u,
    smaller: s,
    smallerEq: c,
    larger: m
  } = r, v = Pc({
    typed: e,
    isInteger: u
  });
  return e(Up, {
    "Array | Matrix, number | BigNumber": (N, h) => p(N, h, !1),
    "Array | Matrix, number | BigNumber, number": (N, h, w) => d(N, h, !1, w, p),
    "Array | Matrix, number | BigNumber, boolean": p,
    "Array | Matrix, number | BigNumber, boolean, number": (N, h, w, x) => d(N, h, w, x, p),
    "Array | Matrix, Array | Matrix": (N, h) => b(N, h, !1),
    "Array | Matrix, Array | Matrix, number": (N, h, w) => d(N, h, !1, w, b),
    "Array | Matrix, Array | Matrix, boolean": b,
    "Array | Matrix, Array | Matrix, boolean, number": (N, h, w, x) => d(N, h, w, x, b)
  });
  function d(N, h, w, x, y) {
    return v(N, x, (E) => y(E, h, w));
  }
  function p(N, h, w) {
    var x, y = N.valueOf();
    if (s(h, 0))
      throw new Error("N/prob must be non-negative");
    if (c(h, 1))
      return Xe(h) ? g(y, h, w) : t(g(y, h, w));
    if (m(h, 1)) {
      if (!u(h))
        throw new Error("N must be a positive integer");
      if (m(h, 4294967295))
        throw new Error("N must be less than or equal to 2^32-1, as that is the maximum length of an Array");
      var E = n(h, 1);
      x = [];
      for (var D = 0; s(D, h); D++) {
        var S = i(D + 1, E);
        x.push(g(y, S, w));
      }
      return Xe(h) ? x : t(x);
    }
  }
  function b(N, h, w) {
    for (var x = N.valueOf(), y = h.valueOf(), E = [], D = 0; D < y.length; ++D)
      E.push(g(x, y[D], w));
    return E;
  }
  function g(N, h, w) {
    var x = or(N), y = x.length;
    if (y === 0)
      throw new Error("Cannot calculate quantile of an empty sequence");
    var E = Xe(h) ? h * (y - 1) : h.times(y - 1), D = Xe(h) ? Math.floor(E) : E.floor().toNumber(), S = Xe(h) ? E % 1 : E.minus(D);
    if (u(E))
      return w ? x[E] : f(x, Xe(h) ? E : E.valueOf());
    var A, C;
    if (w)
      A = x[D], C = x[D + 1];
    else {
      C = f(x, D + 1), A = x[D];
      for (var T = 0; T < D; ++T)
        l(x[T], A) > 0 && (A = x[T]);
    }
    return n(o(A, a(1, S)), o(C, S));
  }
}), kp = "std", f$ = ["typed", "map", "sqrt", "variance"], pg = /* @__PURE__ */ q(kp, f$, (r) => {
  var {
    typed: e,
    map: t,
    sqrt: n,
    variance: a
  } = r;
  return e(kp, {
    // std([a, b, c, d, ...])
    "Array | Matrix": i,
    // std([a, b, c, d, ...], normalization)
    "Array | Matrix, string": i,
    // std([a, b, c, c, ...], dim)
    "Array | Matrix, number | BigNumber": i,
    // std([a, b, c, c, ...], dim, normalization)
    "Array | Matrix, number | BigNumber, string": i,
    // std(a, b, c, d, ...)
    "...": function(f) {
      return i(f);
    }
  });
  function i(o, f) {
    if (o.length === 0)
      throw new SyntaxError("Function std requires one or more parameters (0 provided)");
    try {
      var l = a.apply(null, arguments);
      return Cn(l) ? t(l, n) : n(l);
    } catch (u) {
      throw u instanceof TypeError && u.message.indexOf(" variance") !== -1 ? new TypeError(u.message.replace(" variance", " std")) : u;
    }
  }
}), Gp = "corr", m$ = ["typed", "matrix", "mean", "sqrt", "sum", "add", "subtract", "multiply", "pow", "divide"], v$ = /* @__PURE__ */ q(Gp, m$, (r) => {
  var {
    typed: e,
    matrix: t,
    sqrt: n,
    sum: a,
    add: i,
    subtract: o,
    multiply: f,
    pow: l,
    divide: u
  } = r;
  return e(Gp, {
    "Array, Array": function(v, d) {
      return s(v, d);
    },
    "Matrix, Matrix": function(v, d) {
      var p = s(v.toArray(), d.toArray());
      return Array.isArray(p) ? t(p) : p;
    }
  });
  function s(m, v) {
    var d = [];
    if (Array.isArray(m[0]) && Array.isArray(v[0])) {
      if (m.length !== v.length)
        throw new SyntaxError("Dimension mismatch. Array A and B must have the same length.");
      for (var p = 0; p < m.length; p++) {
        if (m[p].length !== v[p].length)
          throw new SyntaxError("Dimension mismatch. Array A and B must have the same number of elements.");
        d.push(c(m[p], v[p]));
      }
      return d;
    } else {
      if (m.length !== v.length)
        throw new SyntaxError("Dimension mismatch. Array A and B must have the same number of elements.");
      return c(m, v);
    }
  }
  function c(m, v) {
    var d = m.length, p = a(m), b = a(v), g = m.reduce((y, E, D) => i(y, f(E, v[D])), 0), N = a(m.map((y) => l(y, 2))), h = a(v.map((y) => l(y, 2))), w = o(f(d, g), f(p, b)), x = n(f(o(f(d, N), l(p, 2)), o(f(d, h), l(b, 2))));
    return u(w, x);
  }
}), Vp = "combinations", p$ = ["typed"], d$ = /* @__PURE__ */ q(Vp, p$, (r) => {
  var {
    typed: e
  } = r;
  return e(Vp, {
    "number, number": h0,
    "BigNumber, BigNumber": function(n, a) {
      var i = n.constructor, o, f, l = n.minus(a), u = new i(1);
      if (!Hp(n) || !Hp(a))
        throw new TypeError("Positive integer value expected in function combinations");
      if (a.gt(n))
        throw new TypeError("k must be less than n in function combinations");
      if (o = u, a.lt(l))
        for (f = u; f.lte(l); f = f.plus(u))
          o = o.times(a.plus(f)).dividedBy(f);
      else
        for (f = u; f.lte(a); f = f.plus(u))
          o = o.times(l.plus(f)).dividedBy(f);
      return o;
    }
    // TODO: implement support for collection in combinations
  });
});
function Hp(r) {
  return r.isInteger() && r.gte(0);
}
var Zp = "combinationsWithRep", h$ = ["typed"], g$ = /* @__PURE__ */ q(Zp, h$, (r) => {
  var {
    typed: e
  } = r;
  return e(Zp, {
    "number, number": function(n, a) {
      if (!Ie(n) || n < 0)
        throw new TypeError("Positive integer value expected in function combinationsWithRep");
      if (!Ie(a) || a < 0)
        throw new TypeError("Positive integer value expected in function combinationsWithRep");
      if (n < 1)
        throw new TypeError("k must be less than or equal to n + k - 1");
      if (a < n - 1) {
        var i = nn(n, n + a - 1);
        return i / nn(1, a);
      }
      var o = nn(a + 1, n + a - 1);
      return o / nn(1, n - 1);
    },
    "BigNumber, BigNumber": function(n, a) {
      var i = n.constructor, o, f, l = new i(1), u = n.minus(l);
      if (!Yp(n) || !Yp(a))
        throw new TypeError("Positive integer value expected in function combinationsWithRep");
      if (n.lt(l))
        throw new TypeError("k must be less than or equal to n + k - 1 in function combinationsWithRep");
      if (o = l, a.lt(u))
        for (f = l; f.lte(u); f = f.plus(l))
          o = o.times(a.plus(f)).dividedBy(f);
      else
        for (f = l; f.lte(a); f = f.plus(l))
          o = o.times(u.plus(f)).dividedBy(f);
      return o;
    }
  });
});
function Yp(r) {
  return r.isInteger() && r.gte(0);
}
var Wp = "gamma", y$ = ["typed", "config", "multiplyScalar", "pow", "BigNumber", "Complex"], b$ = /* @__PURE__ */ q(Wp, y$, (r) => {
  var {
    typed: e,
    config: t,
    multiplyScalar: n,
    pow: a,
    BigNumber: i,
    Complex: o
  } = r;
  function f(u) {
    if (u.im === 0)
      return Lo(u.re);
    if (u.re < 0.5) {
      var s = new o(1 - u.re, -u.im), c = new o(Math.PI * u.re, Math.PI * u.im);
      return new o(Math.PI).div(c.sin()).div(f(s));
    }
    u = new o(u.re - 1, u.im);
    for (var m = new o(Ta[0], 0), v = 1; v < Ta.length; ++v) {
      var d = new o(Ta[v], 0);
      m = m.add(d.div(u.add(v)));
    }
    var p = new o(u.re + w0 + 0.5, u.im), b = Math.sqrt(2 * Math.PI), g = p.pow(u.add(0.5)), N = p.neg().exp();
    return m.mul(b).mul(g).mul(N);
  }
  return e(Wp, {
    number: Lo,
    Complex: f,
    BigNumber: function(s) {
      if (s.isInteger())
        return s.isNegative() || s.isZero() ? new i(1 / 0) : l(s.minus(1));
      if (!s.isFinite())
        return new i(s.isNegative() ? NaN : 1 / 0);
      throw new Error("Integer BigNumber expected");
    }
  });
  function l(u) {
    if (u < 8)
      return new i([1, 1, 2, 6, 24, 120, 720, 5040][u]);
    var s = t.precision + (Math.log(u.toNumber()) | 0), c = i.clone({
      precision: s
    });
    if (u % 2 === 1)
      return u.times(l(new i(u - 1)));
    for (var m = u, v = new c(u), d = u.toNumber(); m > 2; )
      m -= 2, d += m, v = v.times(d);
    return new i(v.toPrecision(i.precision));
  }
}), Jp = "lgamma", x$ = ["Complex", "typed"], w$ = /* @__PURE__ */ q(Jp, x$, (r) => {
  var {
    Complex: e,
    typed: t
  } = r, n = 7, a = 7, i = [-0.029550653594771242, 0.00641025641025641, -0.0019175269175269176, 8417508417508417e-19, -5952380952380953e-19, 7936507936507937e-19, -0.002777777777777778, 0.08333333333333333];
  return t(Jp, {
    number: zo,
    Complex: o,
    BigNumber: function() {
      throw new Error("mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber");
    }
  });
  function o(u) {
    var s = 6.283185307179586, c = 1.1447298858494002, m = 0.1;
    if (u.isNaN())
      return new e(NaN, NaN);
    if (u.im === 0)
      return new e(zo(u.re), 0);
    if (u.re >= n || Math.abs(u.im) >= a)
      return f(u);
    if (u.re <= m) {
      var v = uw(s, u.im) * Math.floor(0.5 * u.re + 0.25), d = u.mul(Math.PI).sin().log(), p = o(new e(1 - u.re, -u.im));
      return new e(c, v).sub(d).sub(p);
    } else
      return u.im >= 0 ? l(u) : l(u.conjugate()).conjugate();
  }
  function f(u) {
    for (var s = u.sub(0.5).mul(u.log()).sub(u).add(N0), c = new e(1, 0).div(u), m = c.div(u), v = i[0], d = i[1], p = 2 * m.re, b = m.re * m.re + m.im * m.im, g = 2; g < 8; g++) {
      var N = d;
      d = -b * v + i[g], v = p * v + N;
    }
    var h = c.mul(m.mul(v).add(d));
    return s.add(h);
  }
  function l(u) {
    var s = 0, c = 0, m = u;
    for (u = u.add(1); u.re <= n; ) {
      m = m.mul(u);
      var v = m.im < 0 ? 1 : 0;
      v !== 0 && c === 0 && s++, c = v, u = u.add(1);
    }
    return f(u).sub(m.log()).sub(new e(0, s * 2 * Math.PI * 1));
  }
}), Xp = "factorial", N$ = ["typed", "gamma"], A$ = /* @__PURE__ */ q(Xp, N$, (r) => {
  var {
    typed: e,
    gamma: t
  } = r;
  return e(Xp, {
    number: function(a) {
      if (a < 0)
        throw new Error("Value must be non-negative");
      return t(a + 1);
    },
    BigNumber: function(a) {
      if (a.isNegative())
        throw new Error("Value must be non-negative");
      return t(a.plus(1));
    },
    "Array | Matrix": e.referToSelf((n) => (a) => je(a, n))
  });
}), Kp = "kldivergence", E$ = ["typed", "matrix", "divide", "sum", "multiply", "map", "dotDivide", "log", "isNumeric"], D$ = /* @__PURE__ */ q(Kp, E$, (r) => {
  var {
    typed: e,
    matrix: t,
    divide: n,
    sum: a,
    multiply: i,
    map: o,
    dotDivide: f,
    log: l,
    isNumeric: u
  } = r;
  return e(Kp, {
    "Array, Array": function(m, v) {
      return s(t(m), t(v));
    },
    "Matrix, Array": function(m, v) {
      return s(m, t(v));
    },
    "Array, Matrix": function(m, v) {
      return s(t(m), v);
    },
    "Matrix, Matrix": function(m, v) {
      return s(m, v);
    }
  });
  function s(c, m) {
    var v = m.size().length, d = c.size().length;
    if (v > 1)
      throw new Error("first object must be one dimensional");
    if (d > 1)
      throw new Error("second object must be one dimensional");
    if (v !== d)
      throw new Error("Length of two vectors must be equal");
    var p = a(c);
    if (p === 0)
      throw new Error("Sum of elements in first object must be non zero");
    var b = a(m);
    if (b === 0)
      throw new Error("Sum of elements in second object must be non zero");
    var g = n(c, a(c)), N = n(m, a(m)), h = a(i(g, o(f(g, N), (w) => l(w))));
    return u(h) ? h : Number.NaN;
  }
}), Qp = "multinomial", S$ = ["typed", "add", "divide", "multiply", "factorial", "isInteger", "isPositive"], C$ = /* @__PURE__ */ q(Qp, S$, (r) => {
  var {
    typed: e,
    add: t,
    divide: n,
    multiply: a,
    factorial: i,
    isInteger: o,
    isPositive: f
  } = r;
  return e(Qp, {
    "Array | Matrix": function(u) {
      var s = 0, c = 1;
      return ln(u, function(m) {
        if (!o(m) || !f(m))
          throw new TypeError("Positive integer value expected in function multinomial");
        s = t(s, m), c = a(c, i(m));
      }), n(i(s), c);
    }
  });
}), jp = "permutations", M$ = ["typed", "factorial"], O$ = /* @__PURE__ */ q(jp, M$, (r) => {
  var {
    typed: e,
    factorial: t
  } = r;
  return e(jp, {
    "number | BigNumber": t,
    "number, number": function(a, i) {
      if (!Ie(a) || a < 0)
        throw new TypeError("Positive integer value expected in function permutations");
      if (!Ie(i) || i < 0)
        throw new TypeError("Positive integer value expected in function permutations");
      if (i > a)
        throw new TypeError("second argument k must be less than or equal to first argument n");
      return nn(a - i + 1, a);
    },
    "BigNumber, BigNumber": function(a, i) {
      var o, f;
      if (!ed(a) || !ed(i))
        throw new TypeError("Positive integer value expected in function permutations");
      if (i.gt(a))
        throw new TypeError("second argument k must be less than or equal to first argument n");
      var l = a.mul(0).add(1);
      for (o = l, f = a.minus(i).plus(1); f.lte(a); f = f.plus(1))
        o = o.times(f);
      return o;
    }
    // TODO: implement support for collection in permutations
  });
});
function ed(r) {
  return r.isInteger() && r.gte(0);
}
var Vc = { exports: {} };
Vc.exports;
(function(r) {
  (function(e, t, n) {
    function a(l) {
      var u = this, s = f();
      u.next = function() {
        var c = 2091639 * u.s0 + u.c * 23283064365386963e-26;
        return u.s0 = u.s1, u.s1 = u.s2, u.s2 = c - (u.c = c | 0);
      }, u.c = 1, u.s0 = s(" "), u.s1 = s(" "), u.s2 = s(" "), u.s0 -= s(l), u.s0 < 0 && (u.s0 += 1), u.s1 -= s(l), u.s1 < 0 && (u.s1 += 1), u.s2 -= s(l), u.s2 < 0 && (u.s2 += 1), s = null;
    }
    function i(l, u) {
      return u.c = l.c, u.s0 = l.s0, u.s1 = l.s1, u.s2 = l.s2, u;
    }
    function o(l, u) {
      var s = new a(l), c = u && u.state, m = s.next;
      return m.int32 = function() {
        return s.next() * 4294967296 | 0;
      }, m.double = function() {
        return m() + (m() * 2097152 | 0) * 11102230246251565e-32;
      }, m.quick = m, c && (typeof c == "object" && i(c, s), m.state = function() {
        return i(s, {});
      }), m;
    }
    function f() {
      var l = 4022871197, u = function(s) {
        s = String(s);
        for (var c = 0; c < s.length; c++) {
          l += s.charCodeAt(c);
          var m = 0.02519603282416938 * l;
          l = m >>> 0, m -= l, m *= l, l = m >>> 0, m -= l, l += m * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return u;
    }
    t && t.exports ? t.exports = o : n && n.amd ? n(function() {
      return o;
    }) : this.alea = o;
  })(
    Xn,
    r,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(Vc);
var T$ = Vc.exports, Hc = { exports: {} };
Hc.exports;
(function(r) {
  (function(e, t, n) {
    function a(f) {
      var l = this, u = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var c = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ c ^ c >>> 8;
      }, f === (f | 0) ? l.x = f : u += f;
      for (var s = 0; s < u.length + 64; s++)
        l.x ^= u.charCodeAt(s) | 0, l.next();
    }
    function i(f, l) {
      return l.x = f.x, l.y = f.y, l.z = f.z, l.w = f.w, l;
    }
    function o(f, l) {
      var u = new a(f), s = l && l.state, c = function() {
        return (u.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var m = u.next() >>> 11, v = (u.next() >>> 0) / 4294967296, d = (m + v) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = u.next, c.quick = c, s && (typeof s == "object" && i(s, u), c.state = function() {
        return i(u, {});
      }), c;
    }
    t && t.exports ? t.exports = o : n && n.amd ? n(function() {
      return o;
    }) : this.xor128 = o;
  })(
    Xn,
    r,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(Hc);
var B$ = Hc.exports, Zc = { exports: {} };
Zc.exports;
(function(r) {
  (function(e, t, n) {
    function a(f) {
      var l = this, u = "";
      l.next = function() {
        var c = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (c ^ c << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, f === (f | 0) ? l.x = f : u += f;
      for (var s = 0; s < u.length + 64; s++)
        l.x ^= u.charCodeAt(s) | 0, s == u.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function i(f, l) {
      return l.x = f.x, l.y = f.y, l.z = f.z, l.w = f.w, l.v = f.v, l.d = f.d, l;
    }
    function o(f, l) {
      var u = new a(f), s = l && l.state, c = function() {
        return (u.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var m = u.next() >>> 11, v = (u.next() >>> 0) / 4294967296, d = (m + v) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = u.next, c.quick = c, s && (typeof s == "object" && i(s, u), c.state = function() {
        return i(u, {});
      }), c;
    }
    t && t.exports ? t.exports = o : n && n.amd ? n(function() {
      return o;
    }) : this.xorwow = o;
  })(
    Xn,
    r,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(Zc);
var _$ = Zc.exports, Yc = { exports: {} };
Yc.exports;
(function(r) {
  (function(e, t, n) {
    function a(f) {
      var l = this;
      l.next = function() {
        var s = l.x, c = l.i, m, v;
        return m = s[c], m ^= m >>> 7, v = m ^ m << 24, m = s[c + 1 & 7], v ^= m ^ m >>> 10, m = s[c + 3 & 7], v ^= m ^ m >>> 3, m = s[c + 4 & 7], v ^= m ^ m << 7, m = s[c + 7 & 7], m = m ^ m << 13, v ^= m ^ m << 9, s[c] = v, l.i = c + 1 & 7, v;
      };
      function u(s, c) {
        var m, v = [];
        if (c === (c | 0))
          v[0] = c;
        else
          for (c = "" + c, m = 0; m < c.length; ++m)
            v[m & 7] = v[m & 7] << 15 ^ c.charCodeAt(m) + v[m + 1 & 7] << 13;
        for (; v.length < 8; )
          v.push(0);
        for (m = 0; m < 8 && v[m] === 0; ++m)
          ;
        for (m == 8 ? v[7] = -1 : v[m], s.x = v, s.i = 0, m = 256; m > 0; --m)
          s.next();
      }
      u(l, f);
    }
    function i(f, l) {
      return l.x = f.x.slice(), l.i = f.i, l;
    }
    function o(f, l) {
      f == null && (f = +/* @__PURE__ */ new Date());
      var u = new a(f), s = l && l.state, c = function() {
        return (u.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var m = u.next() >>> 11, v = (u.next() >>> 0) / 4294967296, d = (m + v) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = u.next, c.quick = c, s && (s.x && i(s, u), c.state = function() {
        return i(u, {});
      }), c;
    }
    t && t.exports ? t.exports = o : n && n.amd ? n(function() {
      return o;
    }) : this.xorshift7 = o;
  })(
    Xn,
    r,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(Yc);
var F$ = Yc.exports, Wc = { exports: {} };
Wc.exports;
(function(r) {
  (function(e, t, n) {
    function a(f) {
      var l = this;
      l.next = function() {
        var s = l.w, c = l.X, m = l.i, v, d;
        return l.w = s = s + 1640531527 | 0, d = c[m + 34 & 127], v = c[m = m + 1 & 127], d ^= d << 13, v ^= v << 17, d ^= d >>> 15, v ^= v >>> 12, d = c[m] = d ^ v, l.i = m, d + (s ^ s >>> 16) | 0;
      };
      function u(s, c) {
        var m, v, d, p, b, g = [], N = 128;
        for (c === (c | 0) ? (v = c, c = null) : (c = c + "\0", v = 0, N = Math.max(N, c.length)), d = 0, p = -32; p < N; ++p)
          c && (v ^= c.charCodeAt((p + 32) % c.length)), p === 0 && (b = v), v ^= v << 10, v ^= v >>> 15, v ^= v << 4, v ^= v >>> 13, p >= 0 && (b = b + 1640531527 | 0, m = g[p & 127] ^= v + b, d = m == 0 ? d + 1 : 0);
        for (d >= 128 && (g[(c && c.length || 0) & 127] = -1), d = 127, p = 4 * 128; p > 0; --p)
          v = g[d + 34 & 127], m = g[d = d + 1 & 127], v ^= v << 13, m ^= m << 17, v ^= v >>> 15, m ^= m >>> 12, g[d] = v ^ m;
        s.w = b, s.X = g, s.i = d;
      }
      u(l, f);
    }
    function i(f, l) {
      return l.i = f.i, l.w = f.w, l.X = f.X.slice(), l;
    }
    function o(f, l) {
      f == null && (f = +/* @__PURE__ */ new Date());
      var u = new a(f), s = l && l.state, c = function() {
        return (u.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var m = u.next() >>> 11, v = (u.next() >>> 0) / 4294967296, d = (m + v) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = u.next, c.quick = c, s && (s.X && i(s, u), c.state = function() {
        return i(u, {});
      }), c;
    }
    t && t.exports ? t.exports = o : n && n.amd ? n(function() {
      return o;
    }) : this.xor4096 = o;
  })(
    Xn,
    // window object or global
    r,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(Wc);
var $$ = Wc.exports, Jc = { exports: {} };
Jc.exports;
(function(r) {
  (function(e, t, n) {
    function a(f) {
      var l = this, u = "";
      l.next = function() {
        var c = l.b, m = l.c, v = l.d, d = l.a;
        return c = c << 25 ^ c >>> 7 ^ m, m = m - v | 0, v = v << 24 ^ v >>> 8 ^ d, d = d - c | 0, l.b = c = c << 20 ^ c >>> 12 ^ m, l.c = m = m - v | 0, l.d = v << 16 ^ m >>> 16 ^ d, l.a = d - c | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, f === Math.floor(f) ? (l.a = f / 4294967296 | 0, l.b = f | 0) : u += f;
      for (var s = 0; s < u.length + 20; s++)
        l.b ^= u.charCodeAt(s) | 0, l.next();
    }
    function i(f, l) {
      return l.a = f.a, l.b = f.b, l.c = f.c, l.d = f.d, l;
    }
    function o(f, l) {
      var u = new a(f), s = l && l.state, c = function() {
        return (u.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var m = u.next() >>> 11, v = (u.next() >>> 0) / 4294967296, d = (m + v) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = u.next, c.quick = c, s && (typeof s == "object" && i(s, u), c.state = function() {
        return i(u, {});
      }), c;
    }
    t && t.exports ? t.exports = o : n && n.amd ? n(function() {
      return o;
    }) : this.tychei = o;
  })(
    Xn,
    r,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(Jc);
var R$ = Jc.exports, dg = { exports: {} };
const I$ = {}, P$ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: I$
}, Symbol.toStringTag, { value: "Module" })), q$ = /* @__PURE__ */ mb(P$);
(function(r) {
  (function(e, t, n) {
    var a = 256, i = 6, o = 52, f = "random", l = n.pow(a, i), u = n.pow(2, o), s = u * 2, c = a - 1, m;
    function v(w, x, y) {
      var E = [];
      x = x == !0 ? { entropy: !0 } : x || {};
      var D = g(b(
        x.entropy ? [w, h(t)] : w ?? N(),
        3
      ), E), S = new d(E), A = function() {
        for (var C = S.g(i), T = l, $ = 0; C < u; )
          C = (C + $) * a, T *= a, $ = S.g(1);
        for (; C >= s; )
          C /= 2, T /= 2, $ >>>= 1;
        return (C + $) / T;
      };
      return A.int32 = function() {
        return S.g(4) | 0;
      }, A.quick = function() {
        return S.g(4) / 4294967296;
      }, A.double = A, g(h(S.S), t), (x.pass || y || function(C, T, $, I) {
        return I && (I.S && p(I, S), C.state = function() {
          return p(S, {});
        }), $ ? (n[f] = C, T) : C;
      })(
        A,
        D,
        "global" in x ? x.global : this == n,
        x.state
      );
    }
    function d(w) {
      var x, y = w.length, E = this, D = 0, S = E.i = E.j = 0, A = E.S = [];
      for (y || (w = [y++]); D < a; )
        A[D] = D++;
      for (D = 0; D < a; D++)
        A[D] = A[S = c & S + w[D % y] + (x = A[D])], A[S] = x;
      (E.g = function(C) {
        for (var T, $ = 0, I = E.i, R = E.j, B = E.S; C--; )
          T = B[I = c & I + 1], $ = $ * a + B[c & (B[I] = B[R = c & R + T]) + (B[R] = T)];
        return E.i = I, E.j = R, $;
      })(a);
    }
    function p(w, x) {
      return x.i = w.i, x.j = w.j, x.S = w.S.slice(), x;
    }
    function b(w, x) {
      var y = [], E = typeof w, D;
      if (x && E == "object")
        for (D in w)
          try {
            y.push(b(w[D], x - 1));
          } catch {
          }
      return y.length ? y : E == "string" ? w : w + "\0";
    }
    function g(w, x) {
      for (var y = w + "", E, D = 0; D < y.length; )
        x[c & D] = c & (E ^= x[c & D] * 19) + y.charCodeAt(D++);
      return h(x);
    }
    function N() {
      try {
        var w;
        return m && (w = m.randomBytes) ? w = w(a) : (w = new Uint8Array(a), (e.crypto || e.msCrypto).getRandomValues(w)), h(w);
      } catch {
        var x = e.navigator, y = x && x.plugins;
        return [+/* @__PURE__ */ new Date(), e, y, e.screen, h(t)];
      }
    }
    function h(w) {
      return String.fromCharCode.apply(0, w);
    }
    if (g(n.random(), t), r.exports) {
      r.exports = v;
      try {
        m = q$;
      } catch {
      }
    } else
      n["seed" + f] = v;
  })(
    // global: `self` in browsers (including strict mode and web workers),
    // otherwise `this` in Node and other environments
    typeof self < "u" ? self : Xn,
    [],
    // pool: entropy pool starts empty
    Math
    // math: package containing random, pow, and seedrandom
  );
})(dg);
var L$ = dg.exports, z$ = T$, U$ = B$, k$ = _$, G$ = F$, V$ = $$, H$ = R$, jn = L$;
jn.alea = z$;
jn.xor128 = U$;
jn.xorwow = k$;
jn.xorshift7 = G$;
jn.xor4096 = V$;
jn.tychei = H$;
var Z$ = jn;
const hg = /* @__PURE__ */ Di(Z$);
var Y$ = /* @__PURE__ */ hg(Date.now());
function ka(r) {
  var e;
  function t(a) {
    e = a === null ? Y$ : hg(String(a));
  }
  t(r);
  function n() {
    return e();
  }
  return n;
}
var rd = "pickRandom", W$ = ["typed", "config", "?on"], J$ = /* @__PURE__ */ q(rd, W$, (r) => {
  var {
    typed: e,
    config: t,
    on: n
  } = r, a = ka(t.randomSeed);
  return n && n("config", function(o, f) {
    o.randomSeed !== f.randomSeed && (a = ka(o.randomSeed));
  }), e(rd, {
    "Array | Matrix": function(f) {
      return i(f, {});
    },
    "Array | Matrix, Object": function(f, l) {
      return i(f, l);
    },
    "Array | Matrix, number": function(f, l) {
      return i(f, {
        number: l
      });
    },
    "Array | Matrix, Array | Matrix": function(f, l) {
      return i(f, {
        weights: l
      });
    },
    "Array | Matrix, Array | Matrix, number": function(f, l, u) {
      return i(f, {
        number: u,
        weights: l
      });
    },
    "Array | Matrix, number, Array | Matrix": function(f, l, u) {
      return i(f, {
        number: l,
        weights: u
      });
    }
  });
  function i(o, f) {
    var {
      number: l,
      weights: u,
      elementWise: s = !0
    } = f, c = typeof l > "u";
    c && (l = 1);
    var m = Le(o) ? o.create : Le(u) ? u.create : null;
    o = o.valueOf(), u && (u = u.valueOf()), s === !0 && (o = or(o), u = or(u));
    var v = 0;
    if (typeof u < "u") {
      if (u.length !== o.length)
        throw new Error("Weights must have the same length as possibles");
      for (var d = 0, p = u.length; d < p; d++) {
        if (!Xe(u[d]) || u[d] < 0)
          throw new Error("Weights must be an array of positive numbers");
        v += u[d];
      }
    }
    for (var b = o.length, g = [], N; g.length < l; ) {
      if (typeof u > "u")
        N = o[Math.floor(a() * b)];
      else
        for (var h = a() * v, w = 0, x = o.length; w < x; w++)
          if (h -= u[w], h < 0) {
            N = o[w];
            break;
          }
      g.push(N);
    }
    return c ? g[0] : m ? m(g) : g;
  }
});
function Xc(r, e) {
  var t = [];
  if (r = r.slice(0), r.length > 1)
    for (var n = 0, a = r.shift(); n < a; n++)
      t.push(Xc(r, e));
  else
    for (var i = 0, o = r.shift(); i < o; i++)
      t.push(e());
  return t;
}
var td = "random", X$ = ["typed", "config", "?on"], K$ = /* @__PURE__ */ q(td, X$, (r) => {
  var {
    typed: e,
    config: t,
    on: n
  } = r, a = ka(t.randomSeed);
  return n && n("config", function(f, l) {
    f.randomSeed !== l.randomSeed && (a = ka(f.randomSeed));
  }), e(td, {
    "": () => o(0, 1),
    number: (f) => o(0, f),
    "number, number": (f, l) => o(f, l),
    "Array | Matrix": (f) => i(f, 0, 1),
    "Array | Matrix, number": (f, l) => i(f, 0, l),
    "Array | Matrix, number, number": (f, l, u) => i(f, l, u)
  });
  function i(f, l, u) {
    var s = Xc(f.valueOf(), () => o(l, u));
    return Le(f) ? f.create(s) : s;
  }
  function o(f, l) {
    return f + a() * (l - f);
  }
}), nd = "randomInt", Q$ = ["typed", "config", "?on"], j$ = /* @__PURE__ */ q(nd, Q$, (r) => {
  var {
    typed: e,
    config: t,
    on: n
  } = r, a = ka(t.randomSeed);
  return n && n("config", function(f, l) {
    f.randomSeed !== l.randomSeed && (a = ka(f.randomSeed));
  }), e(nd, {
    "": () => o(0, 1),
    number: (f) => o(0, f),
    "number, number": (f, l) => o(f, l),
    "Array | Matrix": (f) => i(f, 0, 1),
    "Array | Matrix, number": (f, l) => i(f, 0, l),
    "Array | Matrix, number, number": (f, l, u) => i(f, l, u)
  });
  function i(f, l, u) {
    var s = Xc(f.valueOf(), () => o(l, u));
    return Le(f) ? f.create(s) : s;
  }
  function o(f, l) {
    return Math.floor(f + a() * (l - f));
  }
}), ad = "stirlingS2", eR = ["typed", "addScalar", "subtractScalar", "multiplyScalar", "divideScalar", "pow", "factorial", "combinations", "isNegative", "isInteger", "number", "?bignumber", "larger"], rR = /* @__PURE__ */ q(ad, eR, (r) => {
  var {
    typed: e,
    addScalar: t,
    subtractScalar: n,
    multiplyScalar: a,
    divideScalar: i,
    pow: o,
    factorial: f,
    combinations: l,
    isNegative: u,
    isInteger: s,
    number: c,
    bignumber: m,
    larger: v
  } = r, d = [], p = [];
  return e(ad, {
    "number | BigNumber, number | BigNumber": function(g, N) {
      if (!s(g) || u(g) || !s(N) || u(N))
        throw new TypeError("Non-negative integer value expected in function stirlingS2");
      if (v(N, g))
        throw new TypeError("k must be less than or equal to n in function stirlingS2");
      var h = !(Xe(g) && Xe(N)), w = h ? p : d, x = h ? m : c, y = c(g), E = c(N);
      if (w[y] && w[y].length > E)
        return w[y][E];
      for (var D = 0; D <= y; ++D)
        if (w[D] || (w[D] = [x(D === 0 ? 1 : 0)]), D !== 0)
          for (var S = w[D], A = w[D - 1], C = S.length; C <= D && C <= E; ++C)
            C === D ? S[C] = 1 : S[C] = t(a(x(C), A[C]), A[C - 1]);
      return w[y][E];
    }
  });
}), id = "bellNumbers", tR = ["typed", "addScalar", "isNegative", "isInteger", "stirlingS2"], nR = /* @__PURE__ */ q(id, tR, (r) => {
  var {
    typed: e,
    addScalar: t,
    isNegative: n,
    isInteger: a,
    stirlingS2: i
  } = r;
  return e(id, {
    "number | BigNumber": function(f) {
      if (!a(f) || n(f))
        throw new TypeError("Non-negative integer value expected in function bellNumbers");
      for (var l = 0, u = 0; u <= f; u++)
        l = t(l, i(f, u));
      return l;
    }
  });
}), od = "catalan", aR = ["typed", "addScalar", "divideScalar", "multiplyScalar", "combinations", "isNegative", "isInteger"], iR = /* @__PURE__ */ q(od, aR, (r) => {
  var {
    typed: e,
    addScalar: t,
    divideScalar: n,
    multiplyScalar: a,
    combinations: i,
    isNegative: o,
    isInteger: f
  } = r;
  return e(od, {
    "number | BigNumber": function(u) {
      if (!f(u) || o(u))
        throw new TypeError("Non-negative integer value expected in function catalan");
      return n(i(a(u, 2), u), t(u, 1));
    }
  });
}), sd = "composition", oR = ["typed", "addScalar", "combinations", "isNegative", "isPositive", "isInteger", "larger"], sR = /* @__PURE__ */ q(sd, oR, (r) => {
  var {
    typed: e,
    addScalar: t,
    combinations: n,
    isPositive: a,
    isNegative: i,
    isInteger: o,
    larger: f
  } = r;
  return e(sd, {
    "number | BigNumber, number | BigNumber": function(u, s) {
      if (!o(u) || !a(u) || !o(s) || !a(s))
        throw new TypeError("Positive integer value expected in function composition");
      if (f(s, u))
        throw new TypeError("k must be less than or equal to n in function composition");
      return n(t(u, -1), t(s, -1));
    }
  });
}), ud = "leafCount", uR = ["parse", "typed"], cR = /* @__PURE__ */ q(ud, uR, (r) => {
  var {
    parse: e,
    typed: t
  } = r;
  function n(a) {
    var i = 0;
    return a.forEach((o) => {
      i += n(o);
    }), i || 1;
  }
  return t(ud, {
    Node: function(i) {
      return n(i);
    }
  });
});
function cd(r) {
  return ir(r) || Or(r) && r.isUnary() && ir(r.args[0]);
}
function Xo(r) {
  return !!(ir(r) || (Mn(r) || Or(r)) && r.args.every(Xo) || cn(r) && Xo(r.content));
}
function ld(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(r);
    e && (n = n.filter(function(a) {
      return Object.getOwnPropertyDescriptor(r, a).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function bu(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? ld(Object(t), !0).forEach(function(n) {
      _r(r, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : ld(Object(t)).forEach(function(n) {
      Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return r;
}
var lR = "simplifyUtil", fR = ["FunctionNode", "OperatorNode", "SymbolNode"], Kc = /* @__PURE__ */ q(lR, fR, (r) => {
  var {
    FunctionNode: e,
    OperatorNode: t,
    SymbolNode: n
  } = r, a = !0, i = !1, o = "defaultF", f = {
    /*      */
    add: {
      trivial: a,
      total: a,
      commutative: a,
      associative: a
    },
    /**/
    unaryPlus: {
      trivial: a,
      total: a,
      commutative: a,
      associative: a
    },
    /* */
    subtract: {
      trivial: i,
      total: a,
      commutative: i,
      associative: i
    },
    /* */
    multiply: {
      trivial: a,
      total: a,
      commutative: a,
      associative: a
    },
    /*   */
    divide: {
      trivial: i,
      total: a,
      commutative: i,
      associative: i
    },
    /*    */
    paren: {
      trivial: a,
      total: a,
      commutative: a,
      associative: i
    },
    /* */
    defaultF: {
      trivial: i,
      total: a,
      commutative: i,
      associative: i
    }
  }, l = {
    divide: {
      total: i
    },
    log: {
      total: i
    }
  }, u = {
    subtract: {
      total: i
    },
    abs: {
      trivial: a
    },
    log: {
      total: a
    }
  };
  function s(h, w) {
    var x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : f, y = o;
    if (typeof h == "string" ? y = h : Or(h) ? y = h.fn.toString() : Mn(h) ? y = h.name : cn(h) && (y = "paren"), $e(x, y)) {
      var E = x[y];
      if ($e(E, w))
        return E[w];
      if ($e(f, y))
        return f[y][w];
    }
    if ($e(x, o)) {
      var D = x[o];
      return $e(D, w) ? D[w] : f[o][w];
    }
    if ($e(f, y)) {
      var S = f[y];
      if ($e(S, w))
        return S[w];
    }
    return f[o][w];
  }
  function c(h) {
    var w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : f;
    return s(h, "commutative", w);
  }
  function m(h) {
    var w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : f;
    return s(h, "associative", w);
  }
  function v(h, w) {
    var x = bu({}, h);
    for (var y in w)
      $e(h, y) ? x[y] = bu(bu({}, w[y]), h[y]) : x[y] = w[y];
    return x;
  }
  function d(h, w) {
    if (!h.args || h.args.length === 0)
      return h;
    h.args = p(h, w);
    for (var x = 0; x < h.args.length; x++)
      d(h.args[x], w);
  }
  function p(h, w) {
    var x, y = [], E = function D(S) {
      for (var A = 0; A < S.args.length; A++) {
        var C = S.args[A];
        Or(C) && x === C.op ? D(C) : y.push(C);
      }
    };
    return m(h, w) ? (x = h.op, E(h), y) : h.args;
  }
  function b(h, w) {
    if (!(!h.args || h.args.length === 0)) {
      for (var x = N(h), y = h.args.length, E = 0; E < y; E++)
        b(h.args[E], w);
      if (y > 2 && m(h, w)) {
        for (var D = h.args.pop(); h.args.length > 0; )
          D = x([h.args.pop(), D]);
        h.args = D.args;
      }
    }
  }
  function g(h, w) {
    if (!(!h.args || h.args.length === 0)) {
      for (var x = N(h), y = h.args.length, E = 0; E < y; E++)
        g(h.args[E], w);
      if (y > 2 && m(h, w)) {
        for (var D = h.args.shift(); h.args.length > 0; )
          D = x([D, h.args.shift()]);
        h.args = D.args;
      }
    }
  }
  function N(h) {
    return Or(h) ? function(w) {
      try {
        return new t(h.op, h.fn, w, h.implicit);
      } catch (x) {
        return console.error(x), [];
      }
    } : function(w) {
      return new e(new n(h.name), w);
    };
  }
  return {
    createMakeNodeFunction: N,
    hasProperty: s,
    isCommutative: c,
    isAssociative: m,
    mergeContext: v,
    flatten: d,
    allChildren: p,
    unflattenr: b,
    unflattenl: g,
    defaultContext: f,
    realContext: l,
    positiveContext: u
  };
}), mR = "simplify", vR = ["config", "typed", "parse", "add", "subtract", "multiply", "divide", "pow", "isZero", "equal", "resolve", "simplifyConstant", "simplifyCore", "?fraction", "?bignumber", "mathWithTransform", "matrix", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "SymbolNode"], pR = /* @__PURE__ */ q(mR, vR, (r) => {
  var {
    config: e,
    typed: t,
    parse: n,
    add: a,
    subtract: i,
    multiply: o,
    divide: f,
    pow: l,
    isZero: u,
    equal: s,
    resolve: c,
    simplifyConstant: m,
    simplifyCore: v,
    fraction: d,
    bignumber: p,
    mathWithTransform: b,
    matrix: g,
    AccessorNode: N,
    ArrayNode: h,
    ConstantNode: w,
    FunctionNode: x,
    IndexNode: y,
    ObjectNode: E,
    OperatorNode: D,
    ParenthesisNode: S,
    SymbolNode: A
  } = r, {
    hasProperty: C,
    isCommutative: T,
    isAssociative: $,
    mergeContext: I,
    flatten: R,
    unflattenr: B,
    unflattenl: O,
    createMakeNodeFunction: G,
    defaultContext: _,
    realContext: U,
    positiveContext: K
  } = Kc({
    FunctionNode: x,
    OperatorNode: D,
    SymbolNode: A
  });
  t.addConversion({
    from: "Object",
    to: "Map",
    convert: Oa
  });
  var j = t("simplify", {
    Node: le,
    "Node, Map": (H, W) => le(H, !1, W),
    "Node, Map, Object": (H, W, te) => le(H, !1, W, te),
    "Node, Array": le,
    "Node, Array, Map": le,
    "Node, Array, Map, Object": le
  });
  t.removeConversion({
    from: "Object",
    to: "Map",
    convert: Oa
  }), j.defaultContext = _, j.realContext = U, j.positiveContext = K;
  function z(H) {
    return H.transform(function(W, te, ge) {
      return cn(W) ? z(W.content) : W;
    });
  }
  var Q = {
    true: !0,
    false: !0,
    e: !0,
    i: !0,
    Infinity: !0,
    LN2: !0,
    LN10: !0,
    LOG2E: !0,
    LOG10E: !0,
    NaN: !0,
    phi: !0,
    pi: !0,
    SQRT1_2: !0,
    SQRT2: !0,
    tau: !0
    // null: false,
    // undefined: false,
    // version: false,
  };
  j.rules = [
    v,
    // { l: 'n+0', r: 'n' },     // simplifyCore
    // { l: 'n^0', r: '1' },     // simplifyCore
    // { l: '0*n', r: '0' },     // simplifyCore
    // { l: 'n/n', r: '1'},      // simplifyCore
    // { l: 'n^1', r: 'n' },     // simplifyCore
    // { l: '+n1', r:'n1' },     // simplifyCore
    // { l: 'n--n1', r:'n+n1' }, // simplifyCore
    {
      l: "log(e)",
      r: "1"
    },
    // temporary rules
    // Note initially we tend constants to the right because like-term
    // collection prefers the left, and we would rather collect nonconstants
    {
      s: "n-n1 -> n+-n1",
      // temporarily replace 'subtract' so we can further flatten the 'add' operator
      assuming: {
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "n-n -> 0",
      // partial alternative when we can't always subtract
      assuming: {
        subtract: {
          total: !1
        }
      }
    },
    {
      s: "-(cl*v) -> v * (-cl)",
      // make non-constant terms positive
      assuming: {
        multiply: {
          commutative: !0
        },
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "-(cl*v) -> (-cl) * v",
      // non-commutative version, part 1
      assuming: {
        multiply: {
          commutative: !1
        },
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "-(v*cl) -> v * (-cl)",
      // non-commutative version, part 2
      assuming: {
        multiply: {
          commutative: !1
        },
        subtract: {
          total: !0
        }
      }
    },
    {
      l: "-(n1/n2)",
      r: "-n1/n2"
    },
    {
      l: "-v",
      r: "v * (-1)"
    },
    // finish making non-constant terms positive
    {
      l: "(n1 + n2)*(-1)",
      r: "n1*(-1) + n2*(-1)",
      repeat: !0
    },
    // expand negations to achieve as much sign cancellation as possible
    {
      l: "n/n1^n2",
      r: "n*n1^-n2"
    },
    // temporarily replace 'divide' so we can further flatten the 'multiply' operator
    {
      l: "n/n1",
      r: "n*n1^-1"
    },
    {
      s: "(n1*n2)^n3 -> n1^n3 * n2^n3",
      assuming: {
        multiply: {
          commutative: !0
        }
      }
    },
    {
      s: "(n1*n2)^(-1) -> n2^(-1) * n1^(-1)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    // expand nested exponentiation
    {
      s: "(n ^ n1) ^ n2 -> n ^ (n1 * n2)",
      assuming: {
        divide: {
          total: !0
        }
      }
      // 1/(1/n) = n needs 1/n to exist
    },
    // collect like factors; into a sum, only do this for nonconstants
    {
      l: " vd   * ( vd   * n1 + n2)",
      r: "vd^2       * n1 +  vd   * n2"
    },
    {
      s: " vd   * (vd^n4 * n1 + n2)   ->  vd^(1+n4)  * n1 +  vd   * n2",
      assuming: {
        divide: {
          total: !0
        }
      }
      // v*1/v = v^(1+-1) needs 1/v
    },
    {
      s: "vd^n3 * ( vd   * n1 + n2)   ->  vd^(n3+1)  * n1 + vd^n3 * n2",
      assuming: {
        divide: {
          total: !0
        }
      }
    },
    {
      s: "vd^n3 * (vd^n4 * n1 + n2)   ->  vd^(n3+n4) * n1 + vd^n3 * n2",
      assuming: {
        divide: {
          total: !0
        }
      }
    },
    {
      l: "n*n",
      r: "n^2"
    },
    {
      s: "n * n^n1 -> n^(n1+1)",
      assuming: {
        divide: {
          total: !0
        }
      }
      // n*1/n = n^(-1+1) needs 1/n
    },
    {
      s: "n^n1 * n^n2 -> n^(n1+n2)",
      assuming: {
        divide: {
          total: !0
        }
      }
      // ditto for n^2*1/n^2
    },
    // Unfortunately, to deal with more complicated cancellations, it
    // becomes necessary to simplify constants twice per pass. It's not
    // terribly expensive compared to matching rules, so this should not
    // pose a performance problem.
    m,
    // First: before collecting like terms
    // collect like terms
    {
      s: "n+n -> 2*n",
      assuming: {
        add: {
          total: !0
        }
      }
      // 2 = 1 + 1 needs to exist
    },
    {
      l: "n+-n",
      r: "0"
    },
    {
      l: "vd*n + vd",
      r: "vd*(n+1)"
    },
    // NOTE: leftmost position is special:
    {
      l: "n3*n1 + n3*n2",
      r: "n3*(n1+n2)"
    },
    // All sub-monomials tried there.
    {
      l: "n3^(-n4)*n1 +   n3  * n2",
      r: "n3^(-n4)*(n1 + n3^(n4+1) *n2)"
    },
    {
      l: "n3^(-n4)*n1 + n3^n5 * n2",
      r: "n3^(-n4)*(n1 + n3^(n4+n5)*n2)"
    },
    // noncommutative additional cases (term collection & factoring)
    {
      s: "n*vd + vd -> (n+1)*vd",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "vd + n*vd -> (1+n)*vd",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n1*n3 + n2*n3 -> (n1+n2)*n3",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n^n1 * n -> n^(n1+1)",
      assuming: {
        divide: {
          total: !0
        },
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      l: "n*cd + cd",
      r: "(n+1)*cd"
    },
    {
      s: "cd*n + cd -> cd*(n+1)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    {
      s: "cd + cd*n -> cd*(1+n)",
      assuming: {
        multiply: {
          commutative: !1
        }
      }
    },
    m,
    // Second: before returning expressions to "standard form"
    // make factors positive (and undo 'make non-constant terms positive')
    {
      s: "(-n)*n1 -> -(n*n1)",
      assuming: {
        subtract: {
          total: !0
        }
      }
    },
    {
      s: "n1*(-n) -> -(n1*n)",
      // in case * non-commutative
      assuming: {
        subtract: {
          total: !0
        },
        multiply: {
          commutative: !1
        }
      }
    },
    // final ordering of constants
    {
      s: "ce+ve -> ve+ce",
      assuming: {
        add: {
          commutative: !0
        }
      },
      imposeContext: {
        add: {
          commutative: !1
        }
      }
    },
    {
      s: "vd*cd -> cd*vd",
      assuming: {
        multiply: {
          commutative: !0
        }
      },
      imposeContext: {
        multiply: {
          commutative: !1
        }
      }
    },
    // undo temporary rules
    // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
    {
      l: "n+-n1",
      r: "n-n1"
    },
    // undo replace 'subtract'
    {
      l: "n+-(n1)",
      r: "n-(n1)"
    },
    {
      s: "n*(n1^-1) -> n/n1",
      // undo replace 'divide'; for * commutative
      assuming: {
        multiply: {
          commutative: !0
        }
      }
      // o.w. / not conventional
    },
    {
      s: "n*n1^-n2 -> n/n1^n2",
      assuming: {
        multiply: {
          commutative: !0
        }
      }
      // o.w. / not conventional
    },
    {
      s: "n^-1 -> 1/n",
      assuming: {
        multiply: {
          commutative: !0
        }
      }
      // o.w. / not conventional
    },
    {
      l: "n^1",
      r: "n"
    },
    // can be produced by power cancellation
    {
      s: "n*(n1/n2) -> (n*n1)/n2",
      // '*' before '/'
      assuming: {
        multiply: {
          associative: !0
        }
      }
    },
    {
      s: "n-(n1+n2) -> n-n1-n2",
      // '-' before '+'
      assuming: {
        addition: {
          associative: !0,
          commutative: !0
        }
      }
    },
    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
    // simplifyConstant can leave an extra factor of 1, which can always
    // be eliminated, since the identity always commutes
    {
      l: "1*n",
      r: "n",
      imposeContext: {
        multiply: {
          commutative: !0
        }
      }
    },
    {
      s: "n1/(n2/n3) -> (n1*n3)/n2",
      assuming: {
        multiply: {
          associative: !0
        }
      }
    },
    {
      l: "n1/(-n2)",
      r: "-n1/n2"
    }
  ];
  function ae(H, W) {
    var te = {};
    if (H.s) {
      var ge = H.s.split("->");
      if (ge.length === 2)
        te.l = ge[0], te.r = ge[1];
      else
        throw SyntaxError("Could not parse rule: " + H.s);
    } else
      te.l = H.l, te.r = H.r;
    te.l = z(n(te.l)), te.r = z(n(te.r));
    for (var ve of ["imposeContext", "repeat", "assuming"])
      ve in H && (te[ve] = H[ve]);
    if (H.evaluate && (te.evaluate = n(H.evaluate)), $(te.l, W)) {
      var P = !T(te.l, W), V;
      P && (V = de());
      var ee = G(te.l), ue = de();
      te.expanded = {}, te.expanded.l = ee([te.l, ue]), R(te.expanded.l, W), B(te.expanded.l, W), te.expanded.r = ee([te.r, ue]), P && (te.expandedNC1 = {}, te.expandedNC1.l = ee([V, te.l]), te.expandedNC1.r = ee([V, te.r]), te.expandedNC2 = {}, te.expandedNC2.l = ee([V, te.expanded.l]), te.expandedNC2.r = ee([V, te.expanded.r]));
    }
    return te;
  }
  function re(H, W) {
    for (var te = [], ge = 0; ge < H.length; ge++) {
      var ve = H[ge], P = void 0, V = typeof ve;
      switch (V) {
        case "string":
          ve = {
            s: ve
          };
        case "object":
          P = ae(ve, W);
          break;
        case "function":
          P = ve;
          break;
        default:
          throw TypeError("Unsupported type of rule: " + V);
      }
      te.push(P);
    }
    return te;
  }
  var fe = 0;
  function de() {
    return new A("_p" + fe++);
  }
  function le(H, W) {
    var te = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : za(), ge = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, ve = ge.consoleDebug;
    W = re(W || j.rules, ge.context);
    var P = c(H, te);
    P = z(P);
    for (var V = {}, ee = P.toString({
      parenthesis: "all"
    }); !V[ee]; ) {
      V[ee] = !0, fe = 0;
      var ue = ee;
      ve && console.log("Working on: ", ee);
      for (var pe = 0; pe < W.length; pe++) {
        var me = "";
        if (typeof W[pe] == "function" ? (P = W[pe](P, ge), ve && (me = W[pe].name)) : (R(P, ge.context), P = ye(P, W[pe], ge.context), ve && (me = "".concat(W[pe].l.toString(), " -> ").concat(W[pe].r.toString()))), ve) {
          var Ne = P.toString({
            parenthesis: "all"
          });
          Ne !== ue && (console.log("Applying", me, "produced", Ne), ue = Ne);
        }
        O(P, ge.context);
      }
      ee = P.toString({
        parenthesis: "all"
      });
    }
    return P;
  }
  function ie(H, W, te) {
    var ge = H;
    if (H)
      for (var ve = 0; ve < H.length; ++ve) {
        var P = ye(H[ve], W, te);
        P !== H[ve] && (ge === H && (ge = H.slice()), ge[ve] = P);
      }
    return ge;
  }
  function ye(H, W, te) {
    if (W.assuming) {
      for (var ge in W.assuming)
        for (var ve in W.assuming[ge])
          if (C(ge, ve, te) !== W.assuming[ge][ve])
            return H;
    }
    var P = I(W.imposeContext, te), V = H;
    if (V instanceof D || V instanceof x) {
      var ee = ie(V.args, W, te);
      ee !== V.args && (V = V.clone(), V.args = ee);
    } else if (V instanceof S) {
      if (V.content) {
        var ue = ye(V.content, W, te);
        ue !== V.content && (V = new S(ue));
      }
    } else if (V instanceof h) {
      var pe = ie(V.items, W, te);
      pe !== V.items && (V = new h(pe));
    } else if (V instanceof N) {
      var me = V.object;
      V.object && (me = ye(V.object, W, te));
      var Ne = V.index;
      V.index && (Ne = ye(V.index, W, te)), (me !== V.object || Ne !== V.index) && (V = new N(me, Ne));
    } else if (V instanceof y) {
      var be = ie(V.dimensions, W, te);
      be !== V.dimensions && (V = new y(be));
    } else if (V instanceof E) {
      var Oe = !1, Ae = {};
      for (var We in V.properties)
        Ae[We] = ye(V.properties[We], W, te), Ae[We] !== V.properties[We] && (Oe = !0);
      Oe && (V = new E(Ae));
    }
    var er = W.r, Re = Z(W.l, V, P)[0];
    if (!Re && W.expanded && (er = W.expanded.r, Re = Z(W.expanded.l, V, P)[0]), !Re && W.expandedNC1 && (er = W.expandedNC1.r, Re = Z(W.expandedNC1.l, V, P)[0], Re || (er = W.expandedNC2.r, Re = Z(W.expandedNC2.l, V, P)[0])), Re) {
      var wr = V.implicit;
      V = er.clone(), wr && "implicit" in er && (V.implicit = !0), V = V.transform(function(M) {
        return M.isSymbolNode && $e(Re.placeholders, M.name) ? Re.placeholders[M.name].clone() : M;
      });
    }
    return W.repeat && V !== H && (V = ye(V, W, te)), V;
  }
  function _e(H, W) {
    var te = [], ge, ve, P = G(H);
    if (T(H, W))
      for (var V = 0; V < H.args.length; V++)
        ve = H.args.slice(0), ve.splice(V, 1), ge = ve.length === 1 ? ve[0] : P(ve), te.push(P([H.args[V], ge]));
    else
      for (var ee = 1; ee < H.args.length; ee++) {
        var ue = H.args[0];
        ee > 1 && (ue = P(H.args.slice(0, ee))), ve = H.args.slice(ee), ge = ve.length === 1 ? ve[0] : P(ve), te.push(P([ue, ge]));
      }
    return te;
  }
  function De(H, W) {
    var te = {
      placeholders: {}
    };
    if (!H.placeholders && !W.placeholders)
      return te;
    if (H.placeholders) {
      if (!W.placeholders)
        return H;
    } else
      return W;
    for (var ge in H.placeholders)
      if ($e(H.placeholders, ge) && (te.placeholders[ge] = H.placeholders[ge], $e(W.placeholders, ge) && !oe(H.placeholders[ge], W.placeholders[ge])))
        return null;
    for (var ve in W.placeholders)
      $e(W.placeholders, ve) && (te.placeholders[ve] = W.placeholders[ve]);
    return te;
  }
  function Be(H, W) {
    var te = [];
    if (H.length === 0 || W.length === 0)
      return te;
    for (var ge, ve = 0; ve < H.length; ve++)
      for (var P = 0; P < W.length; P++)
        ge = De(H[ve], W[P]), ge && te.push(ge);
    return te;
  }
  function k(H) {
    if (H.length === 0)
      return H;
    for (var W = H.reduce(Be), te = [], ge = {}, ve = 0; ve < W.length; ve++) {
      var P = JSON.stringify(W[ve]);
      ge[P] || (ge[P] = !0, te.push(W[ve]));
    }
    return te;
  }
  function Z(H, W, te, ge) {
    var ve = [{
      placeholders: {}
    }];
    if (H instanceof D && W instanceof D || H instanceof x && W instanceof x) {
      if (H instanceof D) {
        if (H.op !== W.op || H.fn !== W.fn)
          return [];
      } else if (H instanceof x && H.name !== W.name)
        return [];
      if (W.args.length === 1 && H.args.length === 1 || !$(W, te) && W.args.length === H.args.length || ge) {
        for (var P = [], V = 0; V < H.args.length; V++) {
          var ee = Z(H.args[V], W.args[V], te);
          if (ee.length === 0)
            break;
          P.push(ee);
        }
        if (P.length !== H.args.length) {
          if (!T(W, te) || // exact match in order needed
          H.args.length === 1)
            return [];
          if (H.args.length > 2)
            throw new Error("permuting >2 commutative non-associative rule arguments not yet implemented");
          var ue = Z(H.args[0], W.args[1], te);
          if (ue.length === 0)
            return [];
          var pe = Z(H.args[1], W.args[0], te);
          if (pe.length === 0)
            return [];
          P = [ue, pe];
        }
        ve = k(P);
      } else if (W.args.length >= 2 && H.args.length === 2) {
        for (var me = _e(W, te), Ne = [], be = 0; be < me.length; be++) {
          var Oe = Z(H, me[be], te, !0);
          Ne = Ne.concat(Oe);
        }
        return Ne;
      } else {
        if (H.args.length > 2)
          throw Error("Unexpected non-binary associative function: " + H.toString());
        return [];
      }
    } else if (H instanceof A) {
      if (H.name.length === 0)
        throw new Error("Symbol in rule has 0 length...!?");
      if (Q[H.name]) {
        if (H.name !== W.name)
          return [];
      } else
        switch (H.name[1] >= "a" && H.name[1] <= "z" ? H.name.substring(0, 2) : H.name[0]) {
          case "n":
          case "_p":
            ve[0].placeholders[H.name] = W;
            break;
          case "c":
          case "cl":
            if (ir(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          case "v":
            if (!ir(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          case "vl":
            if (Ir(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          case "cd":
            if (cd(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          case "vd":
            if (!cd(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          case "ce":
            if (Xo(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          case "ve":
            if (!Xo(W))
              ve[0].placeholders[H.name] = W;
            else
              return [];
            break;
          default:
            throw new Error("Invalid symbol in rule: " + H.name);
        }
    } else if (H instanceof w) {
      if (!s(H.value, W.value))
        return [];
    } else
      return [];
    return ve;
  }
  function oe(H, W) {
    if (H instanceof w && W instanceof w) {
      if (!s(H.value, W.value))
        return !1;
    } else if (H instanceof A && W instanceof A) {
      if (H.name !== W.name)
        return !1;
    } else if (H instanceof D && W instanceof D || H instanceof x && W instanceof x) {
      if (H instanceof D) {
        if (H.op !== W.op || H.fn !== W.fn)
          return !1;
      } else if (H instanceof x && H.name !== W.name)
        return !1;
      if (H.args.length !== W.args.length)
        return !1;
      for (var te = 0; te < H.args.length; te++)
        if (!oe(H.args[te], W.args[te]))
          return !1;
    } else
      return !1;
    return !0;
  }
  return j;
}), dR = "simplifyConstant", hR = ["typed", "config", "mathWithTransform", "matrix", "?fraction", "?bignumber", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "SymbolNode"], gR = /* @__PURE__ */ q(dR, hR, (r) => {
  var {
    typed: e,
    config: t,
    mathWithTransform: n,
    matrix: a,
    fraction: i,
    bignumber: o,
    AccessorNode: f,
    ArrayNode: l,
    ConstantNode: u,
    FunctionNode: s,
    IndexNode: c,
    ObjectNode: m,
    OperatorNode: v,
    SymbolNode: d
  } = r, {
    isCommutative: p,
    isAssociative: b,
    allChildren: g,
    createMakeNodeFunction: N
  } = Kc({
    FunctionNode: s,
    OperatorNode: v,
    SymbolNode: d
  }), h = e("simplifyConstant", {
    Node: (R) => E(I(R, {})),
    "Node, Object": function(B, O) {
      return E(I(B, O));
    }
  });
  function w(R) {
    return Si(R) ? R.valueOf() : R instanceof Array ? R.map(w) : Le(R) ? a(w(R.valueOf())) : R;
  }
  function x(R, B, O) {
    try {
      return n[R].apply(null, B);
    } catch {
      return B = B.map(w), S(n[R].apply(null, B), O);
    }
  }
  var y = e({
    Fraction: C,
    number: function(B) {
      return B < 0 ? A(new u(-B)) : new u(B);
    },
    BigNumber: function(B) {
      return B < 0 ? A(new u(-B)) : new u(B);
    },
    Complex: function(B) {
      throw new Error("Cannot convert Complex number to Node");
    },
    string: function(B) {
      return new u(B);
    },
    Matrix: function(B) {
      return new l(B.valueOf().map((O) => y(O)));
    }
  });
  function E(R) {
    return mr(R) ? R : y(R);
  }
  function D(R, B) {
    var O = B && B.exactFractions !== !1;
    if (O && isFinite(R) && i) {
      var G = i(R), _ = B && typeof B.fractionsLimit == "number" ? B.fractionsLimit : 1 / 0;
      if (G.valueOf() === R && G.n < _ && G.d < _)
        return G;
    }
    return R;
  }
  var S = e({
    "string, Object": function(B, O) {
      if (t.number === "BigNumber")
        return o === void 0 && zc(), o(B);
      if (t.number === "Fraction")
        return i === void 0 && J0(), i(B);
      var G = parseFloat(B);
      return D(G, O);
    },
    "Fraction, Object": function(B, O) {
      return B;
    },
    // we don't need options here
    "BigNumber, Object": function(B, O) {
      return B;
    },
    // we don't need options here
    "number, Object": function(B, O) {
      return D(B, O);
    },
    "Complex, Object": function(B, O) {
      return B.im !== 0 ? B : D(B.re, O);
    },
    "Matrix, Object": function(B, O) {
      return a(D(B.valueOf()));
    },
    "Array, Object": function(B, O) {
      return B.map(D);
    }
  });
  function A(R) {
    return new v("-", "unaryMinus", [R]);
  }
  function C(R) {
    var B, O = R.s * R.n;
    return O < 0 ? B = new v("-", "unaryMinus", [new u(-O)]) : B = new u(O), R.d === 1 ? B : new v("/", "divide", [B, new u(R.d)]);
  }
  function T(R, B, O) {
    if (!Ya(B))
      return new f(E(R), E(B));
    if (bt(R) || Le(R)) {
      for (var G = Array.from(B.dimensions); G.length > 0; )
        if (ir(G[0]) && typeof G[0].value != "string") {
          var _ = S(G.shift().value, O);
          bt(R) ? R = R.items[_ - 1] : (R = R.valueOf()[_ - 1], R instanceof Array && (R = a(R)));
        } else if (G.length > 1 && ir(G[1]) && typeof G[1].value != "string") {
          var U = S(G[1].value, O), K = [], j = bt(R) ? R.items : R.valueOf();
          for (var z of j)
            if (bt(z))
              K.push(z.items[U - 1]);
            else if (Le(R))
              K.push(z[U - 1]);
            else
              break;
          if (K.length === j.length)
            bt(R) ? R = new l(K) : R = a(K), G.splice(1, 1);
          else
            break;
        } else
          break;
      return G.length === B.dimensions.length ? new f(E(R), B) : G.length > 0 ? (B = new c(G), new f(E(R), B)) : R;
    }
    if (os(R) && B.dimensions.length === 1 && ir(B.dimensions[0])) {
      var Q = B.dimensions[0].value;
      return Q in R.properties ? R.properties[Q] : new u();
    }
    return new f(E(R), B);
  }
  function $(R, B, O, G) {
    var _ = B.shift(), U = B.reduce((K, j) => {
      if (!mr(j)) {
        var z = K.pop();
        if (mr(z))
          return [z, j];
        try {
          return K.push(x(R, [z, j], G)), K;
        } catch {
          K.push(z);
        }
      }
      K.push(E(K.pop()));
      var Q = K.length === 1 ? K[0] : O(K);
      return [O([Q, E(j)])];
    }, [_]);
    return U.length === 1 ? U[0] : O([U[0], y(U[1])]);
  }
  function I(R, B) {
    switch (R.type) {
      case "SymbolNode":
        return R;
      case "ConstantNode":
        switch (typeof R.value) {
          case "number":
            return S(R.value, B);
          case "string":
            return R.value;
          default:
            if (!isNaN(R.value))
              return S(R.value, B);
        }
        return R;
      case "FunctionNode":
        if (n[R.name] && n[R.name].rawArgs)
          return R;
        {
          var O = ["add", "multiply"];
          if (O.indexOf(R.name) === -1) {
            var G = R.args.map((ye) => I(ye, B));
            if (!G.some(mr))
              try {
                return x(R.name, G, B);
              } catch {
              }
            if (R.name === "size" && G.length === 1 && bt(G[0])) {
              for (var _ = [], U = G[0]; bt(U); )
                _.push(U.items.length), U = U.items[0];
              return a(_);
            }
            return new s(R.name, G.map(E));
          }
        }
      case "OperatorNode": {
        var K = R.fn.toString(), j, z, Q = N(R);
        if (Or(R) && R.isUnary())
          j = [I(R.args[0], B)], mr(j[0]) ? z = Q(j) : z = x(K, j, B);
        else if (b(R, B.context))
          if (j = g(R, B.context), j = j.map((ye) => I(ye, B)), p(K, B.context)) {
            for (var ae = [], re = [], fe = 0; fe < j.length; fe++)
              mr(j[fe]) ? re.push(j[fe]) : ae.push(j[fe]);
            ae.length > 1 ? (z = $(K, ae, Q, B), re.unshift(z), z = $(K, re, Q, B)) : z = $(K, j, Q, B);
          } else
            z = $(K, j, Q, B);
        else
          j = R.args.map((ye) => I(ye, B)), z = $(K, j, Q, B);
        return z;
      }
      case "ParenthesisNode":
        return I(R.content, B);
      case "AccessorNode":
        return T(I(R.object, B), I(R.index, B), B);
      case "ArrayNode": {
        var de = R.items.map((ye) => I(ye, B));
        return de.some(mr) ? new l(de.map(E)) : a(de);
      }
      case "IndexNode":
        return new c(R.dimensions.map((ye) => h(ye, B)));
      case "ObjectNode": {
        var le = {};
        for (var ie in R.properties)
          le[ie] = h(R.properties[ie], B);
        return new m(le);
      }
      case "AssignmentNode":
      case "BlockNode":
      case "FunctionAssignmentNode":
      case "RangeNode":
      case "ConditionalNode":
      default:
        throw new Error("Unimplemented node type in simplifyConstant: ".concat(R.type));
    }
  }
  return h;
}), fd = "simplifyCore", yR = ["typed", "parse", "equal", "isZero", "add", "subtract", "multiply", "divide", "pow", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "SymbolNode"], bR = /* @__PURE__ */ q(fd, yR, (r) => {
  var {
    typed: e,
    parse: t,
    equal: n,
    isZero: a,
    add: i,
    subtract: o,
    multiply: f,
    divide: l,
    pow: u,
    AccessorNode: s,
    ArrayNode: c,
    ConstantNode: m,
    FunctionNode: v,
    IndexNode: d,
    ObjectNode: p,
    OperatorNode: b,
    ParenthesisNode: g,
    SymbolNode: N
  } = r, h = new m(0), w = new m(1), x = new m(!0), y = new m(!1);
  function E(C) {
    return Or(C) && ["and", "not", "or"].includes(C.op);
  }
  var {
    hasProperty: D,
    isCommutative: S
  } = Kc({
    FunctionNode: v,
    OperatorNode: b,
    SymbolNode: N
  });
  function A(C) {
    var T = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, $ = T ? T.context : void 0;
    if (D(C, "trivial", $)) {
      if (Mn(C) && C.args.length === 1)
        return A(C.args[0], T);
      var I = !1, R = 0;
      if (C.forEach((re) => {
        ++R, R === 1 && (I = A(re, T));
      }), R === 1)
        return I;
    }
    var B = C;
    if (Mn(B)) {
      var O = NT(B.name);
      if (O) {
        if (B.args.length > 2 && D(B, "associative", $))
          for (; B.args.length > 2; ) {
            var G = B.args.pop(), _ = B.args.pop();
            B.args.push(new b(O, B.name, [G, _]));
          }
        B = new b(O, B.name, B.args);
      } else
        return new v(A(B.fn), B.args.map((re) => A(re, T)));
    }
    if (Or(B) && B.isUnary()) {
      var U = A(B.args[0], T);
      if (B.op === "~" && Or(U) && U.isUnary() && U.op === "~" || B.op === "not" && Or(U) && U.isUnary() && U.op === "not" && E(U.args[0]))
        return U.args[0];
      var K = !0;
      if (B.op === "-" && Or(U) && (U.isBinary() && U.fn === "subtract" && (B = new b("-", "subtract", [U.args[1], U.args[0]]), K = !1), U.isUnary() && U.op === "-"))
        return U.args[0];
      if (K)
        return new b(B.op, B.fn, [U]);
    }
    if (Or(B) && B.isBinary()) {
      var j = A(B.args[0], T), z = A(B.args[1], T);
      if (B.op === "+") {
        if (ir(j) && a(j.value))
          return z;
        if (ir(z) && a(z.value))
          return j;
        Or(z) && z.isUnary() && z.op === "-" && (z = z.args[0], B = new b("-", "subtract", [j, z]));
      }
      if (B.op === "-")
        return Or(z) && z.isUnary() && z.op === "-" ? A(new b("+", "add", [j, z.args[0]]), T) : ir(j) && a(j.value) ? A(new b("-", "unaryMinus", [z])) : ir(z) && a(z.value) ? j : new b(B.op, B.fn, [j, z]);
      if (B.op === "*") {
        if (ir(j)) {
          if (a(j.value))
            return h;
          if (n(j.value, 1))
            return z;
        }
        if (ir(z)) {
          if (a(z.value))
            return h;
          if (n(z.value, 1))
            return j;
          if (S(B, $))
            return new b(B.op, B.fn, [z, j], B.implicit);
        }
        return new b(B.op, B.fn, [j, z], B.implicit);
      }
      if (B.op === "/")
        return ir(j) && a(j.value) ? h : ir(z) && n(z.value, 1) ? j : new b(B.op, B.fn, [j, z]);
      if (B.op === "^" && ir(z)) {
        if (a(z.value))
          return w;
        if (n(z.value, 1))
          return j;
      }
      if (B.op === "and") {
        if (ir(j))
          if (j.value) {
            if (E(z))
              return z;
          } else
            return y;
        if (ir(z))
          if (z.value) {
            if (E(j))
              return j;
          } else
            return y;
      }
      if (B.op === "or") {
        if (ir(j)) {
          if (j.value)
            return x;
          if (E(z))
            return z;
        }
        if (ir(z)) {
          if (z.value)
            return x;
          if (E(j))
            return j;
        }
      }
      return new b(B.op, B.fn, [j, z]);
    }
    if (Or(B))
      return new b(B.op, B.fn, B.args.map((re) => A(re, T)));
    if (bt(B))
      return new c(B.items.map((re) => A(re, T)));
    if (Yn(B))
      return new s(A(B.object, T), A(B.index, T));
    if (Ya(B))
      return new d(B.dimensions.map((re) => A(re, T)));
    if (os(B)) {
      var Q = {};
      for (var ae in B.properties)
        Q[ae] = A(B.properties[ae], T);
      return new p(Q);
    }
    return B;
  }
  return e(fd, {
    Node: A,
    "Node,Object": A
  });
}), xR = "resolve", wR = ["typed", "parse", "ConstantNode", "FunctionNode", "OperatorNode", "ParenthesisNode"], NR = /* @__PURE__ */ q(xR, wR, (r) => {
  var {
    typed: e,
    parse: t,
    ConstantNode: n,
    FunctionNode: a,
    OperatorNode: i,
    ParenthesisNode: o
  } = r;
  function f(l, u) {
    var s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : /* @__PURE__ */ new Set();
    if (!u)
      return l;
    if (Ir(l)) {
      if (s.has(l.name)) {
        var c = Array.from(s).join(", ");
        throw new ReferenceError("recursive loop of variable definitions among {".concat(c, "}"));
      }
      var m = u.get(l.name);
      if (mr(m)) {
        var v = new Set(s);
        return v.add(l.name), f(m, u, v);
      } else
        return typeof m == "number" ? t(String(m)) : m !== void 0 ? new n(m) : l;
    } else if (Or(l)) {
      var d = l.args.map(function(b) {
        return f(b, u, s);
      });
      return new i(l.op, l.fn, d, l.implicit);
    } else {
      if (cn(l))
        return new o(f(l.content, u, s));
      if (Mn(l)) {
        var p = l.args.map(function(b) {
          return f(b, u, s);
        });
        return new a(l.name, p);
      }
    }
    return l.map((b) => f(b, u, s));
  }
  return e("resolve", {
    Node: f,
    "Node, Map | null | undefined": f,
    "Node, Object": (l, u) => f(l, Oa(u)),
    // For arrays and matrices, we map `self` rather than `_resolve`
    // because resolve is fairly expensive anyway, and this way
    // we get nice error messages if one entry in the array has wrong type.
    "Array | Matrix": e.referToSelf((l) => (u) => u.map((s) => l(s))),
    "Array | Matrix, null | undefined": e.referToSelf((l) => (u) => u.map((s) => l(s))),
    "Array, Object": e.referTo("Array,Map", (l) => (u, s) => l(u, Oa(s))),
    "Matrix, Object": e.referTo("Matrix,Map", (l) => (u, s) => l(u, Oa(s))),
    "Array | Matrix, Map": e.referToSelf((l) => (u, s) => u.map((c) => l(c, s)))
  });
}), md = "symbolicEqual", AR = ["parse", "simplify", "typed", "OperatorNode"], ER = /* @__PURE__ */ q(md, AR, (r) => {
  var {
    parse: e,
    simplify: t,
    typed: n,
    OperatorNode: a
  } = r;
  function i(o, f) {
    var l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, u = new a("-", "subtract", [o, f]), s = t(u, {}, l);
    return ir(s) && !s.value;
  }
  return n(md, {
    "Node, Node": i,
    "Node, Node, Object": i
  });
}), vd = "derivative", DR = ["typed", "config", "parse", "simplify", "equal", "isZero", "numeric", "ConstantNode", "FunctionNode", "OperatorNode", "ParenthesisNode", "SymbolNode"], SR = /* @__PURE__ */ q(vd, DR, (r) => {
  var {
    typed: e,
    config: t,
    parse: n,
    simplify: a,
    equal: i,
    isZero: o,
    numeric: f,
    ConstantNode: l,
    FunctionNode: u,
    OperatorNode: s,
    ParenthesisNode: c,
    SymbolNode: m
  } = r;
  function v(w, x) {
    var y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      simplify: !0
    }, E = {};
    b(E, w, x.name);
    var D = g(w, E);
    return y.simplify ? a(D) : D;
  }
  e.addConversion({
    from: "identifier",
    to: "SymbolNode",
    convert: n
  });
  var d = e(vd, {
    "Node, SymbolNode": v,
    "Node, SymbolNode, Object": v
    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        let constNodes = {}
        constTag(constNodes, expr, variable.name)
        res = _derivative(res, constNodes)
      }
      return res
    }
    */
  });
  e.removeConversion({
    from: "identifier",
    to: "SymbolNode",
    convert: n
  }), d._simplify = !0, d.toTex = function(w) {
    return p.apply(null, w.args);
  };
  var p = e("_derivTex", {
    "Node, SymbolNode": function(x, y) {
      return ir(x) && hr(x.value) === "string" ? p(n(x.value).toString(), y.toString(), 1) : p(x.toTex(), y.toString(), 1);
    },
    "Node, ConstantNode": function(x, y) {
      if (hr(y.value) === "string")
        return p(x, n(y.value));
      throw new Error("The second parameter to 'derivative' is a non-string constant");
    },
    "Node, SymbolNode, ConstantNode": function(x, y, E) {
      return p(x.toString(), y.name, E.value);
    },
    "string, string, number": function(x, y, E) {
      var D;
      return E === 1 ? D = "{d\\over d" + y + "}" : D = "{d^{" + E + "}\\over d" + y + "^{" + E + "}}", D + "\\left[".concat(x, "\\right]");
    }
  }), b = e("constTag", {
    "Object, ConstantNode, string": function(x, y) {
      return x[y] = !0, !0;
    },
    "Object, SymbolNode, string": function(x, y, E) {
      return y.name !== E ? (x[y] = !0, !0) : !1;
    },
    "Object, ParenthesisNode, string": function(x, y, E) {
      return b(x, y.content, E);
    },
    "Object, FunctionAssignmentNode, string": function(x, y, E) {
      return y.params.indexOf(E) === -1 ? (x[y] = !0, !0) : b(x, y.expr, E);
    },
    "Object, FunctionNode | OperatorNode, string": function(x, y, E) {
      if (y.args.length > 0) {
        for (var D = b(x, y.args[0], E), S = 1; S < y.args.length; ++S)
          D = b(x, y.args[S], E) && D;
        if (D)
          return x[y] = !0, !0;
      }
      return !1;
    }
  }), g = e("_derivative", {
    "ConstantNode, Object": function(x) {
      return h(0);
    },
    "SymbolNode, Object": function(x, y) {
      return y[x] !== void 0 ? h(0) : h(1);
    },
    "ParenthesisNode, Object": function(x, y) {
      return new c(g(x.content, y));
    },
    "FunctionAssignmentNode, Object": function(x, y) {
      return y[x] !== void 0 ? h(0) : g(x.expr, y);
    },
    "FunctionNode, Object": function(x, y) {
      if (x.args.length !== 1 && N(x), y[x] !== void 0)
        return h(0);
      var E = x.args[0], D, S = !1, A = !1, C;
      switch (x.name) {
        case "cbrt":
          S = !0, C = new s("*", "multiply", [h(3), new s("^", "pow", [E, new s("/", "divide", [h(2), h(3)])])]);
          break;
        case "sqrt":
        case "nthRoot":
          if (x.args.length === 1)
            S = !0, C = new s("*", "multiply", [h(2), new u("sqrt", [E])]);
          else if (x.args.length === 2)
            return D = new s("/", "divide", [h(1), x.args[1]]), y[D] = y[x.args[1]], g(new s("^", "pow", [E, D]), y);
          break;
        case "log10":
          D = h(10);
        case "log":
          if (!D && x.args.length === 1)
            C = E.clone(), S = !0;
          else if (x.args.length === 1 && D || x.args.length === 2 && y[x.args[1]] !== void 0)
            C = new s("*", "multiply", [E.clone(), new u("log", [D || x.args[1]])]), S = !0;
          else if (x.args.length === 2)
            return g(new s("/", "divide", [new u("log", [E]), new u("log", [x.args[1]])]), y);
          break;
        case "pow":
          return y[D] = y[x.args[1]], g(new s("^", "pow", [E, x.args[1]]), y);
        case "exp":
          C = new u("exp", [E.clone()]);
          break;
        case "sin":
          C = new u("cos", [E.clone()]);
          break;
        case "cos":
          C = new s("-", "unaryMinus", [new u("sin", [E.clone()])]);
          break;
        case "tan":
          C = new s("^", "pow", [new u("sec", [E.clone()]), h(2)]);
          break;
        case "sec":
          C = new s("*", "multiply", [x, new u("tan", [E.clone()])]);
          break;
        case "csc":
          A = !0, C = new s("*", "multiply", [x, new u("cot", [E.clone()])]);
          break;
        case "cot":
          A = !0, C = new s("^", "pow", [new u("csc", [E.clone()]), h(2)]);
          break;
        case "asin":
          S = !0, C = new u("sqrt", [new s("-", "subtract", [h(1), new s("^", "pow", [E.clone(), h(2)])])]);
          break;
        case "acos":
          S = !0, A = !0, C = new u("sqrt", [new s("-", "subtract", [h(1), new s("^", "pow", [E.clone(), h(2)])])]);
          break;
        case "atan":
          S = !0, C = new s("+", "add", [new s("^", "pow", [E.clone(), h(2)]), h(1)]);
          break;
        case "asec":
          S = !0, C = new s("*", "multiply", [new u("abs", [E.clone()]), new u("sqrt", [new s("-", "subtract", [new s("^", "pow", [E.clone(), h(2)]), h(1)])])]);
          break;
        case "acsc":
          S = !0, A = !0, C = new s("*", "multiply", [new u("abs", [E.clone()]), new u("sqrt", [new s("-", "subtract", [new s("^", "pow", [E.clone(), h(2)]), h(1)])])]);
          break;
        case "acot":
          S = !0, A = !0, C = new s("+", "add", [new s("^", "pow", [E.clone(), h(2)]), h(1)]);
          break;
        case "sinh":
          C = new u("cosh", [E.clone()]);
          break;
        case "cosh":
          C = new u("sinh", [E.clone()]);
          break;
        case "tanh":
          C = new s("^", "pow", [new u("sech", [E.clone()]), h(2)]);
          break;
        case "sech":
          A = !0, C = new s("*", "multiply", [x, new u("tanh", [E.clone()])]);
          break;
        case "csch":
          A = !0, C = new s("*", "multiply", [x, new u("coth", [E.clone()])]);
          break;
        case "coth":
          A = !0, C = new s("^", "pow", [new u("csch", [E.clone()]), h(2)]);
          break;
        case "asinh":
          S = !0, C = new u("sqrt", [new s("+", "add", [new s("^", "pow", [E.clone(), h(2)]), h(1)])]);
          break;
        case "acosh":
          S = !0, C = new u("sqrt", [new s("-", "subtract", [new s("^", "pow", [E.clone(), h(2)]), h(1)])]);
          break;
        case "atanh":
          S = !0, C = new s("-", "subtract", [h(1), new s("^", "pow", [E.clone(), h(2)])]);
          break;
        case "asech":
          S = !0, A = !0, C = new s("*", "multiply", [E.clone(), new u("sqrt", [new s("-", "subtract", [h(1), new s("^", "pow", [E.clone(), h(2)])])])]);
          break;
        case "acsch":
          S = !0, A = !0, C = new s("*", "multiply", [new u("abs", [E.clone()]), new u("sqrt", [new s("+", "add", [new s("^", "pow", [E.clone(), h(2)]), h(1)])])]);
          break;
        case "acoth":
          S = !0, A = !0, C = new s("-", "subtract", [h(1), new s("^", "pow", [E.clone(), h(2)])]);
          break;
        case "abs":
          C = new s("/", "divide", [new u(new m("abs"), [E.clone()]), E.clone()]);
          break;
        case "gamma":
        default:
          throw new Error('Function "' + x.name + '" is not supported by derivative, or a wrong number of arguments is passed');
      }
      var T, $;
      S ? (T = "/", $ = "divide") : (T = "*", $ = "multiply");
      var I = g(E, y);
      return A && (I = new s("-", "unaryMinus", [I])), new s(T, $, [I, C]);
    },
    "OperatorNode, Object": function(x, y) {
      if (y[x] !== void 0)
        return h(0);
      if (x.op === "+")
        return new s(x.op, x.fn, x.args.map(function(B) {
          return g(B, y);
        }));
      if (x.op === "-") {
        if (x.isUnary())
          return new s(x.op, x.fn, [g(x.args[0], y)]);
        if (x.isBinary())
          return new s(x.op, x.fn, [g(x.args[0], y), g(x.args[1], y)]);
      }
      if (x.op === "*") {
        var E = x.args.filter(function(B) {
          return y[B] !== void 0;
        });
        if (E.length > 0) {
          var D = x.args.filter(function(B) {
            return y[B] === void 0;
          }), S = D.length === 1 ? D[0] : new s("*", "multiply", D), A = E.concat(g(S, y));
          return new s("*", "multiply", A);
        }
        return new s("+", "add", x.args.map(function(B) {
          return new s("*", "multiply", x.args.map(function(O) {
            return O === B ? g(O, y) : O.clone();
          }));
        }));
      }
      if (x.op === "/" && x.isBinary()) {
        var C = x.args[0], T = x.args[1];
        return y[T] !== void 0 ? new s("/", "divide", [g(C, y), T]) : y[C] !== void 0 ? new s("*", "multiply", [new s("-", "unaryMinus", [C]), new s("/", "divide", [g(T, y), new s("^", "pow", [T.clone(), h(2)])])]) : new s("/", "divide", [new s("-", "subtract", [new s("*", "multiply", [g(C, y), T.clone()]), new s("*", "multiply", [C.clone(), g(T, y)])]), new s("^", "pow", [T.clone(), h(2)])]);
      }
      if (x.op === "^" && x.isBinary()) {
        var $ = x.args[0], I = x.args[1];
        if (y[$] !== void 0)
          return ir($) && (o($.value) || i($.value, 1)) ? h(0) : new s("*", "multiply", [x, new s("*", "multiply", [new u("log", [$.clone()]), g(I.clone(), y)])]);
        if (y[I] !== void 0) {
          if (ir(I)) {
            if (o(I.value))
              return h(0);
            if (i(I.value, 1))
              return g($, y);
          }
          var R = new s("^", "pow", [$.clone(), new s("-", "subtract", [I, h(1)])]);
          return new s("*", "multiply", [I.clone(), new s("*", "multiply", [g($, y), R])]);
        }
        return new s("*", "multiply", [new s("^", "pow", [$.clone(), I.clone()]), new s("+", "add", [new s("*", "multiply", [g($, y), new s("/", "divide", [I.clone(), $.clone()])]), new s("*", "multiply", [g(I, y), new u("log", [$.clone()])])])]);
      }
      throw new Error('Operator "' + x.op + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  });
  function N(w) {
    if (!((w.name === "log" || w.name === "nthRoot" || w.name === "pow") && w.args.length === 2)) {
      for (var x = 0; x < w.args.length; ++x)
        w.args[x] = h(0);
      throw w.compile().evaluate(), new Error('Function "' + w.name + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  }
  function h(w, x) {
    return new l(f(w, x || t.number));
  }
  return d;
}), pd = "rationalize", CR = ["config", "typed", "equal", "isZero", "add", "subtract", "multiply", "divide", "pow", "parse", "simplifyConstant", "simplifyCore", "simplify", "?bignumber", "?fraction", "mathWithTransform", "matrix", "AccessorNode", "ArrayNode", "ConstantNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "SymbolNode", "ParenthesisNode"], MR = /* @__PURE__ */ q(pd, CR, (r) => {
  var {
    config: e,
    typed: t,
    equal: n,
    isZero: a,
    add: i,
    subtract: o,
    multiply: f,
    divide: l,
    pow: u,
    parse: s,
    simplifyConstant: c,
    simplifyCore: m,
    simplify: v,
    fraction: d,
    bignumber: p,
    mathWithTransform: b,
    matrix: g,
    AccessorNode: N,
    ArrayNode: h,
    ConstantNode: w,
    FunctionNode: x,
    IndexNode: y,
    ObjectNode: E,
    OperatorNode: D,
    SymbolNode: S,
    ParenthesisNode: A
  } = r;
  function C(B) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, G = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, _ = $(), U = T(B, O, !0, _.firstRules), K = U.variables.length, j = {
      exactFractions: !1
    }, z = {
      exactFractions: !0
    };
    if (B = U.expression, K >= 1) {
      B = I(B);
      var Q, ae, re = !0, fe = !1;
      B = v(B, _.firstRules, {}, j);
      for (var de; ae = re ? _.distrDivRules : _.sucDivRules, B = v(B, ae, {}, z), re = !re, de = B.toString(), de !== Q; )
        fe = !0, Q = de;
      fe && (B = v(B, _.firstRulesAgain, {}, j)), B = v(B, _.finalRules, {}, j);
    }
    var le = [], ie = {};
    return B.type === "OperatorNode" && B.isBinary() && B.op === "/" ? (K === 1 && (B.args[0] = R(B.args[0], le), B.args[1] = R(B.args[1])), G && (ie.numerator = B.args[0], ie.denominator = B.args[1])) : (K === 1 && (B = R(B, le)), G && (ie.numerator = B, ie.denominator = null)), G ? (ie.coefficients = le, ie.variables = U.variables, ie.expression = B, ie) : B;
  }
  return t(pd, {
    Node: C,
    "Node, boolean": (B, O) => C(B, {}, O),
    "Node, Object": C,
    "Node, Object, boolean": C
  });
  function T(B, O, G, _) {
    var U = [], K = v(B, _, O, {
      exactFractions: !1
    });
    G = !!G;
    var j = "+-*" + (G ? "/" : "");
    Q(K);
    var z = {};
    return z.expression = K, z.variables = U, z;
    function Q(ae) {
      var re = ae.type;
      if (re === "FunctionNode")
        throw new Error("There is an unsolved function call");
      if (re === "OperatorNode")
        if (ae.op === "^") {
          if (ae.args[1].type !== "ConstantNode" || !Ie(parseFloat(ae.args[1].value)))
            throw new Error("There is a non-integer exponent");
          Q(ae.args[0]);
        } else {
          if (j.indexOf(ae.op) === -1)
            throw new Error("Operator " + ae.op + " invalid in polynomial expression");
          for (var fe = 0; fe < ae.args.length; fe++)
            Q(ae.args[fe]);
        }
      else if (re === "SymbolNode") {
        var de = ae.name, le = U.indexOf(de);
        le === -1 && U.push(de);
      } else if (re === "ParenthesisNode")
        Q(ae.content);
      else if (re !== "ConstantNode")
        throw new Error("type " + re + " is not allowed in polynomial expression");
    }
  }
  function $() {
    var B = [
      m,
      // sCore
      {
        l: "n+n",
        r: "2*n"
      },
      {
        l: "n+-n",
        r: "0"
      },
      c,
      // sConstant
      {
        l: "n*(n1^-1)",
        r: "n/n1"
      },
      {
        l: "n*n1^-n2",
        r: "n/n1^n2"
      },
      {
        l: "n1^-1",
        r: "1/n1"
      },
      {
        l: "n*(n1/n2)",
        r: "(n*n1)/n2"
      },
      {
        l: "1*n",
        r: "n"
      }
    ], O = [
      {
        l: "(-n1)/(-n2)",
        r: "n1/n2"
      },
      // Unary division
      {
        l: "(-n1)*(-n2)",
        r: "n1*n2"
      },
      // Unary multiplication
      {
        l: "n1--n2",
        r: "n1+n2"
      },
      // '--' elimination
      {
        l: "n1-n2",
        r: "n1+(-n2)"
      },
      // Subtraction turn into add with un�ry minus
      {
        l: "(n1+n2)*n3",
        r: "(n1*n3 + n2*n3)"
      },
      // Distributive 1
      {
        l: "n1*(n2+n3)",
        r: "(n1*n2+n1*n3)"
      },
      // Distributive 2
      {
        l: "c1*n + c2*n",
        r: "(c1+c2)*n"
      },
      // Joining constants
      {
        l: "c1*n + n",
        r: "(c1+1)*n"
      },
      // Joining constants
      {
        l: "c1*n - c2*n",
        r: "(c1-c2)*n"
      },
      // Joining constants
      {
        l: "c1*n - n",
        r: "(c1-1)*n"
      },
      // Joining constants
      {
        l: "v/c",
        r: "(1/c)*v"
      },
      // variable/constant (new!)
      {
        l: "v/-c",
        r: "-(1/c)*v"
      },
      // variable/constant (new!)
      {
        l: "-v*-c",
        r: "c*v"
      },
      // Inversion constant and variable 1
      {
        l: "-v*c",
        r: "-c*v"
      },
      // Inversion constant and variable 2
      {
        l: "v*-c",
        r: "-c*v"
      },
      // Inversion constant and variable 3
      {
        l: "v*c",
        r: "c*v"
      },
      // Inversion constant and variable 4
      {
        l: "-(-n1*n2)",
        r: "(n1*n2)"
      },
      // Unary propagation
      {
        l: "-(n1*n2)",
        r: "(-n1*n2)"
      },
      // Unary propagation
      {
        l: "-(-n1+n2)",
        r: "(n1-n2)"
      },
      // Unary propagation
      {
        l: "-(n1+n2)",
        r: "(-n1-n2)"
      },
      // Unary propagation
      {
        l: "(n1^n2)^n3",
        r: "(n1^(n2*n3))"
      },
      // Power to Power
      {
        l: "-(-n1/n2)",
        r: "(n1/n2)"
      },
      // Division and Unary
      {
        l: "-(n1/n2)",
        r: "(-n1/n2)"
      }
    ], G = [
      {
        l: "(n1/n2 + n3/n4)",
        r: "((n1*n4 + n3*n2)/(n2*n4))"
      },
      // Sum of fractions
      {
        l: "(n1/n2 + n3)",
        r: "((n1 + n3*n2)/n2)"
      },
      // Sum fraction with number 1
      {
        l: "(n1 + n2/n3)",
        r: "((n1*n3 + n2)/n3)"
      }
    ], _ = [
      {
        l: "(n1/(n2/n3))",
        r: "((n1*n3)/n2)"
      },
      // Division simplification
      {
        l: "(n1/n2/n3)",
        r: "(n1/(n2*n3))"
      }
    ], U = {};
    return U.firstRules = B.concat(O, _), U.distrDivRules = G, U.sucDivRules = _, U.firstRulesAgain = B.concat(O), U.finalRules = [
      m,
      // simplify.rules[0]
      {
        l: "n*-n",
        r: "-n^2"
      },
      // Joining multiply with power 1
      {
        l: "n*n",
        r: "n^2"
      },
      // Joining multiply with power 2
      c,
      // simplify.rules[14] old 3rd index in oldRules
      {
        l: "n*-n^n1",
        r: "-n^(n1+1)"
      },
      // Joining multiply with power 3
      {
        l: "n*n^n1",
        r: "n^(n1+1)"
      },
      // Joining multiply with power 4
      {
        l: "n^n1*-n^n2",
        r: "-n^(n1+n2)"
      },
      // Joining multiply with power 5
      {
        l: "n^n1*n^n2",
        r: "n^(n1+n2)"
      },
      // Joining multiply with power 6
      {
        l: "n^n1*-n",
        r: "-n^(n1+1)"
      },
      // Joining multiply with power 7
      {
        l: "n^n1*n",
        r: "n^(n1+1)"
      },
      // Joining multiply with power 8
      {
        l: "n^n1/-n",
        r: "-n^(n1-1)"
      },
      // Joining multiply with power 8
      {
        l: "n^n1/n",
        r: "n^(n1-1)"
      },
      // Joining division with power 1
      {
        l: "n/-n^n1",
        r: "-n^(1-n1)"
      },
      // Joining division with power 2
      {
        l: "n/n^n1",
        r: "n^(1-n1)"
      },
      // Joining division with power 3
      {
        l: "n^n1/-n^n2",
        r: "n^(n1-n2)"
      },
      // Joining division with power 4
      {
        l: "n^n1/n^n2",
        r: "n^(n1-n2)"
      },
      // Joining division with power 5
      {
        l: "n1+(-n2*n3)",
        r: "n1-n2*n3"
      },
      // Solving useless parenthesis 1
      {
        l: "v*(-c)",
        r: "-c*v"
      },
      // Solving useless unary 2
      {
        l: "n1+-n2",
        r: "n1-n2"
      },
      // Solving +- together (new!)
      {
        l: "v*c",
        r: "c*v"
      },
      // inversion constant with variable
      {
        l: "(n1^n2)^n3",
        r: "(n1^(n2*n3))"
      }
      // Power to Power
    ], U;
  }
  function I(B, O, G) {
    var _ = B.type, U = arguments.length > 1;
    if (_ === "OperatorNode" && B.isBinary()) {
      var K = !1, j;
      if (B.op === "^" && (B.args[0].type === "ParenthesisNode" || B.args[0].type === "OperatorNode") && B.args[1].type === "ConstantNode" && (j = parseFloat(B.args[1].value), K = j >= 2 && Ie(j)), K) {
        if (j > 2) {
          var z = B.args[0], Q = new D("^", "pow", [B.args[0].cloneDeep(), new w(j - 1)]);
          B = new D("*", "multiply", [z, Q]);
        } else
          B = new D("*", "multiply", [B.args[0], B.args[0].cloneDeep()]);
        U && (G === "content" ? O.content = B : O.args[G] = B);
      }
    }
    if (_ === "ParenthesisNode")
      I(B.content, B, "content");
    else if (_ !== "ConstantNode" && _ !== "SymbolNode")
      for (var ae = 0; ae < B.args.length; ae++)
        I(B.args[ae], B, ae);
    if (!U)
      return B;
  }
  function R(B, O) {
    O === void 0 && (O = []), O[0] = 0;
    var G = {};
    G.cte = 1, G.oper = "+", G.fire = "";
    var _ = 0, U = "";
    de(B, null, G), _ = O.length - 1;
    for (var K = !0, j, z = _; z >= 0; z--)
      if (O[z] !== 0) {
        var Q = new w(K ? O[z] : Math.abs(O[z])), ae = O[z] < 0 ? "-" : "+";
        if (z > 0) {
          var re = new S(U);
          if (z > 1) {
            var fe = new w(z);
            re = new D("^", "pow", [re, fe]);
          }
          O[z] === -1 && K ? Q = new D("-", "unaryMinus", [re]) : Math.abs(O[z]) === 1 ? Q = re : Q = new D("*", "multiply", [Q, re]);
        }
        K ? j = Q : ae === "+" ? j = new D("+", "add", [j, Q]) : j = new D("-", "subtract", [j, Q]), K = !1;
      }
    if (K)
      return new w(0);
    return j;
    function de(le, ie, ye) {
      var _e = le.type;
      if (_e === "FunctionNode")
        throw new Error("There is an unsolved function call");
      if (_e === "OperatorNode") {
        if ("+-*^".indexOf(le.op) === -1)
          throw new Error("Operator " + le.op + " invalid");
        if (ie !== null) {
          if ((le.fn === "unaryMinus" || le.fn === "pow") && ie.fn !== "add" && ie.fn !== "subtract" && ie.fn !== "multiply")
            throw new Error("Invalid " + le.op + " placing");
          if ((le.fn === "subtract" || le.fn === "add" || le.fn === "multiply") && ie.fn !== "add" && ie.fn !== "subtract")
            throw new Error("Invalid " + le.op + " placing");
          if ((le.fn === "subtract" || le.fn === "add" || le.fn === "unaryMinus") && ye.noFil !== 0)
            throw new Error("Invalid " + le.op + " placing");
        }
        (le.op === "^" || le.op === "*") && (ye.fire = le.op);
        for (var De = 0; De < le.args.length; De++)
          le.fn === "unaryMinus" && (ye.oper = "-"), (le.op === "+" || le.fn === "subtract") && (ye.fire = "", ye.cte = 1, ye.oper = De === 0 ? "+" : le.op), ye.noFil = De, de(le.args[De], le, ye);
      } else if (_e === "SymbolNode") {
        if (le.name !== U && U !== "")
          throw new Error("There is more than one variable");
        if (U = le.name, ie === null) {
          O[1] = 1;
          return;
        }
        if (ie.op === "^" && ye.noFil !== 0)
          throw new Error("In power the variable should be the first parameter");
        if (ie.op === "*" && ye.noFil !== 1)
          throw new Error("In multiply the variable should be the second parameter");
        (ye.fire === "" || ye.fire === "*") && (_ < 1 && (O[1] = 0), O[1] += ye.cte * (ye.oper === "+" ? 1 : -1), _ = Math.max(1, _));
      } else if (_e === "ConstantNode") {
        var Be = parseFloat(le.value);
        if (ie === null) {
          O[0] = Be;
          return;
        }
        if (ie.op === "^") {
          if (ye.noFil !== 1)
            throw new Error("Constant cannot be powered");
          if (!Ie(Be) || Be <= 0)
            throw new Error("Non-integer exponent is not allowed");
          for (var k = _ + 1; k < Be; k++)
            O[k] = 0;
          Be > _ && (O[Be] = 0), O[Be] += ye.cte * (ye.oper === "+" ? 1 : -1), _ = Math.max(Be, _);
          return;
        }
        ye.cte = Be, ye.fire === "" && (O[0] += ye.cte * (ye.oper === "+" ? 1 : -1));
      } else
        throw new Error("Type " + _e + " is not allowed");
    }
  }
}), dd = "zpk2tf", OR = ["typed", "add", "multiply", "Complex", "number"], TR = /* @__PURE__ */ q(dd, OR, (r) => {
  var {
    typed: e,
    add: t,
    multiply: n,
    Complex: a,
    number: i
  } = r;
  return e(dd, {
    "Array,Array,number": function(u, s, c) {
      return o(u, s, c);
    },
    "Array,Array": function(u, s) {
      return o(u, s, 1);
    },
    "Matrix,Matrix,number": function(u, s, c) {
      return o(u.valueOf(), s.valueOf(), c);
    },
    "Matrix,Matrix": function(u, s) {
      return o(u.valueOf(), s.valueOf(), 1);
    }
  });
  function o(l, u, s) {
    l.some((N) => N.type === "BigNumber") && (l = l.map((N) => i(N))), u.some((N) => N.type === "BigNumber") && (u = u.map((N) => i(N)));
    for (var c = [a(1, 0)], m = [a(1, 0)], v = 0; v < l.length; v++) {
      var d = l[v];
      typeof d == "number" && (d = a(d, 0)), c = f(c, [a(1, 0), a(-d.re, -d.im)]);
    }
    for (var p = 0; p < u.length; p++) {
      var b = u[p];
      typeof b == "number" && (b = a(b, 0)), m = f(m, [a(1, 0), a(-b.re, -b.im)]);
    }
    for (var g = 0; g < c.length; g++)
      c[g] = n(c[g], s);
    return [c, m];
  }
  function f(l, u) {
    for (var s = [], c = 0; c < l.length + u.length - 1; c++) {
      s[c] = a(0, 0);
      for (var m = 0; m < l.length; m++)
        c - m >= 0 && c - m < u.length && (s[c] = t(s[c], n(l[m], u[c - m])));
    }
    return s;
  }
}), hd = "freqz", BR = ["typed", "add", "multiply", "Complex", "divide", "matrix"], _R = /* @__PURE__ */ q(hd, BR, (r) => {
  var {
    typed: e,
    add: t,
    multiply: n,
    Complex: a,
    divide: i,
    matrix: o
  } = r;
  return e(hd, {
    "Array, Array": function(s, c) {
      var m = l(512);
      return f(s, c, m);
    },
    "Array, Array, Array": function(s, c, m) {
      return f(s, c, m);
    },
    "Array, Array, number": function(s, c, m) {
      if (m < 0)
        throw new Error("w must be a positive number");
      var v = l(m);
      return f(s, c, v);
    },
    "Matrix, Matrix": function(s, c) {
      var m = l(512), {
        w: v,
        h: d
      } = f(s.valueOf(), c.valueOf(), m);
      return {
        w: o(v),
        h: o(d)
      };
    },
    "Matrix, Matrix, Matrix": function(s, c, m) {
      var {
        h: v
      } = f(s.valueOf(), c.valueOf(), m.valueOf());
      return {
        h: o(v),
        w: o(m)
      };
    },
    "Matrix, Matrix, number": function(s, c, m) {
      if (m < 0)
        throw new Error("w must be a positive number");
      var v = l(m), {
        h: d
      } = f(s.valueOf(), c.valueOf(), v);
      return {
        h: o(d),
        w: o(v)
      };
    }
  });
  function f(u, s, c) {
    for (var m = [], v = [], d = 0; d < c.length; d++) {
      for (var p = a(0, 0), b = a(0, 0), g = 0; g < u.length; g++)
        p = t(p, n(u[g], a(Math.cos(-g * c[d]), Math.sin(-g * c[d]))));
      for (var N = 0; N < s.length; N++)
        b = t(b, n(s[N], a(Math.cos(-N * c[d]), Math.sin(-N * c[d]))));
      m.push(p), v.push(b);
    }
    for (var h = [], w = 0; w < m.length; w++)
      h.push(i(m[w], v[w]));
    return {
      h,
      w: c
    };
  }
  function l(u) {
    for (var s = [], c = 0; c < u; c++)
      s.push(c / u * Math.PI);
    return s;
  }
}), FR = "reviver", $R = ["classes"], RR = /* @__PURE__ */ q(FR, $R, (r) => {
  var {
    classes: e
  } = r;
  return function(n, a) {
    var i = e[a && a.mathjs];
    return i && typeof i.fromJSON == "function" ? i.fromJSON(a) : a;
  };
}), IR = "replacer", PR = [], qR = /* @__PURE__ */ q(IR, PR, () => function(e, t) {
  return typeof t == "number" && (!isFinite(t) || isNaN(t)) ? {
    mathjs: "number",
    value: String(t)
  } : t;
}), LR = "11.12.0", zR = /* @__PURE__ */ q("true", [], () => !0), UR = /* @__PURE__ */ q("false", [], () => !1), kR = /* @__PURE__ */ q("null", [], () => null), GR = /* @__PURE__ */ ht("Infinity", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(1 / 0) : 1 / 0;
}), VR = /* @__PURE__ */ ht("NaN", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(NaN) : NaN;
}), HR = /* @__PURE__ */ ht("pi", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? Gc(t) : jN;
}), ZR = /* @__PURE__ */ ht("tau", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? SM(t) : eA;
}), YR = /* @__PURE__ */ ht("e", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? EM(t) : rA;
}), WR = /* @__PURE__ */ ht("phi", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? DM(t) : tA;
}), JR = /* @__PURE__ */ ht("LN2", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(2).ln() : Math.LN2;
}), XR = /* @__PURE__ */ ht("LN10", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(10).ln() : Math.LN10;
}), KR = /* @__PURE__ */ ht("LOG2E", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(1).div(new t(2).ln()) : Math.LOG2E;
}), QR = /* @__PURE__ */ ht("LOG10E", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(1).div(new t(10).ln()) : Math.LOG10E;
}), jR = /* @__PURE__ */ ht(
  // eslint-disable-line camelcase
  "SQRT1_2",
  ["config", "?BigNumber"],
  (r) => {
    var {
      config: e,
      BigNumber: t
    } = r;
    return e.number === "BigNumber" ? new t("0.5").sqrt() : Math.SQRT1_2;
  }
), e8 = /* @__PURE__ */ ht("SQRT2", ["config", "?BigNumber"], (r) => {
  var {
    config: e,
    BigNumber: t
  } = r;
  return e.number === "BigNumber" ? new t(2).sqrt() : Math.SQRT2;
}), r8 = /* @__PURE__ */ ht("i", ["Complex"], (r) => {
  var {
    Complex: e
  } = r;
  return e.I;
}), t8 = /* @__PURE__ */ q("version", [], () => LR);
function ht(r, e, t) {
  return q(r, e, t, {
    recreateOnConfigChange: !0
  });
}
var n8 = /* @__PURE__ */ Ze("speedOfLight", "299792458", "m s^-1"), a8 = /* @__PURE__ */ Ze("gravitationConstant", "6.67430e-11", "m^3 kg^-1 s^-2"), i8 = /* @__PURE__ */ Ze("planckConstant", "6.62607015e-34", "J s"), o8 = /* @__PURE__ */ Ze("reducedPlanckConstant", "1.0545718176461565e-34", "J s"), s8 = /* @__PURE__ */ Ze("magneticConstant", "1.25663706212e-6", "N A^-2"), u8 = /* @__PURE__ */ Ze("electricConstant", "8.8541878128e-12", "F m^-1"), c8 = /* @__PURE__ */ Ze("vacuumImpedance", "376.730313667", "ohm"), l8 = /* @__PURE__ */ Ze("coulomb", "8.987551792261171e9", "N m^2 C^-2"), f8 = /* @__PURE__ */ Ze("elementaryCharge", "1.602176634e-19", "C"), m8 = /* @__PURE__ */ Ze("bohrMagneton", "9.2740100783e-24", "J T^-1"), v8 = /* @__PURE__ */ Ze("conductanceQuantum", "7.748091729863649e-5", "S"), p8 = /* @__PURE__ */ Ze("inverseConductanceQuantum", "12906.403729652257", "ohm"), d8 = /* @__PURE__ */ Ze("magneticFluxQuantum", "2.0678338484619295e-15", "Wb"), h8 = /* @__PURE__ */ Ze("nuclearMagneton", "5.0507837461e-27", "J T^-1"), g8 = /* @__PURE__ */ Ze("klitzing", "25812.807459304513", "ohm"), y8 = /* @__PURE__ */ Ze("bohrRadius", "5.29177210903e-11", "m"), b8 = /* @__PURE__ */ Ze("classicalElectronRadius", "2.8179403262e-15", "m"), x8 = /* @__PURE__ */ Ze("electronMass", "9.1093837015e-31", "kg"), w8 = /* @__PURE__ */ Ze("fermiCoupling", "1.1663787e-5", "GeV^-2"), N8 = ys("fineStructure", 0.0072973525693), A8 = /* @__PURE__ */ Ze("hartreeEnergy", "4.3597447222071e-18", "J"), E8 = /* @__PURE__ */ Ze("protonMass", "1.67262192369e-27", "kg"), D8 = /* @__PURE__ */ Ze("deuteronMass", "3.3435830926e-27", "kg"), S8 = /* @__PURE__ */ Ze("neutronMass", "1.6749271613e-27", "kg"), C8 = /* @__PURE__ */ Ze("quantumOfCirculation", "3.6369475516e-4", "m^2 s^-1"), M8 = /* @__PURE__ */ Ze("rydberg", "10973731.568160", "m^-1"), O8 = /* @__PURE__ */ Ze("thomsonCrossSection", "6.6524587321e-29", "m^2"), T8 = ys("weakMixingAngle", 0.2229), B8 = ys("efimovFactor", 22.7), _8 = /* @__PURE__ */ Ze("atomicMass", "1.66053906660e-27", "kg"), F8 = /* @__PURE__ */ Ze("avogadro", "6.02214076e23", "mol^-1"), $8 = /* @__PURE__ */ Ze("boltzmann", "1.380649e-23", "J K^-1"), R8 = /* @__PURE__ */ Ze("faraday", "96485.33212331001", "C mol^-1"), I8 = /* @__PURE__ */ Ze("firstRadiation", "3.7417718521927573e-16", "W m^2"), P8 = /* @__PURE__ */ Ze("loschmidt", "2.686780111798444e25", "m^-3"), q8 = /* @__PURE__ */ Ze("gasConstant", "8.31446261815324", "J K^-1 mol^-1"), L8 = /* @__PURE__ */ Ze("molarPlanckConstant", "3.990312712893431e-10", "J s mol^-1"), z8 = /* @__PURE__ */ Ze("molarVolume", "0.022413969545014137", "m^3 mol^-1"), U8 = ys("sackurTetrode", -1.16487052358), k8 = /* @__PURE__ */ Ze("secondRadiation", "0.014387768775039337", "m K"), G8 = /* @__PURE__ */ Ze("stefanBoltzmann", "5.67037441918443e-8", "W m^-2 K^-4"), V8 = /* @__PURE__ */ Ze("wienDisplacement", "2.897771955e-3", "m K"), H8 = /* @__PURE__ */ Ze("molarMass", "0.99999999965e-3", "kg mol^-1"), Z8 = /* @__PURE__ */ Ze("molarMassC12", "11.9999999958e-3", "kg mol^-1"), Y8 = /* @__PURE__ */ Ze("gravity", "9.80665", "m s^-2"), W8 = /* @__PURE__ */ Ze("planckLength", "1.616255e-35", "m"), J8 = /* @__PURE__ */ Ze("planckMass", "2.176435e-8", "kg"), X8 = /* @__PURE__ */ Ze("planckTime", "5.391245e-44", "s"), K8 = /* @__PURE__ */ Ze("planckCharge", "1.87554603778e-18", "C"), Q8 = /* @__PURE__ */ Ze("planckTemperature", "1.416785e+32", "K");
function Ze(r, e, t) {
  var n = ["config", "Unit", "BigNumber"];
  return q(r, n, (a) => {
    var {
      config: i,
      Unit: o,
      BigNumber: f
    } = a, l = i.number === "BigNumber" ? new f(e) : parseFloat(e), u = new o(l, t);
    return u.fixPrefix = !0, u;
  });
}
function ys(r, e) {
  var t = ["config", "BigNumber"];
  return q(r, t, (n) => {
    var {
      config: a,
      BigNumber: i
    } = n;
    return a.number === "BigNumber" ? new i(e) : e;
  });
}
var j8 = "apply", eI = ["typed", "isInteger"], rI = /* @__PURE__ */ q(j8, eI, (r) => {
  var {
    typed: e,
    isInteger: t
  } = r, n = Pc({
    typed: e,
    isInteger: t
  });
  return e("apply", {
    "...any": function(i) {
      var o = i[1];
      Xe(o) ? i[1] = o - 1 : rr(o) && (i[1] = o.minus(1));
      try {
        return n.apply(null, i);
      } catch (f) {
        throw st(f);
      }
    }
  });
}, {
  isTransformFunction: !0
}), tI = "column", nI = ["typed", "Index", "matrix", "range"], aI = /* @__PURE__ */ q(tI, nI, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: a
  } = r, i = Y0({
    typed: e,
    Index: t,
    matrix: n,
    range: a
  });
  return e("column", {
    "...any": function(f) {
      var l = f.length - 1, u = f[l];
      Xe(u) && (f[l] = u - 1);
      try {
        return i.apply(null, f);
      } catch (s) {
        throw st(s);
      }
    }
  });
}, {
  isTransformFunction: !0
});
function Qc(r, e, t) {
  var n = r.filter(function(f) {
    return Ir(f) && !(f.name in e) && !t.has(f.name);
  })[0];
  if (!n)
    throw new Error('No undefined variable found in inline expression "' + r + '"');
  var a = n.name, i = hi(t), o = r.compile();
  return function(l) {
    return i.set(a, l), o.evaluate(i);
  };
}
var iI = "filter", oI = ["typed"], sI = /* @__PURE__ */ q(iI, oI, (r) => {
  var {
    typed: e
  } = r;
  function t(a, i, o) {
    var f, l;
    return a[0] && (f = a[0].compile().evaluate(o)), a[1] && (Ir(a[1]) || Ci(a[1]) ? l = a[1].compile().evaluate(o) : l = Qc(a[1], i, o)), n(f, l);
  }
  t.rawArgs = !0;
  var n = e("filter", {
    "Array, function": gd,
    "Matrix, function": function(i, o) {
      return i.create(gd(i.toArray(), o));
    },
    "Array, RegExp": _o,
    "Matrix, RegExp": function(i, o) {
      return i.create(_o(i.toArray(), o));
    }
  });
  return t;
}, {
  isTransformFunction: !0
});
function gd(r, e) {
  return Ch(r, function(t, n, a) {
    return Qa(e, t, [n + 1], a, "filter");
  });
}
var uI = "forEach", cI = ["typed"], lI = /* @__PURE__ */ q(uI, cI, (r) => {
  var {
    typed: e
  } = r;
  function t(a, i, o) {
    var f, l;
    return a[0] && (f = a[0].compile().evaluate(o)), a[1] && (Ir(a[1]) || Ci(a[1]) ? l = a[1].compile().evaluate(o) : l = Qc(a[1], i, o)), n(f, l);
  }
  t.rawArgs = !0;
  var n = e("forEach", {
    "Array | Matrix, function": function(i, o) {
      var f = function l(u, s) {
        if (Array.isArray(u))
          cs(u, function(c, m) {
            l(c, s.concat(m + 1));
          });
        else
          return Qa(o, u, s, i, "forEach");
      };
      f(i.valueOf(), []);
    }
  });
  return t;
}, {
  isTransformFunction: !0
}), fI = "index", mI = ["Index", "getMatrixDataType"], vI = /* @__PURE__ */ q(fI, mI, (r) => {
  var {
    Index: e,
    getMatrixDataType: t
  } = r;
  return function() {
    for (var a = [], i = 0, o = arguments.length; i < o; i++) {
      var f = arguments[i];
      if (Oc(f))
        f.start--, f.end -= f.step > 0 ? 0 : 2;
      else if (f && f.isSet === !0)
        f = f.map(function(u) {
          return u - 1;
        });
      else if (sr(f) || Le(f))
        t(f) !== "boolean" && (f = f.map(function(u) {
          return u - 1;
        }));
      else if (Xe(f))
        f--;
      else if (rr(f))
        f = f.toNumber() - 1;
      else if (typeof f != "string")
        throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");
      a[i] = f;
    }
    var l = new e();
    return e.apply(l, a), l;
  };
}, {
  isTransformFunction: !0
}), pI = "map", dI = ["typed"], hI = /* @__PURE__ */ q(pI, dI, (r) => {
  var {
    typed: e
  } = r;
  function t(a, i, o) {
    var f, l;
    return a[0] && (f = a[0].compile().evaluate(o)), a[1] && (Ir(a[1]) || Ci(a[1]) ? l = a[1].compile().evaluate(o) : l = Qc(a[1], i, o)), n(f, l);
  }
  t.rawArgs = !0;
  var n = e("map", {
    "Array, function": function(i, o) {
      return yd(i, o, i);
    },
    "Matrix, function": function(i, o) {
      return i.create(yd(i.valueOf(), o, i));
    }
  });
  return t;
}, {
  isTransformFunction: !0
});
function yd(r, e, t) {
  function n(a, i) {
    return Array.isArray(a) ? sn(a, function(o, f) {
      return n(o, i.concat(f + 1));
    }) : Qa(e, a, i, t, "map");
  }
  return n(r, []);
}
function Fn(r) {
  if (r.length === 2 && Cn(r[0])) {
    r = r.slice();
    var e = r[1];
    Xe(e) ? r[1] = e - 1 : rr(e) && (r[1] = e.minus(1));
  }
  return r;
}
var gI = "max", yI = ["typed", "config", "numeric", "larger"], bI = /* @__PURE__ */ q(gI, yI, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    larger: a
  } = r, i = tg({
    typed: e,
    config: t,
    numeric: n,
    larger: a
  });
  return e("max", {
    "...any": function(f) {
      f = Fn(f);
      try {
        return i.apply(null, f);
      } catch (l) {
        throw st(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), xI = "mean", wI = ["typed", "add", "divide"], NI = /* @__PURE__ */ q(xI, wI, (r) => {
  var {
    typed: e,
    add: t,
    divide: n
  } = r, a = fg({
    typed: e,
    add: t,
    divide: n
  });
  return e("mean", {
    "...any": function(o) {
      o = Fn(o);
      try {
        return a.apply(null, o);
      } catch (f) {
        throw st(f);
      }
    }
  });
}, {
  isTransformFunction: !0
}), AI = "min", EI = ["typed", "config", "numeric", "smaller"], DI = /* @__PURE__ */ q(AI, EI, (r) => {
  var {
    typed: e,
    config: t,
    numeric: n,
    smaller: a
  } = r, i = ng({
    typed: e,
    config: t,
    numeric: n,
    smaller: a
  });
  return e("min", {
    "...any": function(f) {
      f = Fn(f);
      try {
        return i.apply(null, f);
      } catch (l) {
        throw st(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), SI = "range", CI = ["typed", "config", "?matrix", "?bignumber", "smaller", "smallerEq", "larger", "largerEq", "add", "isPositive"], MI = /* @__PURE__ */ q(SI, CI, (r) => {
  var {
    typed: e,
    config: t,
    matrix: n,
    bignumber: a,
    smaller: i,
    smallerEq: o,
    larger: f,
    largerEq: l,
    add: u,
    isPositive: s
  } = r, c = K0({
    typed: e,
    config: t,
    matrix: n,
    bignumber: a,
    smaller: i,
    smallerEq: o,
    larger: f,
    largerEq: l,
    add: u,
    isPositive: s
  });
  return e("range", {
    "...any": function(v) {
      var d = v.length - 1, p = v[d];
      return typeof p != "boolean" && v.push(!0), c.apply(null, v);
    }
  });
}, {
  isTransformFunction: !0
}), OI = "row", TI = ["typed", "Index", "matrix", "range"], BI = /* @__PURE__ */ q(OI, TI, (r) => {
  var {
    typed: e,
    Index: t,
    matrix: n,
    range: a
  } = r, i = Q0({
    typed: e,
    Index: t,
    matrix: n,
    range: a
  });
  return e("row", {
    "...any": function(f) {
      var l = f.length - 1, u = f[l];
      Xe(u) && (f[l] = u - 1);
      try {
        return i.apply(null, f);
      } catch (s) {
        throw st(s);
      }
    }
  });
}, {
  isTransformFunction: !0
}), _I = "subset", FI = ["typed", "matrix", "zeros", "add"], $I = /* @__PURE__ */ q(_I, FI, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    add: a
  } = r, i = j0({
    typed: e,
    matrix: t,
    zeros: n,
    add: a
  });
  return e("subset", {
    "...any": function(f) {
      try {
        return i.apply(null, f);
      } catch (l) {
        throw st(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), RI = "concat", II = ["typed", "matrix", "isInteger"], PI = /* @__PURE__ */ q(RI, II, (r) => {
  var {
    typed: e,
    matrix: t,
    isInteger: n
  } = r, a = Z0({
    typed: e,
    matrix: t,
    isInteger: n
  });
  return e("concat", {
    "...any": function(o) {
      var f = o.length - 1, l = o[f];
      Xe(l) ? o[f] = l - 1 : rr(l) && (o[f] = l.minus(1));
      try {
        return a.apply(null, o);
      } catch (u) {
        throw st(u);
      }
    }
  });
}, {
  isTransformFunction: !0
}), bd = "diff", qI = ["typed", "matrix", "subtract", "number", "bignumber"], LI = /* @__PURE__ */ q(bd, qI, (r) => {
  var {
    typed: e,
    matrix: t,
    subtract: n,
    number: a,
    bignumber: i
  } = r, o = W0({
    typed: e,
    matrix: t,
    subtract: n,
    number: a,
    bignumber: i
  });
  return e(bd, {
    "...any": function(l) {
      l = Fn(l);
      try {
        return o.apply(null, l);
      } catch (u) {
        throw st(u);
      }
    }
  });
}, {
  isTransformFunction: !0
}), zI = "std", UI = ["typed", "map", "sqrt", "variance"], kI = /* @__PURE__ */ q(zI, UI, (r) => {
  var {
    typed: e,
    map: t,
    sqrt: n,
    variance: a
  } = r, i = pg({
    typed: e,
    map: t,
    sqrt: n,
    variance: a
  });
  return e("std", {
    "...any": function(f) {
      f = Fn(f);
      try {
        return i.apply(null, f);
      } catch (l) {
        throw st(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), xd = "sum", GI = ["typed", "config", "add", "numeric"], VI = /* @__PURE__ */ q(xd, GI, (r) => {
  var {
    typed: e,
    config: t,
    add: n,
    numeric: a
  } = r, i = cg({
    typed: e,
    config: t,
    add: n,
    numeric: a
  });
  return e(xd, {
    "...any": function(f) {
      f = Fn(f);
      try {
        return i.apply(null, f);
      } catch (l) {
        throw st(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), HI = "quantileSeq", ZI = ["typed", "bignumber", "add", "subtract", "divide", "multiply", "partitionSelect", "compare", "isInteger", "smaller", "smallerEq", "larger"], YI = /* @__PURE__ */ q(HI, ZI, (r) => {
  var {
    typed: e,
    bignumber: t,
    add: n,
    subtract: a,
    divide: i,
    multiply: o,
    partitionSelect: f,
    compare: l,
    isInteger: u,
    smaller: s,
    smallerEq: c,
    larger: m
  } = r, v = vg({
    typed: e,
    bignumber: t,
    add: n,
    subtract: a,
    divide: i,
    multiply: o,
    partitionSelect: f,
    compare: l,
    isInteger: u,
    smaller: s,
    smallerEq: c,
    larger: m
  });
  return e("quantileSeq", {
    "Array | Matrix, number | BigNumber": v,
    "Array | Matrix, number | BigNumber, number": (p, b, g) => v(p, b, d(g)),
    "Array | Matrix, number | BigNumber, boolean": v,
    "Array | Matrix, number | BigNumber, boolean, number": (p, b, g, N) => v(p, b, g, d(N)),
    "Array | Matrix, Array | Matrix": v,
    "Array | Matrix, Array | Matrix, number": (p, b, g) => v(p, b, d(g)),
    "Array | Matrix, Array | Matrix, boolean": v,
    "Array | Matrix, Array | Matrix, boolean, number": (p, b, g, N) => v(p, b, g, d(N))
  });
  function d(p) {
    return Fn([[], p])[1];
  }
}, {
  isTransformFunction: !0
}), wd = "cumsum", WI = ["typed", "add", "unaryPlus"], JI = /* @__PURE__ */ q(wd, WI, (r) => {
  var {
    typed: e,
    add: t,
    unaryPlus: n
  } = r, a = lg({
    typed: e,
    add: t,
    unaryPlus: n
  });
  return e(wd, {
    "...any": function(o) {
      if (o.length === 2 && Cn(o[0])) {
        var f = o[1];
        Xe(f) ? o[1] = f - 1 : rr(f) && (o[1] = f.minus(1));
      }
      try {
        return a.apply(null, o);
      } catch (l) {
        throw st(l);
      }
    }
  });
}, {
  isTransformFunction: !0
}), Nd = "variance", XI = ["typed", "add", "subtract", "multiply", "divide", "apply", "isNaN"], KI = /* @__PURE__ */ q(Nd, XI, (r) => {
  var {
    typed: e,
    add: t,
    subtract: n,
    multiply: a,
    divide: i,
    apply: o,
    isNaN: f
  } = r, l = mg({
    typed: e,
    add: t,
    subtract: n,
    multiply: a,
    divide: i,
    apply: o,
    isNaN: f
  });
  return e(Nd, {
    "...any": function(s) {
      s = Fn(s);
      try {
        return l.apply(null, s);
      } catch (c) {
        throw st(c);
      }
    }
  });
}, {
  isTransformFunction: !0
}), Ad = "print", QI = ["typed", "matrix", "zeros", "add"], jI = /* @__PURE__ */ q(Ad, QI, (r) => {
  var {
    typed: e,
    matrix: t,
    zeros: n,
    add: a
  } = r, i = rg({
    typed: e,
    matrix: t,
    zeros: n,
    add: a
  });
  return e(Ad, {
    "string, Object | Array": function(l, u) {
      return i(o(l), u);
    },
    "string, Object | Array, number | Object": function(l, u, s) {
      return i(o(l), u, s);
    }
  });
  function o(f) {
    return f.replace(eg, (l) => {
      var u = l.slice(1).split("."), s = u.map(function(c) {
        return !isNaN(c) && c.length > 0 ? parseInt(c) - 1 : c;
      });
      return "$" + s.join(".");
    });
  }
}, {
  isTransformFunction: !0
}), Me = /* @__PURE__ */ MN({
  config: he
}), gr = /* @__PURE__ */ _N({}), Ed = /* @__PURE__ */ YR({
  BigNumber: Me,
  config: he
}), e6 = /* @__PURE__ */ UR({}), r6 = /* @__PURE__ */ N8({
  BigNumber: Me,
  config: he
}), ea = /* @__PURE__ */ IN({}), gg = /* @__PURE__ */ r8({
  Complex: gr
}), t6 = /* @__PURE__ */ GR({
  BigNumber: Me,
  config: he
}), n6 = /* @__PURE__ */ XR({
  BigNumber: Me,
  config: he
}), a6 = /* @__PURE__ */ QR({
  BigNumber: Me,
  config: he
}), bs = /* @__PURE__ */ kN({}), i6 = /* @__PURE__ */ VR({
  BigNumber: Me,
  config: he
}), o6 = /* @__PURE__ */ kR({}), s6 = /* @__PURE__ */ WR({
  BigNumber: Me,
  config: he
}), u6 = /* @__PURE__ */ LN({}), yg = /* @__PURE__ */ _w({}), c6 = /* @__PURE__ */ jR({
  BigNumber: Me,
  config: he
}), l6 = /* @__PURE__ */ U8({
  BigNumber: Me,
  config: he
}), bg = /* @__PURE__ */ ZR({
  BigNumber: Me,
  config: he
}), f6 = /* @__PURE__ */ zR({}), m6 = /* @__PURE__ */ t8({}), Qe = /* @__PURE__ */ ZN({
  Matrix: bs
}), v6 = /* @__PURE__ */ B8({
  BigNumber: Me,
  config: he
}), p6 = /* @__PURE__ */ JR({
  BigNumber: Me,
  config: he
}), lc = /* @__PURE__ */ HR({
  BigNumber: Me,
  config: he
}), d6 = /* @__PURE__ */ qR({}), h6 = /* @__PURE__ */ e8({
  BigNumber: Me,
  config: he
}), Y = /* @__PURE__ */ Mw({
  BigNumber: Me,
  Complex: gr,
  DenseMatrix: Qe,
  Fraction: ea
}), jc = /* @__PURE__ */ nE({
  BigNumber: Me,
  config: he,
  typed: Y
}), g6 = /* @__PURE__ */ T8({
  BigNumber: Me,
  config: he
}), ut = /* @__PURE__ */ iE({
  typed: Y
}), y6 = /* @__PURE__ */ PM({
  Complex: gr,
  config: he,
  typed: Y
}), b6 = /* @__PURE__ */ UM({
  BigNumber: Me,
  typed: Y
}), x6 = /* @__PURE__ */ HM({
  BigNumber: Me,
  Complex: gr,
  config: he,
  typed: Y
}), $r = /* @__PURE__ */ cE({
  typed: Y
}), w6 = /* @__PURE__ */ Q2({
  typed: Y
}), N6 = /* @__PURE__ */ KM({
  BigNumber: Me,
  Complex: gr,
  config: he,
  typed: Y
}), A6 = /* @__PURE__ */ tO({
  typed: Y
}), xg = /* @__PURE__ */ iO({
  typed: Y
}), E6 = /* @__PURE__ */ cO({
  Complex: gr,
  config: he,
  typed: Y
}), mt = /* @__PURE__ */ PA({
  BigNumber: Me,
  typed: Y
}), D6 = /* @__PURE__ */ V2({
  typed: Y
}), S6 = /* @__PURE__ */ $A({
  typed: Y
}), C6 = /* @__PURE__ */ WN({
  typed: Y
}), xs = /* @__PURE__ */ d$({
  typed: Y
}), ws = /* @__PURE__ */ zA({
  Complex: gr,
  typed: Y
}), ra = /* @__PURE__ */ eD({
  typed: Y
}), el = /* @__PURE__ */ fO({
  typed: Y
}), M6 = /* @__PURE__ */ dO({
  BigNumber: Me,
  typed: Y
}), O6 = /* @__PURE__ */ bO({
  BigNumber: Me,
  typed: Y
}), T6 = /* @__PURE__ */ EE({
  typed: Y
}), nr = /* @__PURE__ */ NA({
  config: he,
  typed: Y
}), B6 = /* @__PURE__ */ AS({
  typed: Y
}), wg = /* @__PURE__ */ SE({
  typed: Y
}), _6 = /* @__PURE__ */ ME({
  Complex: gr,
  typed: Y
}), F6 = /* @__PURE__ */ wD({
  typed: Y
}), $6 = /* @__PURE__ */ DD({
  typed: Y
}), Ti = /* @__PURE__ */ $S({
  typed: Y
}), rl = /* @__PURE__ */ MD({
  typed: Y
}), R6 = /* @__PURE__ */ zS({
  format: Ti,
  typed: Y
}), tl = /* @__PURE__ */ tD({
  typed: Y
}), lt = /* @__PURE__ */ XN({
  typed: Y
}), $n = /* @__PURE__ */ sA({
  typed: Y
}), ta = /* @__PURE__ */ vA({
  typed: Y
}), Lt = /* @__PURE__ */ dA({
  typed: Y
}), I6 = /* @__PURE__ */ KR({
  BigNumber: Me,
  config: he
}), P6 = /* @__PURE__ */ w$({
  Complex: gr,
  typed: Y
}), q6 = /* @__PURE__ */ c2({
  Complex: gr,
  config: he,
  typed: Y
}), Ng = /* @__PURE__ */ f2({
  Complex: gr,
  config: he,
  typed: Y
}), na = /* @__PURE__ */ $D({
  typed: Y
}), Mr = /* @__PURE__ */ p2({
  typed: Y
}), Ag = /* @__PURE__ */ oD({
  typed: Y
}), fn = /* @__PURE__ */ TA({
  typed: Y
}), L6 = /* @__PURE__ */ qS({
  format: Ti,
  typed: Y
}), z6 = /* @__PURE__ */ J$({
  config: he,
  typed: Y
}), U6 = /* @__PURE__ */ rg({
  typed: Y
}), k6 = /* @__PURE__ */ K$({
  config: he,
  typed: Y
}), nl = /* @__PURE__ */ aD({
  typed: Y
}), G6 = /* @__PURE__ */ AO({
  BigNumber: Me,
  typed: Y
}), Eg = /* @__PURE__ */ x2({
  BigNumber: Me,
  Fraction: ea,
  complex: ws,
  typed: Y
}), Ns = /* @__PURE__ */ CO({
  typed: Y
}), mn = /* @__PURE__ */ DA({
  Matrix: bs,
  equalScalar: nr,
  typed: Y
}), V6 = /* @__PURE__ */ jA({
  typed: Y
}), H6 = /* @__PURE__ */ D2({
  typed: Y
}), Z6 = /* @__PURE__ */ _A({
  typed: Y
}), Et = /* @__PURE__ */ fE({
  typed: Y
}), Y6 = /* @__PURE__ */ BO({
  typed: Y
}), Dg = /* @__PURE__ */ bA({
  typed: Y
}), W6 = /* @__PURE__ */ LM({
  Complex: gr,
  config: he,
  typed: Y
}), J6 = /* @__PURE__ */ YM({
  BigNumber: Me,
  typed: Y
}), al = /* @__PURE__ */ Pc({
  isInteger: lt,
  typed: Y
}), X6 = /* @__PURE__ */ JM({
  BigNumber: Me,
  Complex: gr,
  config: he,
  typed: Y
}), K6 = /* @__PURE__ */ IS({
  format: Ti,
  typed: Y
}), Q6 = /* @__PURE__ */ g$({
  typed: Y
}), j6 = /* @__PURE__ */ vO({
  typed: Y
}), e9 = /* @__PURE__ */ wO({
  BigNumber: Me,
  typed: Y
}), Bi = /* @__PURE__ */ gA({
  typed: Y
}), r9 = /* @__PURE__ */ HS({
  typed: Y
}), t9 = /* @__PURE__ */ j$({
  config: he,
  typed: Y
}), n9 = /* @__PURE__ */ DO({
  BigNumber: Me,
  typed: Y
}), a9 = /* @__PURE__ */ OO({
  typed: Y
}), i9 = /* @__PURE__ */ FM({
  SparseMatrix: mn,
  typed: Y
}), zt = /* @__PURE__ */ A2({
  Complex: gr,
  config: he,
  typed: Y
}), o9 = /* @__PURE__ */ $O({
  typed: Y
}), Xt = /* @__PURE__ */ rE({
  typed: Y
}), s9 = /* @__PURE__ */ GM({
  BigNumber: Me,
  Complex: gr,
  config: he,
  typed: Y
}), u9 = /* @__PURE__ */ gO({
  BigNumber: Me,
  typed: Y
}), ei = /* @__PURE__ */ GA({
  Fraction: ea,
  typed: Y
}), aa = /* @__PURE__ */ cA({
  typed: Y
}), Ce = /* @__PURE__ */ HA({
  DenseMatrix: Qe,
  Matrix: bs,
  SparseMatrix: mn,
  typed: Y
}), c9 = /* @__PURE__ */ YA({
  isZero: Lt,
  matrix: Ce,
  typed: Y
}), l9 = /* @__PURE__ */ TS({
  isNaN: Bi,
  isNumeric: aa,
  typed: Y
}), $t = /* @__PURE__ */ WS({
  bignumber: mt,
  fraction: ei,
  number: fn
}), Sg = /* @__PURE__ */ _S({
  config: he,
  multiplyScalar: Mr,
  numeric: $t,
  typed: Y
}), f9 = /* @__PURE__ */ kD({
  isInteger: lt,
  matrix: Ce,
  typed: Y
}), Jr = /* @__PURE__ */ QD({
  matrix: Ce,
  config: he,
  typed: Y
}), m9 = /* @__PURE__ */ eS({
  matrix: Ce,
  typed: Y
}), _i = /* @__PURE__ */ oS({
  matrix: Ce,
  typed: Y
}), Cg = /* @__PURE__ */ O2({
  BigNumber: Me,
  config: he,
  matrix: Ce,
  typed: Y
}), it = /* @__PURE__ */ lS({
  BigNumber: Me,
  config: he,
  matrix: Ce,
  typed: Y
}), v9 = /* @__PURE__ */ jM({
  Complex: gr,
  config: he,
  typed: Y
}), Mg = /* @__PURE__ */ vE({
  BigNumber: Me,
  Complex: gr,
  Fraction: ea,
  config: he,
  isNegative: $n,
  matrix: Ce,
  typed: Y,
  unaryMinus: Xt
}), cr = /* @__PURE__ */ Z0({
  isInteger: lt,
  matrix: Ce,
  typed: Y
}), p9 = /* @__PURE__ */ pD({
  prod: Sg,
  size: Jr,
  typed: Y
}), il = /* @__PURE__ */ uS({
  conj: ra,
  transpose: _i,
  typed: Y
}), Og = /* @__PURE__ */ yD({
  DenseMatrix: Qe,
  SparseMatrix: mn,
  matrix: Ce,
  typed: Y
}), Er = /* @__PURE__ */ XS({
  numeric: $t,
  typed: Y
}), Fi = /* @__PURE__ */ lC({
  DenseMatrix: Qe,
  concat: cr,
  divideScalar: Er,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), Dt = /* @__PURE__ */ LC({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), $i = /* @__PURE__ */ AD({
  matrix: Ce,
  typed: Y
}), d9 = /* @__PURE__ */ fA({
  isNumeric: aa,
  typed: Y
}), Rn = /* @__PURE__ */ TD({
  BigNumber: Me,
  DenseMatrix: Qe,
  SparseMatrix: mn,
  config: he,
  matrix: Ce,
  typed: Y
}), h9 = /* @__PURE__ */ _D({
  matrix: Ce,
  multiplyScalar: Mr,
  typed: Y
}), As = /* @__PURE__ */ jC({
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  matrix: Ce,
  typed: Y
}), g9 = /* @__PURE__ */ NC({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y,
  zeros: it
}), Tg = /* @__PURE__ */ mC({
  DenseMatrix: Qe,
  divideScalar: Er,
  equalScalar: nr,
  matrix: Ce,
  multiplyScalar: Mr,
  subtractScalar: Et,
  typed: Y
}), ol = /* @__PURE__ */ KA({
  flatten: $i,
  matrix: Ce,
  size: Jr,
  typed: Y
}), y9 = /* @__PURE__ */ y2({
  BigNumber: Me,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), b9 = /* @__PURE__ */ LD({
  BigNumber: Me,
  config: he,
  matrix: Ce,
  typed: Y
}), sl = /* @__PURE__ */ h3({
  addScalar: $r,
  complex: ws,
  conj: ra,
  divideScalar: Er,
  equal: Dt,
  identity: Rn,
  isZero: Lt,
  matrix: Ce,
  multiplyScalar: Mr,
  sign: Eg,
  sqrt: zt,
  subtractScalar: Et,
  typed: Y,
  unaryMinus: Xt,
  zeros: it
}), x9 = /* @__PURE__ */ HD({
  config: he,
  matrix: Ce
}), w9 = /* @__PURE__ */ EC({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y,
  zeros: it
}), ri = /* @__PURE__ */ eC({
  BigNumber: Me,
  DenseMatrix: Qe,
  equalScalar: nr,
  matrix: Ce,
  typed: Y,
  zeros: it
}), tt = /* @__PURE__ */ VC({
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  matrix: Ce,
  typed: Y
}), Cr = /* @__PURE__ */ C2({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  subtractScalar: Et,
  typed: Y,
  unaryMinus: Xt
}), N9 = /* @__PURE__ */ GS({
  concat: cr,
  matrix: Ce,
  typed: Y
}), A9 = /* @__PURE__ */ aM({
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), ul = /* @__PURE__ */ pC({
  DenseMatrix: Qe,
  divideScalar: Er,
  equalScalar: nr,
  matrix: Ce,
  multiplyScalar: Mr,
  subtractScalar: Et,
  typed: Y
}), E9 = /* @__PURE__ */ lD({
  DenseMatrix: Qe,
  concat: cr,
  matrix: Ce,
  typed: Y
}), tr = /* @__PURE__ */ tT({
  DenseMatrix: Qe,
  SparseMatrix: mn,
  addScalar: $r,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), D9 = /* @__PURE__ */ sO({
  BigNumber: Me,
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), S9 = /* @__PURE__ */ k2({
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), C9 = /* @__PURE__ */ X2({
  DenseMatrix: Qe,
  concat: cr,
  matrix: Ce,
  typed: Y
}), M9 = /* @__PURE__ */ iR({
  addScalar: $r,
  combinations: xs,
  divideScalar: Er,
  isInteger: lt,
  isNegative: $n,
  multiplyScalar: Mr,
  typed: Y
}), ia = /* @__PURE__ */ TC({
  BigNumber: Me,
  DenseMatrix: Qe,
  Fraction: ea,
  concat: cr,
  config: he,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), Bg = /* @__PURE__ */ PC({
  concat: cr,
  matrix: Ce,
  typed: Y
}), O9 = /* @__PURE__ */ lg({
  add: tr,
  typed: Y,
  unaryPlus: jc
}), cl = /* @__PURE__ */ tM({
  equal: Dt,
  typed: Y
}), T9 = /* @__PURE__ */ W0({
  matrix: Ce,
  number: fn,
  subtract: Cr,
  typed: Y
}), B9 = /* @__PURE__ */ Q5({
  abs: ut,
  addScalar: $r,
  deepEqual: cl,
  divideScalar: Er,
  multiplyScalar: Mr,
  sqrt: zt,
  subtractScalar: Et,
  typed: Y
}), Es = /* @__PURE__ */ uT({
  addScalar: $r,
  conj: ra,
  multiplyScalar: Mr,
  size: Jr,
  typed: Y
}), _9 = /* @__PURE__ */ kC({
  compareText: Bg,
  isZero: Lt,
  typed: Y
}), _g = /* @__PURE__ */ G0({
  DenseMatrix: Qe,
  config: he,
  equalScalar: nr,
  matrix: Ce,
  round: ri,
  typed: Y,
  zeros: it
}), F9 = /* @__PURE__ */ n2({
  BigNumber: Me,
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  equalScalar: nr,
  matrix: Ce,
  round: ri,
  typed: Y,
  zeros: it
}), $9 = /* @__PURE__ */ aT({
  abs: ut,
  addScalar: $r,
  divideScalar: Er,
  isPositive: ta,
  multiplyScalar: Mr,
  smaller: tt,
  sqrt: zt,
  typed: Y
}), Fg = /* @__PURE__ */ pM({
  DenseMatrix: Qe,
  smaller: tt
}), Zr = /* @__PURE__ */ gM({
  ImmutableDenseMatrix: Fg,
  getMatrixDataType: rl
}), nt = /* @__PURE__ */ XC({
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  matrix: Ce,
  typed: Y
}), ll = /* @__PURE__ */ tC({
  Complex: gr,
  config: he,
  divideScalar: Er,
  typed: Y
}), R9 = /* @__PURE__ */ hC({
  DenseMatrix: Qe,
  divideScalar: Er,
  equalScalar: nr,
  matrix: Ce,
  multiplyScalar: Mr,
  subtractScalar: Et,
  typed: Y
}), I9 = /* @__PURE__ */ JA({
  flatten: $i,
  matrix: Ce,
  size: Jr,
  typed: Y
}), P9 = /* @__PURE__ */ ng({
  config: he,
  numeric: $t,
  smaller: tt,
  typed: Y
}), $g = /* @__PURE__ */ V0({
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  equalScalar: nr,
  matrix: Ce,
  round: ri,
  typed: Y,
  zeros: it
}), ur = /* @__PURE__ */ h2({
  addScalar: $r,
  dot: Es,
  equalScalar: nr,
  matrix: Ce,
  multiplyScalar: Mr,
  typed: Y
}), q9 = /* @__PURE__ */ oC({
  Complex: gr,
  config: he,
  divideScalar: Er,
  typed: Y
}), L9 = /* @__PURE__ */ uD({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), Ds = /* @__PURE__ */ sM({
  compare: ia,
  isNaN: Bi,
  isNumeric: aa,
  typed: Y
}), z9 = /* @__PURE__ */ SC({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y,
  zeros: it
}), Rg = /* @__PURE__ */ z3({
  SparseMatrix: mn,
  abs: ut,
  add: tr,
  divideScalar: Er,
  larger: nt,
  largerEq: As,
  multiply: ur,
  subtract: Cr,
  transpose: _i,
  typed: Y
}), gt = /* @__PURE__ */ j0({
  add: tr,
  matrix: Ce,
  typed: Y,
  zeros: it
}), fl = /* @__PURE__ */ cg({
  add: tr,
  config: he,
  numeric: $t,
  typed: Y
}), U9 = /* @__PURE__ */ fT({
  add: tr,
  matrix: Ce,
  typed: Y
}), Ig = /* @__PURE__ */ yC({
  DenseMatrix: Qe,
  divideScalar: Er,
  equalScalar: nr,
  matrix: Ce,
  multiplyScalar: Mr,
  subtractScalar: Et,
  typed: Y
}), k9 = /* @__PURE__ */ TR({
  Complex: gr,
  add: tr,
  multiply: ur,
  number: fn,
  typed: Y
}), G9 = /* @__PURE__ */ Z2({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), ml = /* @__PURE__ */ NE({
  DenseMatrix: Qe,
  config: he,
  equalScalar: nr,
  matrix: Ce,
  round: ri,
  typed: Y,
  zeros: it
}), Kt = /* @__PURE__ */ $C({
  compare: ia,
  typed: Y
}), V9 = /* @__PURE__ */ sR({
  addScalar: $r,
  combinations: xs,
  isInteger: lt,
  isNegative: $n,
  isPositive: ta,
  larger: nt,
  typed: Y
}), H9 = /* @__PURE__ */ hD({
  matrix: Ce,
  multiply: ur,
  subtract: Cr,
  typed: Y
}), Pg = /* @__PURE__ */ M5({
  divideScalar: Er,
  isZero: Lt,
  matrix: Ce,
  multiply: ur,
  subtractScalar: Et,
  typed: Y,
  unaryMinus: Xt
}), Z9 = /* @__PURE__ */ R2({
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  multiplyScalar: Mr,
  typed: Y
}), qg = /* @__PURE__ */ xM({
  larger: nt,
  smaller: tt
}), Lg = /* @__PURE__ */ BE({
  Complex: gr,
  DenseMatrix: Qe,
  ceil: ml,
  equalScalar: nr,
  floor: _g,
  matrix: Ce,
  typed: Y,
  zeros: it
}), zg = /* @__PURE__ */ vT({
  Index: Zr,
  typed: Y
}), Y9 = /* @__PURE__ */ r$({
  abs: ut,
  add: tr,
  addScalar: $r,
  config: he,
  divideScalar: Er,
  equalScalar: nr,
  flatten: $i,
  isNumeric: aa,
  isZero: Lt,
  matrix: Ce,
  multiply: ur,
  multiplyScalar: Mr,
  smaller: tt,
  subtract: Cr,
  typed: Y
}), W9 = /* @__PURE__ */ B2({
  BigNumber: Me,
  add: tr,
  config: he,
  equal: Dt,
  isInteger: lt,
  mod: $g,
  smaller: tt,
  typed: Y,
  xgcd: Cg
}), J9 = /* @__PURE__ */ s2({
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  typed: Y
}), X9 = /* @__PURE__ */ aC({
  Complex: gr,
  config: he,
  divideScalar: Er,
  log: ll,
  typed: Y
}), vl = /* @__PURE__ */ tg({
  config: he,
  larger: nt,
  numeric: $t,
  typed: Y
}), K9 = /* @__PURE__ */ IO({
  DenseMatrix: Qe,
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), Q9 = /* @__PURE__ */ zO({
  DenseMatrix: Qe,
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), j9 = /* @__PURE__ */ VO({
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), e7 = /* @__PURE__ */ WO({
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), Ga = /* @__PURE__ */ YC({
  DenseMatrix: Qe,
  concat: cr,
  config: he,
  matrix: Ce,
  typed: Y
}), r7 = /* @__PURE__ */ cM({
  compare: ia,
  compareNatural: Kt,
  matrix: Ce,
  typed: Y
}), t7 = /* @__PURE__ */ MC({
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  not: Ag,
  typed: Y,
  zeros: it
}), Va = /* @__PURE__ */ K0({
  bignumber: mt,
  matrix: Ce,
  add: tr,
  config: he,
  isPositive: ta,
  larger: nt,
  largerEq: As,
  smaller: tt,
  smallerEq: Ga,
  typed: Y
}), n7 = /* @__PURE__ */ Q0({
  Index: Zr,
  matrix: Ce,
  range: Va,
  typed: Y
}), Ug = /* @__PURE__ */ qO({
  DenseMatrix: Qe,
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), a7 = /* @__PURE__ */ ZO({
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), kg = /* @__PURE__ */ QO({
  Index: Zr,
  concat: cr,
  setDifference: Ug,
  size: Jr,
  subset: gt,
  typed: Y
}), Gg = /* @__PURE__ */ AM({
  FibonacciHeap: qg,
  addScalar: $r,
  equalScalar: nr
}), Vg = /* @__PURE__ */ Y0({
  Index: Zr,
  matrix: Ce,
  range: Va,
  typed: Y
}), oa = /* @__PURE__ */ T5({
  abs: ut,
  addScalar: $r,
  det: Pg,
  divideScalar: Er,
  identity: Rn,
  matrix: Ce,
  multiply: ur,
  typed: Y,
  unaryMinus: Xt
}), Hg = /* @__PURE__ */ p3({
  DenseMatrix: Qe,
  Spa: Gg,
  SparseMatrix: mn,
  abs: ut,
  addScalar: $r,
  divideScalar: Er,
  equalScalar: nr,
  larger: nt,
  matrix: Ce,
  multiplyScalar: Mr,
  subtractScalar: Et,
  typed: Y,
  unaryMinus: Xt
}), i7 = /* @__PURE__ */ _5({
  Complex: gr,
  add: tr,
  ctranspose: il,
  deepEqual: cl,
  divideScalar: Er,
  dot: Es,
  dotDivide: Fi,
  equal: Dt,
  inv: oa,
  matrix: Ce,
  multiply: ur,
  typed: Y
}), St = /* @__PURE__ */ QS({
  Complex: gr,
  config: he,
  fraction: ei,
  identity: Rn,
  inv: oa,
  matrix: Ce,
  multiply: ur,
  number: fn,
  typed: Y
}), Zg = /* @__PURE__ */ kO({
  DenseMatrix: Qe,
  Index: Zr,
  compareNatural: Kt,
  size: Jr,
  subset: gt,
  typed: Y
}), o7 = /* @__PURE__ */ eT({
  Index: Zr,
  concat: cr,
  setIntersect: Zg,
  setSymDifference: kg,
  size: Jr,
  subset: gt,
  typed: Y
}), s7 = /* @__PURE__ */ U5({
  abs: ut,
  add: tr,
  identity: Rn,
  inv: oa,
  map: na,
  max: vl,
  multiply: ur,
  size: Jr,
  sqrt: zt,
  subtract: Cr,
  typed: Y
}), ke = /* @__PURE__ */ OM({
  BigNumber: Me,
  Complex: gr,
  Fraction: ea,
  abs: ut,
  addScalar: $r,
  config: he,
  divideScalar: Er,
  equal: Dt,
  fix: Lg,
  format: Ti,
  isNumeric: aa,
  multiplyScalar: Mr,
  number: fn,
  pow: St,
  round: ri,
  subtractScalar: Et
}), u7 = /* @__PURE__ */ c8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), c7 = /* @__PURE__ */ V8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), l7 = /* @__PURE__ */ _8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), f7 = /* @__PURE__ */ m8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), m7 = /* @__PURE__ */ $8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), v7 = /* @__PURE__ */ v8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), p7 = /* @__PURE__ */ l8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), d7 = /* @__PURE__ */ D8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), h7 = /* @__PURE__ */ uC({
  DenseMatrix: Qe,
  concat: cr,
  equalScalar: nr,
  matrix: Ce,
  pow: St,
  typed: Y
}), g7 = /* @__PURE__ */ u8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), y7 = /* @__PURE__ */ f8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), b7 = /* @__PURE__ */ L5({
  abs: ut,
  add: tr,
  identity: Rn,
  inv: oa,
  multiply: ur,
  typed: Y
}), x7 = /* @__PURE__ */ R8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), Yg = /* @__PURE__ */ mS({
  addScalar: $r,
  ceil: ml,
  conj: ra,
  divideScalar: Er,
  dotDivide: Fi,
  exp: wg,
  i: gg,
  log2: Ng,
  matrix: Ce,
  multiplyScalar: Mr,
  pow: St,
  tau: bg,
  typed: Y
}), pl = /* @__PURE__ */ b$({
  BigNumber: Me,
  Complex: gr,
  config: he,
  multiplyScalar: Mr,
  pow: St,
  typed: Y
}), w7 = /* @__PURE__ */ a8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), N7 = /* @__PURE__ */ A8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), A7 = /* @__PURE__ */ pS({
  conj: ra,
  dotDivide: Fi,
  fft: Yg,
  typed: Y
}), E7 = /* @__PURE__ */ g8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), D7 = /* @__PURE__ */ P8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), S7 = /* @__PURE__ */ s8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), C7 = /* @__PURE__ */ H8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), M7 = /* @__PURE__ */ L8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), O7 = /* @__PURE__ */ S8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), T7 = /* @__PURE__ */ h8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), B7 = /* @__PURE__ */ K8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), _7 = /* @__PURE__ */ W8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), F7 = /* @__PURE__ */ Q8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), $7 = /* @__PURE__ */ E8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), R7 = /* @__PURE__ */ C8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), I7 = /* @__PURE__ */ o8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), P7 = /* @__PURE__ */ M8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), q7 = /* @__PURE__ */ k8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), L7 = /* @__PURE__ */ n8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), z7 = /* @__PURE__ */ G8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), U7 = /* @__PURE__ */ O8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), k7 = /* @__PURE__ */ F8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), G7 = /* @__PURE__ */ y8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), V7 = /* @__PURE__ */ RM({
  Unit: ke,
  typed: Y
}), Pr = /* @__PURE__ */ X5({
  divideScalar: Er,
  equalScalar: nr,
  inv: oa,
  matrix: Ce,
  multiply: ur,
  typed: Y
}), H7 = /* @__PURE__ */ x8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), Ri = /* @__PURE__ */ A$({
  gamma: pl,
  typed: Y
}), Z7 = /* @__PURE__ */ I8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), Y7 = /* @__PURE__ */ Y8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), W7 = /* @__PURE__ */ p8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), Wg = /* @__PURE__ */ k3({
  DenseMatrix: Qe,
  lsolve: Tg,
  lup: Hg,
  matrix: Ce,
  slu: Rg,
  typed: Y,
  usolve: ul
}), J7 = /* @__PURE__ */ d8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), X7 = /* @__PURE__ */ Z8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), K7 = /* @__PURE__ */ C$({
  add: tr,
  divide: Pr,
  factorial: Ri,
  isInteger: lt,
  isPositive: ta,
  multiply: ur,
  typed: Y
}), Q7 = /* @__PURE__ */ O$({
  factorial: Ri,
  typed: Y
}), j7 = /* @__PURE__ */ J8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), eP = /* @__PURE__ */ V3({
  add: tr,
  cbrt: Mg,
  divide: Pr,
  equalScalar: nr,
  im: tl,
  isZero: Lt,
  multiply: ur,
  re: nl,
  sqrt: zt,
  subtract: Cr,
  typeOf: Dg,
  typed: Y,
  unaryMinus: Xt
}), rP = /* @__PURE__ */ XO({
  compareNatural: Kt,
  typed: Y
}), tP = /* @__PURE__ */ xS({
  abs: ut,
  add: tr,
  bignumber: mt,
  divide: Pr,
  isNegative: $n,
  isPositive: ta,
  larger: nt,
  map: na,
  matrix: Ce,
  max: vl,
  multiply: ur,
  smaller: tt,
  subtract: Cr,
  typed: Y,
  unaryMinus: Xt
}), Jg = /* @__PURE__ */ rR({
  bignumber: mt,
  addScalar: $r,
  combinations: xs,
  divideScalar: Er,
  factorial: Ri,
  isInteger: lt,
  isNegative: $n,
  larger: nt,
  multiplyScalar: Mr,
  number: fn,
  pow: St,
  subtractScalar: Et,
  typed: Y
}), nP = /* @__PURE__ */ BM({
  Unit: ke,
  typed: Y
}), aP = /* @__PURE__ */ nR({
  addScalar: $r,
  isInteger: lt,
  isNegative: $n,
  stirlingS2: Jg,
  typed: Y
}), Xg = /* @__PURE__ */ P5({
  abs: ut,
  add: tr,
  addScalar: $r,
  atan: xg,
  bignumber: mt,
  column: Vg,
  complex: ws,
  config: he,
  cos: el,
  diag: Og,
  divideScalar: Er,
  dot: Es,
  equal: Dt,
  flatten: $i,
  im: tl,
  inv: oa,
  larger: nt,
  matrix: Ce,
  matrixFromColumns: ol,
  multiply: ur,
  multiplyScalar: Mr,
  number: fn,
  qr: sl,
  re: nl,
  sin: Ns,
  smaller: tt,
  sqrt: zt,
  subtract: Cr,
  typed: Y,
  usolve: ul,
  usolveAll: Ig
}), iP = /* @__PURE__ */ w8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), oP = /* @__PURE__ */ q8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), Kg = /* @__PURE__ */ fg({
  add: tr,
  divide: Pr,
  typed: Y
}), sP = /* @__PURE__ */ z8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), uP = /* @__PURE__ */ i8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), cP = /* @__PURE__ */ vg({
  bignumber: mt,
  add: tr,
  compare: ia,
  divide: Pr,
  isInteger: lt,
  larger: nt,
  multiply: ur,
  partitionSelect: Ds,
  smaller: tt,
  smallerEq: Ga,
  subtract: Cr,
  typed: Y
}), dl = /* @__PURE__ */ mg({
  add: tr,
  apply: al,
  divide: Pr,
  isNaN: Bi,
  multiply: ur,
  subtract: Cr,
  typed: Y
}), lP = /* @__PURE__ */ b8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), Qg = /* @__PURE__ */ o$({
  add: tr,
  compare: ia,
  divide: Pr,
  partitionSelect: Ds,
  typed: Y
}), fP = /* @__PURE__ */ v$({
  add: tr,
  divide: Pr,
  matrix: Ce,
  mean: Kg,
  multiply: ur,
  pow: St,
  sqrt: zt,
  subtract: Cr,
  sum: fl,
  typed: Y
}), mP = /* @__PURE__ */ _R({
  Complex: gr,
  add: tr,
  divide: Pr,
  matrix: Ce,
  multiply: ur,
  typed: Y
}), vP = /* @__PURE__ */ u$({
  abs: ut,
  map: na,
  median: Qg,
  subtract: Cr,
  typed: Y
}), pP = /* @__PURE__ */ pg({
  map: na,
  sqrt: zt,
  typed: Y,
  variance: dl
}), dP = /* @__PURE__ */ MS({
  BigNumber: Me,
  Complex: gr,
  add: tr,
  config: he,
  divide: Pr,
  equal: Dt,
  factorial: Ri,
  gamma: pl,
  isNegative: $n,
  multiply: ur,
  pi: lc,
  pow: St,
  sin: Ns,
  smallerEq: Ga,
  subtract: Cr,
  typed: Y
}), hl = /* @__PURE__ */ oT({
  abs: ut,
  add: tr,
  conj: ra,
  ctranspose: il,
  eigs: Xg,
  equalScalar: nr,
  larger: nt,
  matrix: Ce,
  multiply: ur,
  pow: St,
  smaller: tt,
  sqrt: zt,
  typed: Y
}), jg = /* @__PURE__ */ JD({
  BigNumber: Me,
  DenseMatrix: Qe,
  SparseMatrix: mn,
  addScalar: $r,
  config: he,
  cos: el,
  matrix: Ce,
  multiplyScalar: Mr,
  norm: hl,
  sin: Ns,
  typed: Y,
  unaryMinus: Xt
}), hP = /* @__PURE__ */ D$({
  divide: Pr,
  dotDivide: Fi,
  isNumeric: aa,
  log: ll,
  map: na,
  matrix: Ce,
  multiply: ur,
  sum: fl,
  typed: Y
}), gP = /* @__PURE__ */ X8({
  BigNumber: Me,
  Unit: ke,
  config: he
}), e1 = /* @__PURE__ */ H5({
  identity: Rn,
  matrix: Ce,
  multiply: ur,
  norm: hl,
  qr: sl,
  subtract: Cr,
  typed: Y
}), yP = /* @__PURE__ */ YD({
  multiply: ur,
  rotationMatrix: jg,
  typed: Y
}), r1 = /* @__PURE__ */ G5({
  abs: ut,
  add: tr,
  concat: cr,
  identity: Rn,
  index: zg,
  lusolve: Wg,
  matrix: Ce,
  matrixFromColumns: ol,
  multiply: ur,
  range: Va,
  schur: e1,
  subset: gt,
  subtract: Cr,
  transpose: _i,
  typed: Y
}), bP = /* @__PURE__ */ Y5({
  matrix: Ce,
  multiply: ur,
  sylvester: r1,
  transpose: _i,
  typed: Y
}), ti = {}, ni = {}, t1 = {}, Xr = hT({
  mathWithTransform: ni
}), ai = kT({
  Node: Xr
}), vn = VT({
  Node: Xr
}), sa = ZT({
  Node: Xr
}), n1 = XT({
  Node: Xr
}), ii = xT({
  Node: Xr
}), a1 = ST({
  Node: Xr,
  ResultSet: yg
}), i1 = MT({
  Node: Xr
}), In = IT({
  Node: Xr
}), o1 = WT({
  Node: Xr
}), xP = RR({
  classes: t1
}), gl = X3({
  math: ti,
  typed: Y
}), s1 = qT({
  Node: Xr,
  typed: Y
}), wP = S5({
  Chain: gl,
  typed: Y
}), oi = zT({
  Node: Xr,
  size: Jr
}), si = yT({
  Node: Xr,
  subset: gt
}), u1 = ET({
  matrix: Ce,
  Node: Xr,
  subset: gt
}), Pn = jT({
  Unit: ke,
  Node: Xr,
  math: ti
}), qn = r3({
  Node: Xr,
  SymbolNode: Pn,
  math: ti
}), Ut = n3({
  AccessorNode: si,
  ArrayNode: ii,
  AssignmentNode: u1,
  BlockNode: a1,
  ConditionalNode: i1,
  ConstantNode: In,
  FunctionAssignmentNode: s1,
  FunctionNode: qn,
  IndexNode: oi,
  ObjectNode: ai,
  OperatorNode: vn,
  ParenthesisNode: sa,
  RangeNode: o1,
  RelationalNode: n1,
  SymbolNode: Pn,
  config: he,
  numeric: $t,
  typed: Y
}), c1 = NR({
  ConstantNode: In,
  FunctionNode: qn,
  OperatorNode: vn,
  ParenthesisNode: sa,
  parse: Ut,
  typed: Y
}), yl = gR({
  bignumber: mt,
  fraction: ei,
  AccessorNode: si,
  ArrayNode: ii,
  ConstantNode: In,
  FunctionNode: qn,
  IndexNode: oi,
  ObjectNode: ai,
  OperatorNode: vn,
  SymbolNode: Pn,
  config: he,
  mathWithTransform: ni,
  matrix: Ce,
  typed: Y
}), NP = i3({
  parse: Ut,
  typed: Y
}), l1 = Y3({
  parse: Ut
}), AP = cR({
  parse: Ut,
  typed: Y
}), bl = bR({
  AccessorNode: si,
  ArrayNode: ii,
  ConstantNode: In,
  FunctionNode: qn,
  IndexNode: oi,
  ObjectNode: ai,
  OperatorNode: vn,
  ParenthesisNode: sa,
  SymbolNode: Pn,
  add: tr,
  divide: Pr,
  equal: Dt,
  isZero: Lt,
  multiply: ur,
  parse: Ut,
  pow: St,
  subtract: Cr,
  typed: Y
}), xl = s3({
  parse: Ut,
  typed: Y
}), EP = E5({
  Help: l1,
  mathWithTransform: ni,
  typed: Y
}), f1 = l3({
  evaluate: xl
}), Ss = pR({
  bignumber: mt,
  fraction: ei,
  AccessorNode: si,
  ArrayNode: ii,
  ConstantNode: In,
  FunctionNode: qn,
  IndexNode: oi,
  ObjectNode: ai,
  OperatorNode: vn,
  ParenthesisNode: sa,
  SymbolNode: Pn,
  add: tr,
  config: he,
  divide: Pr,
  equal: Dt,
  isZero: Lt,
  mathWithTransform: ni,
  matrix: Ce,
  multiply: ur,
  parse: Ut,
  pow: St,
  resolve: c1,
  simplifyConstant: yl,
  simplifyCore: bl,
  subtract: Cr,
  typed: Y
}), DP = ER({
  OperatorNode: vn,
  parse: Ut,
  simplify: Ss,
  typed: Y
}), SP = m3({
  Parser: f1,
  typed: Y
}), CP = MR({
  bignumber: mt,
  fraction: ei,
  AccessorNode: si,
  ArrayNode: ii,
  ConstantNode: In,
  FunctionNode: qn,
  IndexNode: oi,
  ObjectNode: ai,
  OperatorNode: vn,
  ParenthesisNode: sa,
  SymbolNode: Pn,
  add: tr,
  config: he,
  divide: Pr,
  equal: Dt,
  isZero: Lt,
  mathWithTransform: ni,
  matrix: Ce,
  multiply: ur,
  parse: Ut,
  pow: St,
  simplify: Ss,
  simplifyConstant: yl,
  simplifyCore: bl,
  subtract: Cr,
  typed: Y
}), MP = SR({
  ConstantNode: In,
  FunctionNode: qn,
  OperatorNode: vn,
  ParenthesisNode: sa,
  SymbolNode: Pn,
  config: he,
  equal: Dt,
  isZero: Lt,
  numeric: $t,
  parse: Ut,
  simplify: Ss,
  typed: Y
});
Rr(ti, {
  e: Ed,
  false: e6,
  fineStructure: r6,
  i: gg,
  Infinity: t6,
  LN10: n6,
  LOG10E: a6,
  NaN: i6,
  null: o6,
  phi: s6,
  SQRT1_2: c6,
  sackurTetrode: l6,
  tau: bg,
  true: f6,
  E: Ed,
  version: m6,
  efimovFactor: v6,
  LN2: p6,
  pi: lc,
  replacer: d6,
  reviver: xP,
  SQRT2: h6,
  typed: Y,
  unaryPlus: jc,
  PI: lc,
  weakMixingAngle: g6,
  abs: ut,
  acos: y6,
  acot: b6,
  acsc: x6,
  addScalar: $r,
  arg: w6,
  asech: N6,
  asinh: A6,
  atan: xg,
  atanh: E6,
  bignumber: mt,
  bitNot: D6,
  boolean: S6,
  clone: C6,
  combinations: xs,
  complex: ws,
  conj: ra,
  cos: el,
  cot: M6,
  csc: O6,
  cube: T6,
  equalScalar: nr,
  erf: B6,
  exp: wg,
  expm1: _6,
  filter: F6,
  forEach: $6,
  format: Ti,
  getMatrixDataType: rl,
  hex: R6,
  im: tl,
  isInteger: lt,
  isNegative: $n,
  isPositive: ta,
  isZero: Lt,
  LOG2E: I6,
  lgamma: P6,
  log10: q6,
  log2: Ng,
  map: na,
  multiplyScalar: Mr,
  not: Ag,
  number: fn,
  oct: L6,
  pickRandom: z6,
  print: U6,
  random: k6,
  re: nl,
  sec: G6,
  sign: Eg,
  sin: Ns,
  splitUnit: V6,
  square: H6,
  string: Z6,
  subtractScalar: Et,
  tan: Y6,
  typeOf: Dg,
  acosh: W6,
  acsch: J6,
  apply: al,
  asec: X6,
  bin: K6,
  chain: wP,
  combinationsWithRep: Q6,
  cosh: j6,
  csch: e9,
  isNaN: Bi,
  isPrime: r9,
  randomInt: t9,
  sech: n9,
  sinh: a9,
  sparse: i9,
  sqrt: zt,
  tanh: o9,
  unaryMinus: Xt,
  acoth: s9,
  coth: u9,
  fraction: ei,
  isNumeric: aa,
  matrix: Ce,
  matrixFromFunction: c9,
  mode: l9,
  numeric: $t,
  prod: Sg,
  reshape: f9,
  size: Jr,
  squeeze: m9,
  transpose: _i,
  xgcd: Cg,
  zeros: it,
  asin: v9,
  cbrt: Mg,
  concat: cr,
  count: p9,
  ctranspose: il,
  diag: Og,
  divideScalar: Er,
  dotDivide: Fi,
  equal: Dt,
  flatten: $i,
  hasNumericValue: d9,
  identity: Rn,
  kron: h9,
  largerEq: As,
  leftShift: g9,
  lsolve: Tg,
  matrixFromColumns: ol,
  nthRoot: y9,
  ones: b9,
  qr: sl,
  resize: x9,
  rightArithShift: w9,
  round: ri,
  smaller: tt,
  subtract: Cr,
  to: N9,
  unequal: A9,
  usolve: ul,
  xor: E9,
  add: tr,
  atan2: D9,
  bitAnd: S9,
  bitXor: C9,
  catalan: M9,
  compare: ia,
  compareText: Bg,
  cumsum: O9,
  deepEqual: cl,
  diff: T9,
  distance: B9,
  dot: Es,
  equalText: _9,
  floor: _g,
  gcd: F9,
  hypot: $9,
  larger: nt,
  log: ll,
  lsolveAll: R9,
  matrixFromRows: I9,
  min: P9,
  mod: $g,
  multiply: ur,
  nthRoots: q9,
  or: L9,
  partitionSelect: Ds,
  rightLogShift: z9,
  slu: Rg,
  subset: gt,
  sum: fl,
  trace: U9,
  usolveAll: Ig,
  zpk2tf: k9,
  bitOr: G9,
  ceil: ml,
  compareNatural: Kt,
  composition: V9,
  cross: H9,
  det: Pg,
  dotMultiply: Z9,
  fix: Lg,
  index: zg,
  intersect: Y9,
  invmod: W9,
  lcm: J9,
  log1p: X9,
  max: vl,
  setCartesian: K9,
  setDistinct: Q9,
  setIsSubset: j9,
  setPowerset: e7,
  smallerEq: Ga,
  sort: r7,
  and: t7,
  range: Va,
  row: n7,
  setDifference: Ug,
  setMultiplicity: a7,
  setSymDifference: kg,
  column: Vg,
  inv: oa,
  lup: Hg,
  pinv: i7,
  pow: St,
  setIntersect: Zg,
  setUnion: o7,
  sqrtm: s7,
  vacuumImpedance: u7,
  wienDisplacement: c7,
  atomicMass: l7,
  bohrMagneton: f7,
  boltzmann: m7,
  conductanceQuantum: v7,
  coulomb: p7,
  deuteronMass: d7,
  dotPow: h7,
  electricConstant: g7,
  elementaryCharge: y7,
  expm: b7,
  faraday: x7,
  fft: Yg,
  gamma: pl,
  gravitationConstant: w7,
  hartreeEnergy: N7,
  ifft: A7,
  klitzing: E7,
  loschmidt: D7,
  magneticConstant: S7,
  molarMass: C7,
  molarPlanckConstant: M7,
  neutronMass: O7,
  nuclearMagneton: T7,
  planckCharge: B7,
  planckLength: _7,
  planckTemperature: F7,
  protonMass: $7,
  quantumOfCirculation: R7,
  reducedPlanckConstant: I7,
  rydberg: P7,
  secondRadiation: q7,
  speedOfLight: L7,
  stefanBoltzmann: z7,
  thomsonCrossSection: U7,
  avogadro: k7,
  bohrRadius: G7,
  createUnit: V7,
  divide: Pr,
  electronMass: H7,
  factorial: Ri,
  firstRadiation: Z7,
  gravity: Y7,
  inverseConductanceQuantum: W7,
  lusolve: Wg,
  magneticFluxQuantum: J7,
  molarMassC12: X7,
  multinomial: K7,
  parse: Ut,
  permutations: Q7,
  planckMass: j7,
  polynomialRoot: eP,
  resolve: c1,
  setSize: rP,
  simplifyConstant: yl,
  solveODE: tP,
  stirlingS2: Jg,
  unit: nP,
  bellNumbers: aP,
  compile: NP,
  eigs: Xg,
  fermiCoupling: iP,
  gasConstant: oP,
  leafCount: AP,
  mean: Kg,
  molarVolume: sP,
  planckConstant: uP,
  quantileSeq: cP,
  simplifyCore: bl,
  variance: dl,
  classicalElectronRadius: lP,
  evaluate: xl,
  help: EP,
  median: Qg,
  simplify: Ss,
  symbolicEqual: DP,
  corr: fP,
  freqz: mP,
  mad: vP,
  parser: SP,
  rationalize: CP,
  std: pP,
  zeta: dP,
  derivative: MP,
  norm: hl,
  rotationMatrix: jg,
  kldivergence: hP,
  planckTime: gP,
  schur: e1,
  rotate: yP,
  sylvester: r1,
  lyap: bP,
  config: he
});
Rr(ni, ti, {
  filter: sI({
    typed: Y
  }),
  forEach: lI({
    typed: Y
  }),
  map: hI({
    typed: Y
  }),
  apply: rI({
    isInteger: lt,
    typed: Y
  }),
  concat: PI({
    isInteger: lt,
    matrix: Ce,
    typed: Y
  }),
  max: bI({
    config: he,
    larger: nt,
    numeric: $t,
    typed: Y
  }),
  print: jI({
    add: tr,
    matrix: Ce,
    typed: Y,
    zeros: it
  }),
  diff: LI({
    bignumber: mt,
    matrix: Ce,
    number: fn,
    subtract: Cr,
    typed: Y
  }),
  min: DI({
    config: he,
    numeric: $t,
    smaller: tt,
    typed: Y
  }),
  subset: $I({
    add: tr,
    matrix: Ce,
    typed: Y,
    zeros: it
  }),
  cumsum: JI({
    add: tr,
    typed: Y,
    unaryPlus: jc
  }),
  index: vI({
    Index: Zr,
    getMatrixDataType: rl
  }),
  sum: VI({
    add: tr,
    config: he,
    numeric: $t,
    typed: Y
  }),
  range: MI({
    bignumber: mt,
    matrix: Ce,
    add: tr,
    config: he,
    isPositive: ta,
    larger: nt,
    largerEq: As,
    smaller: tt,
    smallerEq: Ga,
    typed: Y
  }),
  row: BI({
    Index: Zr,
    matrix: Ce,
    range: Va,
    typed: Y
  }),
  column: aI({
    Index: Zr,
    matrix: Ce,
    range: Va,
    typed: Y
  }),
  mean: NI({
    add: tr,
    divide: Pr,
    typed: Y
  }),
  quantileSeq: YI({
    add: tr,
    bignumber: mt,
    compare: ia,
    divide: Pr,
    isInteger: lt,
    larger: nt,
    multiply: ur,
    partitionSelect: Ds,
    smaller: tt,
    smallerEq: Ga,
    subtract: Cr,
    typed: Y
  }),
  variance: KI({
    add: tr,
    apply: al,
    divide: Pr,
    isNaN: Bi,
    multiply: ur,
    subtract: Cr,
    typed: Y
  }),
  std: kI({
    map: na,
    sqrt: zt,
    typed: Y,
    variance: dl
  })
});
Rr(t1, {
  BigNumber: Me,
  Complex: gr,
  Fraction: ea,
  Matrix: bs,
  Node: Xr,
  ObjectNode: ai,
  OperatorNode: vn,
  ParenthesisNode: sa,
  Range: u6,
  RelationalNode: n1,
  ResultSet: yg,
  ArrayNode: ii,
  BlockNode: a1,
  ConditionalNode: i1,
  ConstantNode: In,
  DenseMatrix: Qe,
  RangeNode: o1,
  Chain: gl,
  FunctionAssignmentNode: s1,
  SparseMatrix: mn,
  IndexNode: oi,
  ImmutableDenseMatrix: Fg,
  Index: Zr,
  AccessorNode: si,
  AssignmentNode: u1,
  FibonacciHeap: qg,
  Spa: Gg,
  Unit: ke,
  SymbolNode: Pn,
  FunctionNode: qn,
  Help: l1,
  Parser: f1
});
gl.createProxy(ti);
/**
 * @dice-roller/rpg-dice-roller - An advanced JS based dice roller that can roll various types of dice and modifiers, along with mathematical equations.
 * 
 * @version 5.5.0
 * @license MIT
 * @author GreenImp Media <info@greenimp.co.uk> (https://greenimp.co.uk)
 * @link https://dice-roller.github.io/documentation
 */
class wl extends TypeError {
  /**
   * Create a `CompareOperatorError`
   *
   * @param {*} operator The invalid operator
   */
  constructor(e) {
    super(`Operator "${e}" is invalid`), TypeError.captureStackTrace && TypeError.captureStackTrace(this, wl), this.name = "CompareOperatorError", this.operator = e;
  }
}
class Cs extends Error {
  /**
   * Create a `DataFormatError`
   *
   * @param {*} data The invalid data
   */
  constructor(e) {
    super(`Invalid data format: ${e}`), Error.captureStackTrace && Error.captureStackTrace(this, Cs), this.name = "ImportError", this.data = e;
  }
}
class Ii extends Error {
  /**
   * Create a `DieActionValueError`
   *
   * @param {StandardDice} die The die the action was on
   * @param {string|null} [action=null] The invalid action
   */
  constructor(e, t = null) {
    super(`Die "${e}" must have more than 1 possible value to ${t || "do this action"}`), Error.captureStackTrace && Error.captureStackTrace(this, Ii), this.name = "DieActionValueError", this.action = t, this.die = e;
  }
}
class Ko extends Error {
  /**
   * Create a `NotationError`
   *
   * @param {*} notation The invalid notation
   */
  constructor(e) {
    super(`Notation "${e}" is invalid`), Error.captureStackTrace && Error.captureStackTrace(this, Ko), this.name = "NotationError", this.notation = e;
  }
}
class At extends Error {
  /**
   * Create a `RequiredArgumentError`
   *
   * @param {string|null} [argumentName=null] The argument name
   */
  constructor(e = null) {
    super(`Missing argument${e ? ` "${e}"` : ""}`), Error.captureStackTrace && Error.captureStackTrace(this, At), this.argumentName = e;
  }
}
const OP = (r, e, t) => {
  const n = Number(r), a = Number(e);
  let i;
  if (Number.isNaN(n) || Number.isNaN(a))
    return !1;
  switch (t) {
    case "=":
    case "==":
      i = n === a;
      break;
    case "<":
      i = n < a;
      break;
    case ">":
      i = n > a;
      break;
    case "<=":
      i = n <= a;
      break;
    case ">=":
      i = n >= a;
      break;
    case "!":
    case "!=":
    case "<>":
      i = n !== a;
      break;
    default:
      i = !1;
      break;
  }
  return i;
}, m1 = (r) => xl(r), Dr = (r) => typeof r != "number" && typeof r != "string" ? !1 : !Number.isNaN(r) && Number.isFinite(Number(r)), xu = (r) => {
  if (!Dr(r))
    return !1;
  const e = Number(r);
  return e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;
}, TP = (r) => Array.isArray(r) ? r.reduce((e, t) => e + (Dr(t) ? parseFloat(`${t}`) : 0), 0) : 0, BP = (r, e = 0) => (
  // round to precision, then cast to a number to remove trailing zeroes after the decimal point
  parseFloat(parseFloat(`${r}`).toFixed(e || 0))
), Tr = 9007199254740992, li = Tr - 1, Qo = -1 >>> 0, Ct = Qo + 1, un = Ct / 2, wu = un - 1, Pi = 1 << 21, Jn = Pi - 1;
function Nl(r) {
  return r.next() | 0;
}
function bn(r, e) {
  return e === 0 ? r : (t) => r(t) + e;
}
function fc(r) {
  const e = r.next() | 0, t = r.next() >>> 0;
  return (e & Jn) * Ct + t + (e & Pi ? -Tr : 0);
}
function v1(r) {
  for (; ; ) {
    const e = r.next() | 0;
    if (e & 4194304) {
      if ((e & 8388607) === 4194304 && !(r.next() | 0))
        return Tr;
    } else {
      const t = r.next() >>> 0;
      return (e & Jn) * Ct + t + (e & Pi ? -Tr : 0);
    }
  }
}
function p1(r) {
  return r.next() >>> 0;
}
function Ms(r) {
  const e = r.next() & Jn, t = r.next() >>> 0;
  return e * Ct + t;
}
function Al(r) {
  for (; ; ) {
    const e = r.next() | 0;
    if (e & Pi) {
      if (!(e & Jn) && !(r.next() | 0))
        return Tr;
    } else {
      const t = r.next() >>> 0;
      return (e & Jn) * Ct + t;
    }
  }
}
function d1(r) {
  return (r + 1 & r) === 0;
}
function _P(r) {
  return (e) => e.next() & r;
}
function FP(r) {
  const e = r + 1, t = e * Math.floor(Ct / e);
  return (n) => {
    let a = 0;
    do
      a = n.next() >>> 0;
    while (a >= t);
    return a % e;
  };
}
function $P(r) {
  return d1(r) ? _P(r) : FP(r);
}
function RP(r) {
  return (r | 0) === 0;
}
function IP(r) {
  return (e) => {
    const t = e.next() & r, n = e.next() >>> 0;
    return t * Ct + n;
  };
}
function PP(r) {
  const e = r * Math.floor(Tr / r);
  return (t) => {
    let n = 0;
    do {
      const a = t.next() & Jn, i = t.next() >>> 0;
      n = a * Ct + i;
    } while (n >= e);
    return n % r;
  };
}
function qP(r) {
  const e = r + 1;
  if (RP(e)) {
    const t = (e / Ct | 0) - 1;
    if (d1(t))
      return IP(t);
  }
  return PP(e);
}
function Dd(r, e) {
  return (t) => {
    let n = 0;
    do {
      const a = t.next() | 0, i = t.next() >>> 0;
      n = (a & Jn) * Ct + i + (a & Pi ? -Tr : 0);
    } while (n < r || n > e);
    return n;
  };
}
function ua(r, e) {
  if (r = Math.floor(r), e = Math.floor(e), r < -Tr || !isFinite(r))
    throw new RangeError(`Expected min to be at least ${-Tr}`);
  if (e > Tr || !isFinite(e))
    throw new RangeError(`Expected max to be at most ${Tr}`);
  const t = e - r;
  return t <= 0 || !isFinite(t) ? () => r : t === Qo ? r === 0 ? p1 : bn(Nl, r + un) : t < Qo ? bn($P(t), r) : t === li ? bn(Ms, r) : t < li ? bn(qP(t), r) : e - 1 - r === li ? bn(Al, r) : r === -Tr && e === Tr ? v1 : r === -Tr && e === li ? fc : r === -li && e === Tr ? bn(fc, 1) : e === Tr ? bn(Dd(r - 1, e - 1), 1) : Dd(r, e);
}
function LP(r) {
  return (r.next() & 1) === 1;
}
function mc(r, e) {
  return (t) => r(t) < e;
}
function zP(r) {
  if (r <= 0)
    return () => !1;
  if (r >= 1)
    return () => !0;
  {
    const e = r * Ct;
    return e % 1 === 0 ? mc(Nl, e - un | 0) : mc(Ms, Math.round(r * Tr));
  }
}
function UP(r, e) {
  return e == null ? r == null ? LP : zP(r) : r <= 0 ? () => !1 : r >= e ? () => !0 : mc(ua(0, e - 1), r);
}
function kP(r, e) {
  const t = ua(+r, +e);
  return (n) => new Date(t(n));
}
function h1(r) {
  return ua(1, r);
}
function GP(r, e) {
  const t = h1(r);
  return (n) => {
    const a = [];
    for (let i = 0; i < e; ++i)
      a.push(t(n));
    return a;
  };
}
const VP = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-";
function El(r = VP) {
  const e = r.length;
  if (!e)
    throw new Error("Expected pool not to be an empty string");
  const t = ua(0, e - 1);
  return (n, a) => {
    let i = "";
    for (let o = 0; o < a; ++o) {
      const f = t(n);
      i += r.charAt(f);
    }
    return i;
  };
}
const g1 = "0123456789abcdef", HP = El(g1), ZP = El(g1.toUpperCase());
function YP(r) {
  return r ? ZP : HP;
}
function Sd(r, e) {
  return r < 0 ? Math.max(r + e, 0) : Math.min(r, e);
}
function Cd(r) {
  const e = +r;
  return e < 0 ? Math.ceil(e) : Math.floor(e);
}
function WP(r, e, t, n) {
  const a = e.length;
  if (a === 0)
    throw new RangeError("Cannot pick from an empty array");
  const i = t == null ? 0 : Sd(Cd(t), a), o = n === void 0 ? a : Sd(Cd(n), a);
  if (i >= o)
    throw new RangeError(`Cannot pick between bounds ${i} and ${o}`);
  const f = ua(i, o - 1);
  return e[f(r)];
}
function JP(r, e) {
  return e === 1 ? r : e === 0 ? () => 0 : (t) => r(t) * e;
}
function y1(r) {
  return Ms(r) / Tr;
}
function b1(r) {
  return Al(r) / Tr;
}
function XP(r, e, t = !1) {
  if (isFinite(r)) {
    if (!isFinite(e))
      throw new RangeError("Expected max to be a finite number");
  } else
    throw new RangeError("Expected min to be a finite number");
  return bn(JP(t ? b1 : y1, e - r), r);
}
const KP = Array.prototype.slice;
function vc(r, e, t = 0) {
  const n = e.length;
  if (n)
    for (let a = n - 1 >>> 0; a > t; --a) {
      const o = ua(0, a)(r);
      if (a !== o) {
        const f = e[a];
        e[a] = e[o], e[o] = f;
      }
    }
  return e;
}
function QP(r, e, t) {
  if (t < 0 || t > e.length || !isFinite(t))
    throw new RangeError("Expected sampleSize to be within 0 and the length of the population");
  if (t === 0)
    return [];
  const n = KP.call(e), a = n.length;
  if (a === t)
    return vc(r, n, 0);
  const i = a - t;
  return vc(r, n, i - 1).slice(i);
}
const jP = (() => {
  try {
    if ("x".repeat(3) === "xxx")
      return (r, e) => r.repeat(e);
  } catch {
  }
  return (r, e) => {
    let t = "";
    for (; e > 0; )
      e & 1 && (t += r), e >>= 1, r += r;
    return t;
  };
})();
function Na(r, e) {
  return jP("0", e - r.length) + r;
}
function eq(r) {
  const e = r.next() >>> 0, t = r.next() | 0, n = r.next() | 0, a = r.next() >>> 0;
  return Na(e.toString(16), 8) + "-" + Na((t & 65535).toString(16), 4) + "-" + Na((t >> 4 & 4095 | 16384).toString(16), 4) + "-" + Na((n & 16383 | 32768).toString(16), 4) + "-" + Na((n >> 4 & 65535).toString(16), 4) + Na(a.toString(16), 8);
}
const Ba = {
  next() {
    return Math.random() * Ct | 0;
  }
};
class rq {
  /**
   * Creates a new Random wrapper
   * @param engine The engine to use (defaults to a `Math.random`-based implementation)
   */
  constructor(e = Ba) {
    this.engine = e;
  }
  /**
   * Returns a value within [-0x80000000, 0x7fffffff]
   */
  int32() {
    return Nl(this.engine);
  }
  /**
   * Returns a value within [0, 0xffffffff]
   */
  uint32() {
    return p1(this.engine);
  }
  /**
   * Returns a value within [0, 0x1fffffffffffff]
   */
  uint53() {
    return Ms(this.engine);
  }
  /**
   * Returns a value within [0, 0x20000000000000]
   */
  uint53Full() {
    return Al(this.engine);
  }
  /**
   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]
   */
  int53() {
    return fc(this.engine);
  }
  /**
   * Returns a value within [-0x20000000000000, 0x20000000000000]
   */
  int53Full() {
    return v1(this.engine);
  }
  /**
   * Returns a value within [min, max]
   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.
   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.
   */
  integer(e, t) {
    return ua(e, t)(this.engine);
  }
  /**
   * Returns a floating-point value within [0.0, 1.0]
   */
  realZeroToOneInclusive() {
    return b1(this.engine);
  }
  /**
   * Returns a floating-point value within [0.0, 1.0)
   */
  realZeroToOneExclusive() {
    return y1(this.engine);
  }
  /**
   * Returns a floating-point value within [min, max) or [min, max]
   * @param min The minimum floating-point value, inclusive.
   * @param max The maximum floating-point value.
   * @param inclusive If true, `max` will be inclusive.
   */
  real(e, t, n = !1) {
    return XP(e, t, n)(this.engine);
  }
  bool(e, t) {
    return UP(e, t)(this.engine);
  }
  /**
   * Return a random value within the provided `source` within the sliced
   * bounds of `begin` and `end`.
   * @param source an array of items to pick from
   * @param begin the beginning slice index (defaults to `0`)
   * @param end the ending slice index (defaults to `source.length`)
   */
  pick(e, t, n) {
    return WP(this.engine, e, t, n);
  }
  /**
   * Shuffles an array in-place
   * @param array The array to shuffle
   */
  shuffle(e) {
    return vc(this.engine, e);
  }
  /**
   * From the population array, returns an array with sampleSize elements that
   * are randomly chosen without repeats.
   * @param population An array that has items to choose a sample from
   * @param sampleSize The size of the result array
   */
  sample(e, t) {
    return QP(this.engine, e, t);
  }
  /**
   * Returns a value within [1, sideCount]
   * @param sideCount The number of sides of the die
   */
  die(e) {
    return h1(e)(this.engine);
  }
  /**
   * Returns an array of length `dieCount` of values within [1, sideCount]
   * @param sideCount The number of sides of each die
   * @param dieCount The number of dice
   */
  dice(e, t) {
    return GP(e, t)(this.engine);
  }
  /**
   * Returns a Universally Unique Identifier Version 4.
   *
   * See http://en.wikipedia.org/wiki/Universally_unique_identifier
   */
  uuid4() {
    return eq(this.engine);
  }
  string(e, t) {
    return El(t)(this.engine, e);
  }
  /**
   * Returns a random string comprised of numbers or the characters `abcdef`
   * (or `ABCDEF`) of length `length`.
   * @param length Length of the result string
   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`
   */
  hex(e, t) {
    return YP(t)(this.engine, e);
  }
  /**
   * Returns a random `Date` within the inclusive range of [`start`, `end`].
   * @param start The minimum `Date`
   * @param end The maximum `Date`
   */
  date(e, t) {
    return kP(e, t)(this.engine);
  }
}
const x1 = (() => {
  try {
    const r = new ArrayBuffer(4), e = new Int32Array(r);
    if (e[0] = un, e[0] === -un)
      return Int32Array;
  } catch {
  }
  return Array;
})();
let bo = null;
const pc = 128;
let Nu = pc;
const tq = {
  next() {
    return Nu >= pc && (bo === null && (bo = new x1(pc)), crypto.getRandomValues(bo), Nu = 0), bo[Nu++] | 0;
  }
};
function nq(r = Ba, e = 16) {
  const t = [];
  t.push((/* @__PURE__ */ new Date()).getTime() | 0);
  for (let n = 1; n < e; ++n)
    t[n] = r.next() | 0;
  return t;
}
const dc = (() => {
  try {
    if (Math.imul(Qo, 5) === -5)
      return Math.imul;
  } catch {
  }
  const r = 65535;
  return (e, t) => {
    const n = e >>> 16 & r, a = e & r, i = t >>> 16 & r, o = t & r;
    return a * o + (n * o + a * i << 16 >>> 0) | 0;
  };
})(), Ht = 624, Nn = Ht - 1, hc = 397, Md = Ht - hc, Au = 2567483615;
class bi {
  /**
   * MersenneTwister19937 should not be instantiated directly.
   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.
   */
  constructor() {
    this.data = new x1(Ht), this.index = 0, this.uses = 0;
  }
  /**
   * Returns a MersenneTwister19937 seeded with an initial int32 value
   * @param initial the initial seed value
   */
  static seed(e) {
    return new bi().seed(e);
  }
  /**
   * Returns a MersenneTwister19937 seeded with zero or more int32 values
   * @param source A series of int32 values
   */
  static seedWithArray(e) {
    return new bi().seedWithArray(e);
  }
  /**
   * Returns a MersenneTwister19937 seeded with the current time and
   * a series of natively-generated random values
   */
  static autoSeed() {
    return bi.seedWithArray(nq());
  }
  /**
   * Returns the next int32 value of the sequence
   */
  next() {
    (this.index | 0) >= Ht && (Eu(this.data), this.index = 0);
    const e = this.data[this.index];
    return this.index = this.index + 1 | 0, this.uses += 1, aq(e) | 0;
  }
  /**
   * Returns the number of times that the Engine has been used.
   *
   * This can be provided to an unused MersenneTwister19937 with the same
   * seed, bringing it to the exact point that was left off.
   */
  getUseCount() {
    return this.uses;
  }
  /**
   * Discards one or more items from the engine
   * @param count The count of items to discard
   */
  discard(e) {
    if (e <= 0)
      return this;
    for (this.uses += e, (this.index | 0) >= Ht && (Eu(this.data), this.index = 0); e + this.index > Ht; )
      e -= Ht - this.index, Eu(this.data), this.index = 0;
    return this.index = this.index + e | 0, this;
  }
  seed(e) {
    let t = 0;
    this.data[0] = t = e | 0;
    for (let n = 1; n < Ht; n = n + 1 | 0)
      this.data[n] = t = dc(t ^ t >>> 30, 1812433253) + n | 0;
    return this.index = Ht, this.uses = 0, this;
  }
  seedWithArray(e) {
    return this.seed(19650218), iq(this.data, e), this;
  }
}
function Eu(r) {
  let e = 0, t = 0;
  for (; (e | 0) < Md; e = e + 1 | 0)
    t = r[e] & un | r[e + 1 | 0] & wu, r[e] = r[e + hc | 0] ^ t >>> 1 ^ (t & 1 ? Au : 0);
  for (; (e | 0) < Nn; e = e + 1 | 0)
    t = r[e] & un | r[e + 1 | 0] & wu, r[e] = r[e - Md | 0] ^ t >>> 1 ^ (t & 1 ? Au : 0);
  t = r[Nn] & un | r[0] & wu, r[Nn] = r[hc - 1] ^ t >>> 1 ^ (t & 1 ? Au : 0);
}
function aq(r) {
  return r ^= r >>> 11, r ^= r << 7 & 2636928640, r ^= r << 15 & 4022730752, r ^ r >>> 18;
}
function iq(r, e) {
  let t = 1, n = 0;
  const a = e.length;
  let i = Math.max(a, Ht) | 0, o = r[0] | 0;
  for (; (i | 0) > 0; --i)
    r[t] = o = (r[t] ^ dc(o ^ o >>> 30, 1664525)) + (e[n] | 0) + (n | 0) | 0, t = t + 1 | 0, ++n, (t | 0) > Nn && (r[0] = r[Nn], t = 1), n >= a && (n = 0);
  for (i = Nn; (i | 0) > 0; --i)
    r[t] = o = (r[t] ^ dc(o ^ o >>> 30, 1566083941)) - t | 0, t = t + 1 | 0, (t | 0) > Nn && (r[0] = r[Nn], t = 1);
  r[0] = un;
}
let Od = null;
const gc = 128;
let Du = gc;
const oq = {
  next() {
    return Du >= gc && (Od = new Int32Array(new Int8Array(require("crypto").randomBytes(4 * gc)).buffer), Du = 0), Od[Du++] | 0;
  }
}, fi = Symbol("engine"), Su = Symbol("random"), sq = {
  /**
   * The min / max number range (e.g. `[1, 10]`).
   *
   * This _must_ be set for the `next()` method to return the correct last index.
   *
   * @example
   * maxEngine.range = [1, 10];
   *
   * @type {number[]}
   */
  range: [],
  /**
   * Returns the maximum number index for the range
   *
   * @returns {number}
   */
  next() {
    return this.range[1] - this.range[0];
  }
}, uq = {
  /**
   * Returns the minimum number index, `0`
   *
   * @returns {number}
   */
  next() {
    return 0;
  }
}, Td = {
  browserCrypto: tq,
  nodeCrypto: oq,
  MersenneTwister19937: bi,
  nativeMath: Ba,
  min: uq,
  max: sq
};
class cq {
  /**
   * Create a `NumberGenerator` instance.
   *
   * The `engine` can be any object that has a `next()` method, which returns a number.
   *
   * @example <caption>Built-in engine</caption>
   * new NumberGenerator(engines.nodeCrypto);
   *
   * @example <caption>Custom engine</caption>
   * new NumberGenerator({
   *   next() {
   *     // return a random number
   *   },
   * });
   *
   * @param {Engine|{next(): number}} [engine=nativeMath] The RNG engine to use
   *
   * @throws {TypeError} engine must have function `next()`
   */
  constructor(e = Ba) {
    this.engine = e || Ba;
  }
  /**
   * The current engine.
   *
   * @returns {Engine|{next(): number}}
   */
  get engine() {
    return this[fi];
  }
  /**
   * Set the engine.
   *
   * The `engine` can be any object that has a `next()` method, which returns a number.
   *
   * @example <caption>Built-in engine</caption>
   * numberGenerator.engine = engines.nodeCrypto;
   *
   * @example <caption>Custom engine</caption>
   * numberGenerator.engine = {
   *   next() {
   *     // return a random number
   *   },
   * });
   *
   * @see {@link engines}
   *
   * @param {Engine|{next(): number}} engine
   *
   * @throws {TypeError} engine must have function `next()`
   */
  set engine(e) {
    if (e && typeof e.next != "function")
      throw new TypeError("engine must have function `next()`");
    this[fi] = e || Ba, this[Su] = new rq(this[fi]);
  }
  /**
   * Generate a random integer within the inclusive range `[min, max]`.
   *
   * @param {number} min The minimum integer value, inclusive.
   * @param {number} max The maximum integer value, inclusive.
   *
   * @returns {number} The random integer
   */
  integer(e, t) {
    return this[fi].range = [e, t], this[Su].integer(e, t);
  }
  /**
   * Returns a floating-point value within `[min, max)` or `[min, max]`.
   *
   * @param {number} min The minimum floating-point value, inclusive.
   * @param {number} max The maximum floating-point value.
   * @param {boolean} [inclusive=false] If `true`, `max` will be inclusive.
   *
   * @returns {number} The random floating-point value
   */
  real(e, t, n = !1) {
    return this[fi].range = [e, t], this[Su].real(e, t, n);
  }
}
const _a = new cq(), Bd = Symbol("text"), _d = Symbol("type");
class Tt {
  /**
   * Create a `Description` instance.
   *
   * @param {string} text
   * @param {string} [type=inline]
   */
  constructor(e, t = this.constructor.types.INLINE) {
    this.text = e, this.type = t;
  }
  /**
   * The description text.
   *
   * @return {string}
   */
  get text() {
    return this[Bd];
  }
  /**
   * Set the description text.
   *
   * @param {string|number} text
   */
  set text(e) {
    if (typeof e == "object")
      throw new TypeError("Description text is invalid");
    if (!e && e !== 0 || `${e}`.trim() === "")
      throw new TypeError("Description text cannot be empty");
    this[Bd] = `${e}`.trim();
  }
  /**
   * The description type.
   *
   * @return {string} "inline" or "multiline"
   */
  get type() {
    return this[_d];
  }
  /**
   * Set the description type.
   *
   * @param {string} type
   */
  set type(e) {
    const t = Object.values(this.constructor.types);
    if (typeof e != "string")
      throw new TypeError("Description type must be a string");
    if (!t.includes(e))
      throw new RangeError(`Description type must be one of; ${t.join(", ")}`);
    this[_d] = e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @return {{text: string, type: string}}
   */
  toJSON() {
    const { text: e, type: t } = this;
    return {
      text: e,
      type: t
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @see {@link Description#text}
   *
   * @returns {string}
   */
  toString() {
    return this.type === this.constructor.types.INLINE ? `# ${this.text}` : `[${this.text}]`;
  }
}
ct(Tt, "types", {
  MULTILINE: "multiline",
  INLINE: "inline"
});
const xo = Symbol("description");
class w1 {
  constructor(e = null) {
    this.description = e;
  }
  /**
   * The description for the group.
   *
   * @return {Description|null}
   */
  get description() {
    return this[xo] || null;
  }
  /**
   * Set the description on the group.
   *
   * @param {Description|string|null} description
   */
  set description(e) {
    if (!e && e !== 0)
      this[xo] = null;
    else if (e instanceof Tt)
      this[xo] = e;
    else if (typeof e == "string")
      this[xo] = new Tt(e);
    else
      throw new TypeError(`description must be of type Description, string or null. Received ${typeof e}`);
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{description: (Description|null)}}
   */
  toJSON() {
    const { description: e } = this;
    return {
      description: e
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @see {@link RollGroup#notation}
   *
   * @returns {string}
   */
  toString() {
    return this.description ? `${this.description}` : "";
  }
}
class pn {
  /**
   * Create a `Modifier` instance.
   */
  constructor() {
    this.order = this.constructor.order;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'modifier'
   */
  get name() {
    return "modifier";
  }
  /* eslint-enable class-methods-use-this */
  /* eslint-disable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return "";
  }
  /* eslint-enable class-methods-use-this */
  /* eslint-disable class-methods-use-this */
  /**
   * The maximum number of iterations that the modifier can apply to a single die roll
   *
   * @returns {number} `1000`
   */
  get maxIterations() {
    return 1e3;
  }
  /**
   * No default values present
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {object}
   */
  defaults(e) {
    return {};
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Processing default values definitions
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {void}
   */
  useDefaultsIfNeeded(e) {
    Object.entries(this.defaults(e)).forEach(([t, n]) => {
      typeof this[t] > "u" && (this[t] = n);
    });
  }
  /* eslint-disable class-methods-use-this */
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    return this.useDefaultsIfNeeded(t), e;
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{notation: string, name: string, type: string}}
   */
  toJSON() {
    const { notation: e, name: t } = this;
    return {
      name: t,
      notation: e,
      type: "modifier"
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @see {@link Modifier#notation}
   *
   * @returns {string}
   */
  toString() {
    return this.notation;
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(pn, "order", 999);
const lq = {
  compound: "!",
  explode: "!",
  "critical-failure": "__",
  "critical-success": "**",
  drop: "d",
  max: "v",
  min: "^",
  penetrate: "p",
  "re-roll": "r",
  "re-roll-once": "ro",
  "target-failure": "_",
  "target-success": "*",
  unique: "u",
  "unique-once": "uo"
}, N1 = (...r) => (
  // @todo need a better way of mapping modifiers to symbols
  [...r].reduce((e, t) => {
    let n;
    return t instanceof pn ? n = t.name : n = t, e + (lq[n] || n);
  }, "")
), Cu = Symbol("calculation-value"), Mu = Symbol("modifiers"), mi = Symbol("initial-value"), Fd = Symbol("use-in-total"), Ou = Symbol("value");
class jo {
  /**
   * Create a `RollResult` instance.
   *
   * `value` can be a number, or an object containing a list of different values.
   * This allows you to specify the `initialValue`, `value` and `calculationValue` with different
   * values.
   *
   * @example <caption>Numerical value</caption>
   * const result = new RollResult(4);
   *
   * @example <caption>Object value</caption>
   * // must provide either `value` or `initialValue`
   * // `calculationValue` is optional.
   * const result = new RollResult({
   *   value: 6,
   *   initialValue: 4,
   *   calculationValue: 8,
   * });
   *
   * @example <caption>With modifiers</caption>
   * const result = new RollResult(4, ['explode', 'critical-success']);
   *
   * @param {number|{value: number, initialValue: number, calculationValue: number}} value The value
   * rolled
   * @param {number} [value.value] The value with modifiers applied
   * @param {number} [value.initialValue] The initial, unmodified value rolled
   * @param {number} [value.calculationValue] The value used in calculations
   * @param {string[]|Set<string>} [modifiers=[]] List of modifier names that affect this roll
   * @param {boolean} [useInTotal=true] Whether to include the roll value when calculating totals
   *
   * @throws {TypeError} Result value, calculation value, or modifiers are invalid
   */
  constructor(e, t = [], n = !0) {
    if (Dr(e))
      this[mi] = Number(e), this.modifiers = t || [], this.useInTotal = n;
    else if (e && typeof e == "object" && !Array.isArray(e)) {
      const a = Dr(e.initialValue) ? e.initialValue : e.value;
      if (!Dr(a))
        throw new TypeError(`Result value is invalid: ${a}`);
      this[mi] = Number(a), Dr(e.value) && Number(e.value) !== this[mi] && (this.value = e.value), Dr(e.calculationValue) && parseFloat(`${e.calculationValue}`) !== this.value && (this.calculationValue = e.calculationValue), this.modifiers = e.modifiers || t || [], this.useInTotal = typeof e.useInTotal == "boolean" ? e.useInTotal : n || !1;
    } else
      throw e === 1 / 0 ? new RangeError("Result value must be a finite number") : new TypeError(`Result value is invalid: ${e}`);
  }
  /**
   * The value to use in calculations.
   * This may be changed by modifiers.
   *
   * @returns {number}
   */
  get calculationValue() {
    return Dr(this[Cu]) ? parseFloat(this[Cu]) : this.value;
  }
  /**
   * Set the value to use in calculations.
   *
   * @param {number} value
   *
   * @throws {TypeError} value is invalid
   */
  set calculationValue(e) {
    const t = Dr(e);
    if (e === 1 / 0)
      throw new RangeError("Result calculation value must be a finite number");
    if (e && !t)
      throw new TypeError(`Result calculation value is invalid: ${e}`);
    this[Cu] = t ? parseFloat(`${e}`) : null;
  }
  /**
   * The initial roll value before any modifiers.
   *
   * Not used for calculations and is just for reference.
   * You probably want `value` instead.
   *
   * @see {@link RollResult#value}
   *
   * @returns {number}
   */
  get initialValue() {
    return this[mi];
  }
  /**
   * The visual flags for the modifiers that affect the roll.
   *
   * @see {@link RollResult#modifiers}
   *
   * @returns {string}
   */
  get modifierFlags() {
    return N1(...this.modifiers);
  }
  /**
   * The names of modifiers that affect the roll.
   *
   * @returns {Set<string>}
   */
  get modifiers() {
    return this[Mu];
  }
  /**
   * Set the modifier names that affect the roll.
   *
   * @example
   * rollResult.modifiers = ['explode', 're-roll'];
   *
   * @param {string[]|Set<string>} value
   *
   * @throws {TypeError} modifiers must be a Set or array of modifier names
   */
  set modifiers(e) {
    if ((Array.isArray(e) || e instanceof Set) && [...e].every((t) => typeof t == "string")) {
      this[Mu] = /* @__PURE__ */ new Set([...e]);
      return;
    }
    if (!e && e !== 0) {
      this[Mu] = /* @__PURE__ */ new Set();
      return;
    }
    throw new TypeError(`modifiers must be a Set or array of modifier names: ${e}`);
  }
  /**
   * Whether to use the value in total calculations or not.
   *
   * @returns {boolean}
   */
  get useInTotal() {
    return !!this[Fd];
  }
  /**
   * Set whether to use the value in total calculations or not.
   *
   * @param {boolean} value
   */
  set useInTotal(e) {
    this[Fd] = !!e;
  }
  /**
   * Value of the roll after modifiers have been applied.
   *
   * @returns {number}
   */
  get value() {
    return Dr(this[Ou]) ? this[Ou] : this[mi];
  }
  /**
   * Set the roll value.
   *
   * @param {number} value
   *
   * @throws {RangeError} value must be finite
   * @throws {TypeError} value is invalid
   */
  set value(e) {
    if (e === 1 / 0)
      throw new RangeError("Result value must be a finite number");
    if (!Dr(e))
      throw new TypeError(`Result value is invalid: ${e}`);
    this[Ou] = Number(e);
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  calculationValue: number,
   *  modifierFlags: string,
   *  modifiers: string[],
   *  type: string,
   *  initialValue: number,
   *  useInTotal: boolean,
   *  value: number
   * }}
   */
  toJSON() {
    const {
      calculationValue: e,
      initialValue: t,
      modifierFlags: n,
      modifiers: a,
      useInTotal: i,
      value: o
    } = this;
    return {
      calculationValue: e,
      initialValue: t,
      modifierFlags: n,
      modifiers: [...a],
      type: "result",
      useInTotal: i,
      value: o
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @returns {string}
   */
  toString() {
    return this.value + this.modifierFlags;
  }
}
const Tu = Symbol("rolls");
class an {
  /**
   * Create a `RollResults` instance.
   *
   * @example <caption>`RollResult` objects</caption>
   * const results = new RollResults([
   *  new RollResult(4),
   *  new RollResult(3),
   *  new RollResult(5),
   * ]);
   *
   * @example <caption>Numerical results</caption>
   * const results = new RollResults([4, 3, 5]);
   *
   * @example <caption>A mix</caption>
   * const results = new RollResults([
   *  new RollResult(4),
   *  3,
   *  new RollResult(5),
   * ]);
   *
   * @param {Array.<RollResult|number>} [rolls=[]] The roll results
   *
   * @throws {TypeError} Rolls must be an array
   */
  constructor(e = []) {
    this.rolls = e;
  }
  /**
   * The number of roll results.
   *
   * @returns {number}
   */
  get length() {
    return this.rolls.length || 0;
  }
  /**
   * List of roll results.
   *
   * @returns {RollResult[]}
   */
  get rolls() {
    return [...this[Tu]];
  }
  /**
   * Set the rolls.
   *
   * @param {RollResult[]|number[]} rolls
   *
   * @throws {TypeError} Rolls must be an array
   */
  set rolls(e) {
    if (!e || !Array.isArray(e))
      throw new TypeError(`rolls must be an array: ${e}`);
    this[Tu] = [], e.forEach((t) => {
      this.addRoll(t);
    });
  }
  /**
   * The total value of all the rolls after modifiers have been applied.
   *
   * @returns {number}
   */
  get value() {
    return this.rolls.reduce((e, t) => e + (t.useInTotal ? t.calculationValue : 0), 0);
  }
  /**
   * Add a single roll to the list.
   *
   * @param {RollResult|number} value
   */
  addRoll(e) {
    const t = e instanceof jo ? e : new jo(e);
    this[Tu].push(t);
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{rolls: RollResult[], value: number}}
   */
  toJSON() {
    const { rolls: e, value: t } = this;
    return {
      rolls: e,
      type: "roll-results",
      value: t
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @returns {string}
   */
  toString() {
    return `[${this.rolls.join(", ")}]`;
  }
}
const Bu = Symbol("modifiers"), $d = Symbol("qty"), Rd = Symbol("sides"), Id = Symbol("min-value"), Pd = Symbol("max-value");
class Ha extends w1 {
  /**
   * Create a `StandardDice` instance.
   *
   * @param {number} sides The number of sides the die has (.e.g `6`)
   * @param {number} [qty=1] The number of dice to roll (e.g. `4`)
   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers] The modifiers that affect the die
   * @param {number|null} [min=1] The minimum possible roll value
   * @param {number|null} [max=null] The maximum possible roll value. Defaults to number of `sides`
   * @param {Description|string|null} [description=null] The roll description.
   *
   * @throws {RequiredArgumentError} sides is required
   * @throws {TypeError} qty must be a positive integer, and modifiers must be valid
   */
  constructor(e, t = 1, n = null, a = 1, i = null, o = null) {
    if (super(o), !e && e !== 0)
      throw new At("sides");
    if (e === 1 / 0)
      throw new RangeError("numerical sides must be finite number");
    if (Dr(e)) {
      if (e < 1 || !xu(e))
        throw new RangeError("numerical sides must be a positive finite number");
    } else if (typeof e != "string")
      throw new TypeError("non-numerical sides must be a string");
    if (Dr(t)) {
      if (t < 1 || t > 999)
        throw new RangeError("qty must be between 1 and 999");
    } else
      throw new TypeError("qty must be a positive finite integer");
    let f = a;
    if (f == null)
      f = 1;
    else if (Dr(f)) {
      if (!xu(f))
        throw new RangeError("min must a finite number");
    } else
      throw new TypeError("min must a finite number");
    if (i && !Dr(i))
      throw new TypeError("max must a finite number");
    if (i && !xu(i))
      throw new RangeError("max must a finite number");
    this[$d] = parseInt(`${t}`, 10), this[Rd] = e, n && (this.modifiers = n), this[Id] = parseInt(f, 10), this[Pd] = i ? parseInt(`${i}`, 10) : e;
  }
  /**
   * The average value that the die can roll (Excluding modifiers).
   *
   * @returns {number}
   */
  get average() {
    return (this.min + this.max) / 2;
  }
  /**
   * The modifiers that affect this die roll.
   *
   * @returns {Map<string, Modifier>|null}
   */
  get modifiers() {
    return this[Bu] ? new Map([...this[Bu]].sort((e, t) => e[1].order - t[1].order)) : null;
  }
  /**
   * Set the modifiers that affect this roll.
   *
   * @param {Map<string, Modifier>|Modifier[]|{}|null} value
   *
   * @throws {TypeError} Modifiers should be a Map, array of Modifiers, or an Object
   */
  set modifiers(e) {
    let t;
    if (e instanceof Map)
      t = e;
    else if (Array.isArray(e))
      t = new Map(e.map((n) => [n.name, n]));
    else if (typeof e == "object")
      t = new Map(Object.entries(e));
    else
      throw new TypeError("modifiers should be a Map, array, or an Object containing Modifiers");
    if (t.size && [...t.entries()].some((n) => !(n[1] instanceof pn)))
      throw new TypeError("modifiers must only contain Modifier instances");
    this[Bu] = t;
  }
  /**
   * The maximum value that can be rolled on the die, excluding modifiers.
   *
   * @returns {number}
   */
  get max() {
    return this[Pd];
  }
  /**
   * The minimum value that can be rolled on the die, excluding modifiers.
   *
   * @returns {number}
   */
  get min() {
    return this[Id];
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the die.
   *
   * @returns {string} 'standard'
   */
  get name() {
    return "standard";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The dice notation. e.g. `4d6!`.
   *
   * @returns {string}
   */
  get notation() {
    let e = `${this.qty}d${this.sides}`;
    return this.modifiers && this.modifiers.size && (e += [...this.modifiers.values()].reduce((t, n) => t + n.notation, "")), e;
  }
  /**
   * The number of dice that should be rolled.
   *
   * @returns {number}
   */
  get qty() {
    return this[$d];
  }
  /**
   * The number of sides the die has.
   *
   * @returns {number}
   */
  get sides() {
    return this[Rd];
  }
  /**
   * Roll the dice for the specified quantity and apply any modifiers.
   *
   * @returns {RollResults} The result of the roll
   */
  roll() {
    const e = new an();
    for (let t = 0; t < this.qty; t++)
      e.addRoll(this.rollOnce());
    return (this.modifiers || []).forEach((t) => {
      t.run(e, this);
    }), e;
  }
  /**
   * Roll a single die and return the value.
   *
   * @returns {RollResult} The value rolled
   */
  rollOnce() {
    return new jo(_a.integer(this.min, this.max));
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  average: number,
   *  min: number,
   *  max: number,
   *  notation: string,
   *  qty: number,
   *  name: string,
   *  sides: number,
   *  modifiers: (Map<string, Modifier>|null),
   *  type: string
   * }}
   */
  toJSON() {
    const {
      average: e,
      max: t,
      min: n,
      modifiers: a,
      name: i,
      notation: o,
      qty: f,
      sides: l
    } = this;
    return Object.assign(
      super.toJSON(),
      {
        average: e,
        max: t,
        min: n,
        modifiers: a,
        name: i,
        notation: o,
        qty: f,
        sides: l,
        type: "die"
      }
    );
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @see {@link StandardDice#notation}
   *
   * @returns {string}
   */
  toString() {
    return `${this.notation}${this.description ? ` ${this.description}` : ""}`;
  }
}
class fq extends Ha {
  /**
   * Create a `FudgeDice` instance.
   *
   * @param {number} [nonBlanks=2] The number of sides each symbol should cover (`1` or `2`)
   * @param {number} [qty=1] The number of dice to roll (e.g. `4`)
   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers] The modifiers that affect the die
   * @param {Description|string|null} [description=null] The roll description.
   *
   * @throws {RangeError} nonBlanks must be 1 or 2
   * @throws {TypeError} modifiers must be valid
   */
  constructor(e = 2, t = 1, n = null, a = null) {
    let i = e;
    if (!i && i !== 0)
      i = 2;
    else if (i !== 1 && i !== 2)
      throw new RangeError("nonBlanks must be 1 or 2");
    super(i, t, n, -1, 1, a);
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the die.
   *
   * @returns {string} 'fudge'
   */
  get name() {
    return "fudge";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The number of sides that each symbol (+, -) covers.
   *
   * @returns {number} `1` or `2`
   */
  get nonBlanks() {
    return super.sides;
  }
  /**
   * The number of sides the die has.
   *
   * @returns {string} 'F.2' or 'F.1'
   */
  get sides() {
    return `F.${this.nonBlanks}`;
  }
  /**
   * Roll a single die and return the value.
   *
   * @returns {RollResult} The value rolled
   */
  rollOnce() {
    let e = 0;
    if (this.nonBlanks === 2)
      e = _a.integer(1, 3) - 2;
    else if (this.nonBlanks === 1) {
      const t = _a.integer(1, 6);
      t === 1 ? e = -1 : t === 6 && (e = 1);
    }
    return new jo(e);
  }
}
class mq extends Ha {
  /**
   * Create a `PercentileDice` instance.
   *
   * @param {number} [qty=1] The number of dice to roll (e.g. `4`)
   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers] The modifiers that affect the die
   * @param {boolean} [sidesAsNumber=false] Whether to show the sides as `%` (default) or `100`
   * @param {Description|string|null} [description=null] The roll description.
   *
   * @throws {TypeError} qty must be a positive integer, and modifiers must be valid
   */
  constructor(e = 1, t = null, n = !1, a = null) {
    super(100, e, t, null, null, a), this.sidesAsNumber = !!n;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the die.
   *
   * @returns {string} 'percentile'
   */
  get name() {
    return "percentile";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The number of sides the die has
   *
   * @returns {number|string} `%` if `sidesAsNumber == false`, or `100` otherwise
   */
  get sides() {
    return this.sidesAsNumber ? super.sides : "%";
  }
}
const qd = Symbol("operator"), Ld = Symbol("value");
class es {
  /**
   * Create a `ComparePoint` instance.
   *
   * @param {string} operator The comparison operator (One of `=`, `!=`, `<>`, `<`, `>`, `<=`, `>=`)
   * @param {number} value The value to compare to
   *
   * @throws {CompareOperatorError} operator is invalid
   * @throws {RequiredArgumentError} operator and value are required
   * @throws {TypeError} value must be numeric
   */
  constructor(e, t) {
    if (e) {
      if (!t && t !== 0)
        throw new At("value");
    } else
      throw new At("operator");
    this.operator = e, this.value = t;
  }
  /**
   * Check if the operator is valid.
   *
   * @param {string} operator
   *
   * @returns {boolean} `true` if the operator is valid, `false` otherwise
   */
  static isValidOperator(e) {
    return typeof e == "string" && /^(?:[<>!]?=|[<>]|<>)$/.test(e);
  }
  /**
   * Set the comparison operator.
   *
   * @param {string} operator One of `=`, `!=`, `<>`, `<`, `>`, `<=`, `>=`
   *
   * @throws CompareOperatorError operator is invalid
   */
  set operator(e) {
    if (!this.constructor.isValidOperator(e))
      throw new wl(e);
    this[qd] = e;
  }
  /**
   * The comparison operator.
   *
   * @returns {string}
   */
  get operator() {
    return this[qd];
  }
  /**
   * Set the value.
   *
   * @param {number} value
   *
   * @throws {TypeError} value must be numeric
   */
  set value(e) {
    if (!Dr(e))
      throw new TypeError("value must be a finite number");
    this[Ld] = Number(e);
  }
  /**
   * The comparison value
   *
   * @returns {number}
   */
  get value() {
    return this[Ld];
  }
  /**
   * Check whether value matches the compare point
   *
   * @param {number} value The number to compare
   *
   * @returns {boolean} `true` if it is a match, `false` otherwise
   */
  isMatch(e) {
    return OP(e, this.value, this.operator);
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{type: string, value: number, operator: string}}
   */
  toJSON() {
    const { operator: e, value: t } = this;
    return {
      operator: e,
      type: "compare-point",
      value: t
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @returns {string}
   */
  toString() {
    return `${this.operator}${this.value}`;
  }
}
const zd = Symbol("compare-point");
class ui extends pn {
  /**
   * Create a `ComparisonModifier` instance.
   *
   * @param {ComparePoint} [comparePoint] The comparison object
   *
   * @throws {TypeError} `comparePoint` must be an instance of `ComparePoint` or `undefined`
   */
  constructor(e) {
    super(), e && (this.comparePoint = e);
  }
  /**
   * The compare point.
   *
   * @returns {ComparePoint|undefined}
   */
  get comparePoint() {
    return this[zd];
  }
  /**
   * Set the compare point.
   *
   * @param {ComparePoint} comparePoint
   *
   * @throws {TypeError} value must be an instance of `ComparePoint`
   */
  set comparePoint(e) {
    if (!(e instanceof es))
      throw new TypeError("comparePoint must be instance of ComparePoint");
    this[zd] = e;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'comparison'
   */
  get name() {
    return "comparison";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `${this.comparePoint || ""}`;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * Empty default compare point definition
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {null}
   */
  defaultComparePoint(e) {
    return {};
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Eases processing of simple "compare point only" defaults
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {object}
   */
  defaults(e) {
    const t = this.defaultComparePoint(e);
    return typeof t == "object" && t.length === 2 ? { comparePoint: new es(...t) } : {};
  }
  /**
   * Check whether value matches the compare point or not.
   *
   * @param {number} value The value to compare with
   *
   * @returns {boolean} `true` if the value matches, `false` otherwise
   */
  isComparePoint(e) {
    return this.comparePoint ? this.comparePoint.isMatch(e) : !1;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  notation: string,
   *  name: string,
   *  type: string,
   *  comparePoint: (ComparePoint|undefined)
   * }}
   */
  toJSON() {
    const { comparePoint: e } = this;
    return Object.assign(
      super.toJSON(),
      {
        comparePoint: e
      }
    );
  }
}
class A1 extends ui {
  /**
   * Create a `CriticalFailureModifier` instance.
   *
   * @param {ComparePoint} [comparePoint] The comparison object
   *
   * @throws {TypeError} comparePoint must be a `ComparePoint` object
   */
  constructor(e) {
    super(e);
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'critical-failure'
   */
  get name() {
    return "critical-failure";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `cf${super.notation}`;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The default compare point definition
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {array}
   */
  defaultComparePoint(e) {
    return ["=", e.min];
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    return super.run(e, t), e.rolls.forEach((n) => (this.isComparePoint(n.value) && n.modifiers.add("critical-failure"), n)), e;
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(A1, "order", 10);
class E1 extends ui {
  /**
   * Create a `CriticalSuccessModifier` instance.
   *
   * @param {ComparePoint} comparePoint The comparison object
   *
   * @throws {TypeError} comparePoint must be a `ComparePoint` object
   */
  constructor(e) {
    super(e);
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'critical-success'
   */
  get name() {
    return "critical-success";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `cs${super.notation}`;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The default compare point definition
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {array}
   */
  defaultComparePoint(e) {
    return ["=", e.max];
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Runs the modifier on the rolls.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults}
   */
  run(e, t) {
    return super.run(e, t), e.rolls.forEach((n) => (this.isComparePoint(n.value) && n.modifiers.add("critical-success"), n)), e;
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(E1, "order", 9);
const _u = Symbol("calculation-value"), Ud = Symbol("is-roll-group"), Fu = Symbol("modifiers"), $u = Symbol("results"), kd = Symbol("use-in-total");
class zr {
  /**
   * Create a `ResultGroup` instance.
   *
   * @example <caption>Normal roll: `4d6+2d10`</caption>
   * const results = new ResultGroup([
   *  new RollResults([3, 5, 4, 2]),
   *  '+',
   *  new RollResults([4, 8]),
   * ]);
   *
   * @example <caption>Roll group: `{4d6+2d10/2, 5d6/2d%}`</caption>
   * const results = new ResultGroup([
   *  new ResultGroup([
   *    new RollResults([3, 5, 4, 2]),
   *    '+',
   *    new RollResults([4, 8]),
   *    '/',
   *    2,
   *  ]),
   *  new ResultGroup([
   *    new RollResults([3, 3, 5, 2, 4]),
   *    '/',
   *    new RollResults([87, 46]),
   *  ]),
   * ]);
   *
   * @param {Array.<ResultGroup|RollResults|number|string>} [results=[]] The results and expressions
   * @param {string[]|Set<string>} [modifiers=[]] List of modifier names that affect the group
   * @param {boolean} [isRollGroup=false] Whether the result group represents a roll group or not
   * @param {boolean} [useInTotal=true] Whether to include the group's value when calculating totals
   *
   * @throws {TypeError} Rolls must be an array
   */
  constructor(e = [], t = [], n = !1, a = !0) {
    this.isRollGroup = n, this.modifiers = t, this.results = e, this.useInTotal = a;
  }
  /**
   * The value to use in calculations.
   * This may be changed by modifiers.
   *
   * @returns {number}
   */
  get calculationValue() {
    return Dr(this[_u]) ? parseFloat(this[_u]) : this.value;
  }
  /**
   * Set the value to use in calculations.
   *
   * @param {number} value
   *
   * @throws {TypeError} value is invalid
   */
  set calculationValue(e) {
    const t = Dr(e);
    if (e === 1 / 0)
      throw new RangeError("Results calculation value must be a finite number");
    if (e && !t)
      throw new TypeError(`Results calculation value is invalid: ${e}`);
    this[_u] = t ? parseFloat(`${e}`) : null;
  }
  /**
   * Whether the result group represents a roll group or not.
   *
   * @returns {boolean} `true` if it is a roll group, `false` otherwise
   */
  get isRollGroup() {
    return this[Ud];
  }
  /**
   * Set whether the result group represents a roll group or not.
   *
   * @param {boolean} value
   */
  set isRollGroup(e) {
    this[Ud] = !!e;
  }
  /**
   * The number of results.
   *
   * @returns {number}
   */
  get length() {
    return this.results.length || 0;
  }
  /**
   * The visual flags for the modifiers that affect the group.
   *
   * @see {@link ResultGroup#modifiers}
   *
   * @returns {string}
   */
  get modifierFlags() {
    return N1(...this.modifiers);
  }
  /**
   * The modifier names that affect the group.
   *
   * @returns {Set<string>}
   */
  get modifiers() {
    return this[Fu];
  }
  /**
   * Set the modifier names that affect the group.
   *
   * @example
   * resultGroup.modifiers = ['drop', 'target-success'];
   *
   * @param {string[]|Set<string>} value
   *
   * @throws {TypeError} modifiers must be a Set or array of modifier names
   */
  set modifiers(e) {
    if ((Array.isArray(e) || e instanceof Set) && [...e].every((t) => typeof t == "string"))
      this[Fu] = /* @__PURE__ */ new Set([...e]);
    else if (!e && e !== 0)
      this[Fu] = /* @__PURE__ */ new Set();
    else
      throw new TypeError(`modifiers must be a Set or array of modifier names: ${e}`);
  }
  /**
   * List of results.
   *
   * @returns {Array.<ResultGroup|RollResults|number|string>}
   */
  get results() {
    return [...this[$u]];
  }
  /**
   * Set the results.
   *
   * @param {Array.<ResultGroup|RollResults|number|string>} results
   *
   * @throws {TypeError} Results must be an array
   */
  set results(e) {
    if (!e || !Array.isArray(e))
      throw new TypeError(`results must be an array: ${e}`);
    this[$u] = [], e.forEach((t) => {
      this.addResult(t);
    });
  }
  /**
   * Whether to use the value in total calculations or not.
   *
   * @returns {boolean}
   */
  get useInTotal() {
    return !!this[kd];
  }
  /**
   * Set whether to use the value in total calculations or not.
   *
   * @param {boolean} value
   */
  set useInTotal(e) {
    this[kd] = !!e;
  }
  /**
   * The total value of all the results after modifiers have been applied.
   *
   * @returns {number}
   */
  get value() {
    if (!this.results.length)
      return 0;
    const e = this.results.reduce((t, n) => {
      let a = n;
      return n instanceof zr ? a = n.useInTotal ? n.calculationValue : 0 : n instanceof an && (a = n.value), t + a;
    }, typeof this.results[0] == "string" ? "" : 0);
    return typeof e == "string" ? m1(e) : e;
  }
  /**
   * Add a single result to the list.
   *
   * @param {ResultGroup|RollResults|number|string} value
   *
   * @throws {TypeError} Value type is invalid
   */
  addResult(e) {
    let t;
    if (e instanceof zr || e instanceof an)
      t = e;
    else if (typeof e == "string" || Dr(e))
      t = e;
    else
      throw new TypeError("value must be one of ResultGroup, RollResults, string, or number");
    this[$u].push(t);
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  modifierFlags: string,
   *  modifiers: string[],
   *  results: Array<ResultGroup|RollResults|number|string>,
   *  type: string,
   *  useInTotal: boolean,
   *  value: number
   * }}
   */
  toJSON() {
    const {
      calculationValue: e,
      isRollGroup: t,
      modifierFlags: n,
      modifiers: a,
      results: i,
      useInTotal: o,
      value: f
    } = this;
    return {
      calculationValue: e,
      isRollGroup: t,
      modifierFlags: n,
      modifiers: [...a],
      results: i,
      type: "result-group",
      useInTotal: o,
      value: f
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @returns {string}
   */
  toString() {
    let e;
    return this.isRollGroup ? e = `{${this.results.join(", ")}}` : e = this.results.join(""), this.modifierFlags && (e = `(${e})${this.modifierFlags}`), e;
  }
}
const Gd = Symbol("end"), Vd = Symbol("qty");
class Dl extends pn {
  /**
   * Create a `KeepModifier` instance
   *
   * @param {string} [end=h] Either `h|l` to keep highest or lowest
   * @param {number} [qty=1] The amount dice to keep
   *
   * @throws {RangeError} End must be one of 'h' or 'l'
   * @throws {TypeError} qty must be a positive integer
   */
  constructor(e = "h", t = 1) {
    super(), this.end = e, this.qty = t;
  }
  /**
   * Which end the rolls should be kept ("h" = High, "l" = Low).
   *
   * @returns {string} 'h' or 'l'
   */
  get end() {
    return this[Gd];
  }
  /**
   * Set which end the rolls should be kept ("h" = High, "l" = Low).
   *
   * @param {string} value Either 'h' or 'l'
   *
   * @throws {RangeError} End must be one of 'h' or 'l'
   */
  set end(e) {
    if (e !== "h" && e !== "l")
      throw new RangeError('End must be "h" or "l"');
    this[Gd] = e;
  }
  /**
   * The name of the modifier.
   *
   * @returns {string} 'keep-l' or 'keep-h'
   */
  get name() {
    return `keep-${this.end}`;
  }
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `k${this.end}${this.qty}`;
  }
  /**
   * The quantity of dice that should be kept.
   *
   * @returns {number}
   */
  get qty() {
    return this[Vd];
  }
  /**
   * Set the quantity of dice that should be kept.
   *
   * @param {number} value
   *
   * @throws {TypeError} qty must be a positive finite integer
   */
  set qty(e) {
    if (e === 1 / 0)
      throw new RangeError("qty must be a finite number");
    if (!Dr(e) || e < 1)
      throw new TypeError("qty must be a positive finite integer");
    this[Vd] = Math.floor(e);
  }
  /**
   * Determine the start and end (end exclusive) range of rolls to drop.
   *
   * @param {RollResults} _results The results to drop from
   *
   * @returns {number[]} The min / max range to drop
   */
  rangeToDrop(e) {
    return this.end === "h" ? [0, e.length - this.qty] : [this.qty, e.length];
  }
  /**
   * Run the modifier on the results.
   *
   * @param {ResultGroup|RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {ResultGroup|RollResults} The modified results
   */
  run(e, t) {
    let n, a;
    return e instanceof zr ? (n = e.results, n.length === 1 && n[0] instanceof zr ? a = n[0].results.map((i, o) => i instanceof an ? i.rolls.map((f, l) => ({
      value: f.value,
      index: [o, l]
    })) : null).flat().filter(Boolean) : a = [...n].map((i, o) => ({
      value: i.value,
      index: o
    }))) : (n = e.rolls, a = [...n].map((i, o) => ({
      value: i.value,
      index: o
    }))), a = a.sort((i, o) => i.value - o.value).map((i) => i.index).slice(...this.rangeToDrop(a)), a.forEach((i) => {
      let o;
      Array.isArray(i) ? o = n[0].results[i[0]].rolls[i[1]] : o = n[i], o.modifiers.add("drop"), o.useInTotal = !1;
    }), e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{notation: string, name: string, type: string, qty: number, end: string}}
   */
  toJSON() {
    const { end: e, qty: t } = this;
    return Object.assign(
      super.toJSON(),
      {
        end: e,
        qty: t
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(Dl, "order", 6);
class D1 extends Dl {
  /**
   * Create a `DropModifier` instance.
   *
   * @param {string} [end=l] Either `h|l` to drop highest or lowest
   * @param {number} [qty=1] The amount of dice to drop
   *
   * @throws {RangeError} End must be one of 'h' or 'l'
   * @throws {TypeError} qty must be a positive integer
   */
  constructor(e = "l", t = 1) {
    super(e, t);
  }
  /**
   * The name of the modifier.
   *
   * @returns {string} 'drop-l' or 'drop-h'
   */
  get name() {
    return `drop-${this.end}`;
  }
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `d${this.end}${this.qty}`;
  }
  /**
   * Determine the start and end (end exclusive) range of rolls to drop.
   *
   * @param {RollResults} _results The results to drop from
   *
   * @returns {number[]} The min / max range to drop
   */
  rangeToDrop(e) {
    return this.end === "h" ? [e.length - this.qty, e.length] : [0, this.qty];
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(D1, "order", 7);
const Hd = Symbol("compound"), Zd = Symbol("penetrate");
class S1 extends ui {
  /**
   * Create an `ExplodeModifier` instance
   *
   * @param {ComparePoint} [comparePoint=null] The comparison object
   * @param {boolean} [compound=false] Whether to compound or not
   * @param {boolean} [penetrate=false] Whether to penetrate or not
   *
   * @throws {TypeError} comparePoint must be a `ComparePoint` object
   */
  constructor(e = null, t = !1, n = !1) {
    super(e), this[Hd] = !!t, this[Zd] = !!n;
  }
  /**
   * Whether the modifier should compound the results or not.
   *
   * @returns {boolean} `true` if it should compound, `false` otherwise
   */
  get compound() {
    return this[Hd];
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'explode'
   */
  get name() {
    return "explode";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `!${this.compound ? "!" : ""}${this.penetrate ? "p" : ""}${super.notation}`;
  }
  /**
   * Whether the modifier should penetrate the results or not.
   *
   * @returns {boolean} `true` if it should penetrate, `false` otherwise
   */
  get penetrate() {
    return this[Zd];
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The default compare point definition
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {array}
   */
  defaultComparePoint(e) {
    return ["=", e.max];
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    if (super.run(e, t), t.min === t.max)
      throw new Ii(t, "explode");
    const n = e;
    return n.rolls = e.rolls.map((a) => {
      const i = [a];
      let o = a.value;
      for (let f = 0; f < this.maxIterations && this.isComparePoint(o); f++) {
        const l = i[i.length - 1], u = t.rollOnce();
        o = u.value, l.modifiers.add("explode"), this.penetrate && (l.modifiers.add("penetrate"), u.value -= 1), i.push(u);
      }
      return this.compound && i.length > 1 ? (a.value = TP(i.map((f) => f.value)), a.modifiers = [
        "explode",
        "compound"
      ], this.penetrate && a.modifiers.add("penetrate"), a) : i;
    }).flat(), n;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  notation: string,
   *  name: string,
   *  type: string,
   *  comparePoint: (ComparePoint|undefined),
   *  compound: boolean,
   *  penetrate: boolean
   * }}
   */
  toJSON() {
    const { compound: e, penetrate: t } = this;
    return Object.assign(
      super.toJSON(),
      {
        compound: e,
        penetrate: t
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(S1, "order", 3);
const Yd = Symbol("max");
class C1 extends pn {
  /**
   * Create a `MaxModifier` instance.
   *
   * @param {number} max The maximum value
   *
   * @throws {TypeError} max must be a number
   */
  constructor(e) {
    super(), this.max = e;
  }
  /**
   * The maximum value.
   *
   * @returns {Number}
   */
  get max() {
    return this[Yd];
  }
  /**
   * Set the maximum value.
   *
   * @param {number} value
   *
   * @throws {TypeError} max must be a number
   */
  set max(e) {
    if (!Dr(e))
      throw new TypeError("max must be a number");
    this[Yd] = parseFloat(`${e}`);
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'max'
   */
  get name() {
    return "max";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `max${this.max}`;
  }
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    const n = e;
    return n.rolls = e.rolls.map((a) => {
      const i = a;
      return a.value > this.max && (i.value = this.max, i.modifiers.add("max")), i;
    }), n;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{notation: string, name: string, type: string, max: Number}}
   */
  toJSON() {
    const { max: e } = this;
    return Object.assign(
      super.toJSON(),
      {
        max: e
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(C1, "order", 2);
const Wd = Symbol("min");
class M1 extends pn {
  /**
   * Create a `MinModifier` instance.
   *
   * @param {number} min The minimum value
   *
   * @throws {TypeError} min must be a number
   */
  constructor(e) {
    super(), this.min = e;
  }
  /**
   * The minimum value.
   *
   * @returns {Number}
   */
  get min() {
    return this[Wd];
  }
  /**
   * Set the minimum value.
   *
   * @param {number} value
   *
   * @throws {TypeError} min must be a number
   */
  set min(e) {
    if (!Dr(e))
      throw new TypeError("min must be a number");
    this[Wd] = parseFloat(`${e}`);
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'min'
   */
  get name() {
    return "min";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `min${this.min}`;
  }
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    const n = e;
    return n.rolls = e.rolls.map((a) => {
      const i = a;
      return a.value < this.min && (i.value = this.min, i.modifiers.add("min")), i;
    }), n;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{notation: string, name: string, type: string, min: Number}}
   */
  toJSON() {
    const { min: e } = this;
    return Object.assign(
      super.toJSON(),
      {
        min: e
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(M1, "order", 1);
const Jd = Symbol("once");
class O1 extends ui {
  /**
   * Create a `ReRollModifier` instance.
   *
   * @param {boolean} [once=false] Whether to only re-roll once or not
   * @param {ComparePoint} [comparePoint=null] The comparison object
   */
  constructor(e = !1, t = null) {
    super(t), this.once = !!e;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 're-roll'
   */
  get name() {
    return "re-roll";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `r${this.once ? "o" : ""}${super.notation}`;
  }
  /**
   * Whether the modifier should only re-roll once or not.
   *
   * @returns {boolean} `true` if it should re-roll once, `false` otherwise
   */
  get once() {
    return !!this[Jd];
  }
  /**
   * Set whether the modifier should only re-roll once or not.
   *
   * @param {boolean} value
   */
  set once(e) {
    this[Jd] = !!e;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The default compare point definition
   *
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {array}
   */
  defaultComparePoint(e) {
    return ["=", e.min];
  }
  /* eslint-enable class-methods-use-this */
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    if (super.run(e, t), t.min === t.max)
      throw new Ii(t, "re-roll");
    return e.rolls.map((n) => {
      for (let a = 0; a < this.maxIterations && this.isComparePoint(n.value); a++) {
        const i = t.rollOnce();
        if (n.value = i.value, n.modifiers.add(`re-roll${this.once ? "-once" : ""}`), this.once)
          break;
      }
      return n;
    }), e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  notation: string,
   *  name: string,
   *  type: string,
   *  comparePoint: (ComparePoint|undefined),
   *  once: boolean
   * }}
   */
  toJSON() {
    const { once: e } = this;
    return Object.assign(
      super.toJSON(),
      {
        once: e
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(O1, "order", 4);
const Xd = Symbol("direction");
class T1 extends pn {
  /**
   * Create a `SortingModifier` instance.
   *
   * @param {string} [direction=a] The direction to sort in; 'a' (Ascending) or 'd' (Descending)
   *
   * @throws {RangeError} Direction must be 'a' or 'd'
   */
  constructor(e = "a") {
    super(), this.direction = e;
  }
  /**
   * The sort direction.
   *
   * @returns {string} Either 'a' or 'd'
   */
  get direction() {
    return this[Xd];
  }
  /**
   * Set the sort direction.
   *
   * @param {string} value Either 'a' (Ascending) or 'd' (Descending)
   *
   * @throws {RangeError} Direction must be 'a' or 'd'
   */
  set direction(e) {
    if (e !== "a" && e !== "d")
      throw new RangeError('Direction must be "a" (Ascending) or "d" (Descending)');
    this[Xd] = e;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'sorting'
   */
  get name() {
    return "sorting";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `s${this.direction}`;
  }
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    let n;
    return e instanceof zr ? n = "results" : n = "rolls", e[n] = e[n].sort((a, i) => this.direction === "d" ? i.value - a.value : a.value - i.value), e instanceof zr && (e[n] = e[n].map((a) => a instanceof zr || a instanceof an ? this.run(a, t) : a)), e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{notation: string, name: string, type: string, direction: string}}
   */
  toJSON() {
    const { direction: e } = this;
    return Object.assign(
      super.toJSON(),
      {
        direction: e
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(T1, "order", 11);
const Kd = Symbol("failure-cp");
class B1 extends ui {
  /**
   * Create a `TargetModifier` instance.
   *
   * @param {ComparePoint} successCP The success comparison object
   * @param {ComparePoint} [failureCP=null] The failure comparison object
   *
   * @throws {TypeError} failure comparePoint must be instance of ComparePoint or null
   */
  constructor(e, t = null) {
    super(e), this.failureComparePoint = t;
  }
  /**
   * The failure compare point for the modifier
   *
   * @returns {ComparePoint|null}
   */
  get failureComparePoint() {
    return this[Kd];
  }
  /**
   * Set the failure compare point
   *
   * @param {ComparePoint|null} comparePoint
   *
   * @throws {TypeError} failure comparePoint must be instance of ComparePoint or null
   */
  set failureComparePoint(e) {
    if (e && !(e instanceof es))
      throw new TypeError("failure comparePoint must be instance of ComparePoint or null");
    this[Kd] = e || null;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'target'
   */
  get name() {
    return "target";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `${super.notation}${this.failureComparePoint ? `f${this.failureComparePoint}` : ""}`;
  }
  /**
   * The success compare point for the modifier
   *
   * @returns {ComparePoint}
   */
  get successComparePoint() {
    return this.comparePoint;
  }
  /**
   * Set the success compare point for the modifier
   *
   * @param {ComparePoint} value
   */
  set successComparePoint(e) {
    super.comparePoint = e;
  }
  /**
   * Check if the value is a success/failure/neither and return the corresponding state value.
   *
   * @param {number} value The number to compare against
   *
   * @returns {number} success = `1`, failure = `-1`, neutral = `0`
   */
  getStateValue(e) {
    return this.isSuccess(e) ? 1 : this.isFailure(e) ? -1 : 0;
  }
  /**
   * Check if the `value` matches the failure compare point.
   *
   * A response of `false` does _NOT_ indicate a success.
   * A value is a success _ONLY_ if it passes the success compare point.
   * A value could be neither a failure nor a success.
   *
   * @param {number} value The number to compare against
   *
   * @returns {boolean}
   */
  isFailure(e) {
    return this.failureComparePoint ? this.failureComparePoint.isMatch(e) : !1;
  }
  /**
   * Check if the `value` is neither a success nor a failure.
   *
   * @param {number} value The number to compare against
   *
   * @returns {boolean} `true` if the value doesn't match the success and failure compare points
   */
  isNeutral(e) {
    return !this.isSuccess(e) && !this.isFailure(e);
  }
  /**
   * Check if the `value` matches the success compare point.
   *
   * A response of `false` does _NOT_ indicate a failure.
   * A value is a failure _ONLY_ if it passes the failure compare point.
   * A value could be neither a failure nor a success.
   *
   * @param {number} value The number to compare against
   *
   * @returns {boolean}
   */
  isSuccess(e) {
    return this.isComparePoint(e);
  }
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    let n;
    return e instanceof zr ? n = e.results : n = e.rolls, n.forEach((a) => {
      this.isSuccess(a.value) ? a.modifiers.add("target-success") : this.isFailure(a.value) && a.modifiers.add("target-failure"), a.calculationValue = this.getStateValue(a.value);
    }), e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  notation: string,
   *  name: string,
   *  type: string,
   *  comparePoint: (ComparePoint|undefined),
   *  failureComparePoint: (ComparePoint|null),
   *  successComparePoint: ComparePoint
   * }}
   */
  toJSON() {
    const { failureComparePoint: e, successComparePoint: t } = this, n = super.toJSON();
    return delete n.comparePoint, Object.assign(
      n,
      {
        failureComparePoint: e,
        successComparePoint: t
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(B1, "order", 8);
const Qd = Symbol("once"), vq = (r, e, t, n = !1) => {
  const a = t.map((i) => i.value).indexOf(r.value);
  return n ? a < e : a !== e;
};
class _1 extends ui {
  /**
   * Create a `UniqueModifier` instance.
   *
   * @param {boolean} [once=false] Whether to only re-roll once or not
   * @param {ComparePoint} [comparePoint=null] The comparison object
   */
  constructor(e = !1, t = null) {
    super(t), this.once = !!e;
  }
  /* eslint-disable class-methods-use-this */
  /**
   * The name of the modifier.
   *
   * @returns {string} 'unique'
   */
  get name() {
    return "unique";
  }
  /* eslint-enable class-methods-use-this */
  /**
   * The modifier's notation.
   *
   * @returns {string}
   */
  get notation() {
    return `u${this.once ? "o" : ""}${super.notation}`;
  }
  /**
   * Whether the modifier should only re-roll once or not.
   *
   * @returns {boolean} `true` if it should re-roll once, `false` otherwise
   */
  get once() {
    return !!this[Qd];
  }
  /**
   * Set whether the modifier should only re-roll once or not.
   *
   * @param {boolean} value
   */
  set once(e) {
    this[Qd] = !!e;
  }
  /**
   * Run the modifier on the results.
   *
   * @param {RollResults} results The results to run the modifier against
   * @param {StandardDice|RollGroup} _context The object that the modifier is attached to
   *
   * @returns {RollResults} The modified results
   */
  run(e, t) {
    if (t.min === t.max)
      throw new Ii(t, "re-roll");
    return e.rolls.forEach((n, a, i) => {
      if (a !== 0)
        for (let o = 0; o < this.maxIterations && (!this.comparePoint || this.isComparePoint(n.value)) && vq(n, a, i, !0); o++) {
          const f = t.rollOnce();
          if (n.value = f.value, n.modifiers.add(`unique${this.once ? "-once" : ""}`), this.once)
            break;
        }
    }), e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  notation: string,
   *  name: string,
   *  type: string,
   *  comparePoint: (ComparePoint|undefined),
   *  once: boolean
   * }}
   */
  toJSON() {
    const { once: e } = this;
    return Object.assign(
      super.toJSON(),
      {
        once: e
      }
    );
  }
}
/**
 * The default modifier execution order.
 *
 * @type {number}
 */
ct(_1, "order", 5);
const F1 = (r) => {
  try {
    return !!(r && btoa(atob(r)) === r);
  } catch {
    return !1;
  }
}, $1 = (r) => {
  try {
    const e = r ? JSON.parse(r) : !1;
    return !!(e && typeof e == "object");
  } catch {
    return !1;
  }
}, Ru = Symbol("expressions"), Iu = Symbol("modifiers");
class R1 extends w1 {
  /**
   * Create a `RollGroup` instance.
   *
   * @param {Array.<Array.<StandardDice|string|number>>} [expressions=[]] List of sub-rolls
   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers=[]] The modifiers that affect the
   * group
   * @param {Description|string|null} [description=null] The roll description.
   */
  constructor(e = [], t = [], n = null) {
    super(n), this.expressions = e, this.modifiers = t;
  }
  /**
   * The sub-roll expressions in the group.
   *
   * @returns {Array.<Array.<StandardDice|string|number>>}
   */
  get expressions() {
    return [...this[Ru] || []];
  }
  /**
   * Set the sub-roll expressions in the group.
   *
   * @param {Array.<Array.<StandardDice|string|number>>} expressions
   *
   * @throws {TypeError} Expressions must be an array of arrays
   * @throws {TypeError} Sub expressions cannot be empty
   * @throws {TypeError} Sub expression items must be Dice, numbers, or strings
   */
  set expressions(e) {
    if (!e)
      throw new At("expressions");
    if (!Array.isArray(e))
      throw new TypeError(`expressions must be an array: ${e}`);
    this[Ru] = [], e.forEach((t) => {
      if (!t || !Array.isArray(t))
        throw new TypeError(`Expressions must be an array of arrays: ${e}`);
      if (t.length === 0)
        throw new TypeError(`Sub expressions cannot be empty: ${e}`);
      if (!t.every((n) => n instanceof Ha || typeof n == "string" || typeof n == "number"))
        throw new TypeError("Sub expression items must be Dice, numbers, or strings");
      this[Ru].push(t);
    });
  }
  /**
   * The modifiers that affect the object.
   *
   * @returns {Map<string, Modifier>|null}
   */
  get modifiers() {
    return this[Iu] ? new Map([...this[Iu]].sort((e, t) => e[1].order - t[1].order)) : null;
  }
  /**
   * Set the modifiers that affect this group.
   *
   * @param {Map<string, Modifier>|Modifier[]|{}|null} value
   *
   * @throws {TypeError} Modifiers should be a Map, array of Modifiers, or an Object
   */
  set modifiers(e) {
    let t;
    if (e instanceof Map)
      t = e;
    else if (Array.isArray(e))
      t = new Map(e.map((n) => [n.name, n]));
    else if (typeof e == "object")
      t = new Map(Object.entries(e));
    else
      throw new TypeError("modifiers should be a Map, array, or an Object containing Modifiers");
    if (t.size && [...t.entries()].some((n) => !(n[1] instanceof pn)))
      throw new TypeError("modifiers must only contain Modifier instances");
    this[Iu] = t;
  }
  /**
   * The group notation. e.g. `{4d6, 2d10+3}k1`.
   *
   * @returns {string}
   */
  get notation() {
    let e = this.expressions.map((t) => t.reduce((n, a) => n + a, "")).join(", ");
    return e = `{${e}}`, this.modifiers && this.modifiers.size && (e += [...this.modifiers.values()].reduce((t, n) => t + n.notation, "")), e;
  }
  /**
   * Run the sub-roll expressions for the group.
   *
   * @example <caption>`{4d6+4/1d6, 2d10/3}k1`</caption>
   * ResultGroup {
   *   results: [
   *     // sub-roll 1 - 4d6+4/1d6
   *     ResultGroup {
   *       results: [
   *         RollResults {
   *           rolls: [
   *             RollResult {
   *               value: 2
   *             },
   *             RollResult {
   *               value: 5
   *             },
   *             RollResult {
   *               value: 4
   *             },
   *             RollResult {
   *               value: 1
   *             }
   *           ]
   *         },
   *         '+',
   *         4,
   *         '/',
   *         RollResults {
   *           rolls: [
   *             RollResult {
   *               value: 4
   *             }
   *           ]
   *         }
   *       ]
   *     },
   *     // sub-roll 2 - 2d10/3
   *     ResultGroup {
   *       results: [
   *         RollResults {
   *           rolls: [
   *             RollResults {
   *               4
   *             },
   *             RollResults {
   *               9
   *             }
   *           ]
   *         },
   *         '/',
   *         3
   *       ]
   *     }
   *   ]
   * }
   *
   * @returns {ResultGroup} The results of the sub-rolls
   */
  roll() {
    const e = new zr(this.expressions.map((t) => {
      const n = t.map((a) => a instanceof Ha ? a.roll() : a);
      return new zr(n);
    }));
    return e.isRollGroup = !0, (this.modifiers || []).forEach((t) => {
      t.run(e, this);
    }), e;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  notation: string,
   *  modifiers: (Map<string, Modifier>|null),
   *  type: string,
   *  expressions: Array.<Array.<StandardDice|string|number>>
   * }}
   */
  toJSON() {
    const { modifiers: e, notation: t, expressions: n } = this;
    return Object.assign(
      super.toJSON(),
      {
        expressions: n,
        modifiers: e,
        notation: t,
        type: "group"
      }
    );
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @see {@link RollGroup#notation}
   *
   * @returns {string}
   */
  toString() {
    return `${this.notation}${this.description ? ` ${this.description}` : ""}`;
  }
}
function pq(r, e) {
  function t() {
    this.constructor = r;
  }
  t.prototype = e.prototype, r.prototype = new t();
}
function Za(r, e, t, n) {
  var a = Error.call(this, r);
  return Object.setPrototypeOf && Object.setPrototypeOf(a, Za.prototype), a.expected = e, a.found = t, a.location = n, a.name = "SyntaxError", a;
}
pq(Za, Error);
function Pu(r, e, t) {
  return t = t || " ", r.length > e ? r : (e -= r.length, t += t.repeat(e), r + t.slice(0, e));
}
Za.prototype.format = function(r) {
  var e = "Error: " + this.message;
  if (this.location) {
    var t = null, n;
    for (n = 0; n < r.length; n++)
      if (r[n].source === this.location.source) {
        t = r[n].text.split(/\r\n|\n|\r/g);
        break;
      }
    var a = this.location.start, i = this.location.source && typeof this.location.source.offset == "function" ? this.location.source.offset(a) : a, o = this.location.source + ":" + i.line + ":" + i.column;
    if (t) {
      var f = this.location.end, l = Pu("", i.line.toString().length, " "), u = t[a.line - 1], s = a.line === f.line ? f.column : u.length + 1, c = s - a.column || 1;
      e += `
 --> ` + o + `
` + l + ` |
` + i.line + " | " + u + `
` + l + " | " + Pu("", a.column - 1, " ") + Pu("", c, "^");
    } else
      e += `
 at ` + o;
  }
  return e;
};
Za.buildMessage = function(r, e) {
  var t = {
    literal: function(u) {
      return '"' + a(u.text) + '"';
    },
    class: function(u) {
      var s = u.parts.map(function(c) {
        return Array.isArray(c) ? i(c[0]) + "-" + i(c[1]) : i(c);
      });
      return "[" + (u.inverted ? "^" : "") + s.join("") + "]";
    },
    any: function() {
      return "any character";
    },
    end: function() {
      return "end of input";
    },
    other: function(u) {
      return u.description;
    }
  };
  function n(u) {
    return u.charCodeAt(0).toString(16).toUpperCase();
  }
  function a(u) {
    return u.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(s) {
      return "\\x0" + n(s);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(s) {
      return "\\x" + n(s);
    });
  }
  function i(u) {
    return u.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(s) {
      return "\\x0" + n(s);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(s) {
      return "\\x" + n(s);
    });
  }
  function o(u) {
    return t[u.type](u);
  }
  function f(u) {
    var s = u.map(o), c, m;
    if (s.sort(), s.length > 0) {
      for (c = 1, m = 1; c < s.length; c++)
        s[c - 1] !== s[c] && (s[m] = s[c], m++);
      s.length = m;
    }
    switch (s.length) {
      case 1:
        return s[0];
      case 2:
        return s[0] + " or " + s[1];
      default:
        return s.slice(0, -1).join(", ") + ", or " + s[s.length - 1];
    }
  }
  function l(u) {
    return u ? '"' + a(u) + '"' : "end of input";
  }
  return "Expected " + f(r) + " but " + l(e) + " found.";
};
function dq(r, e) {
  e = e !== void 0 ? e : {};
  var t = {}, n = e.grammarSource, a = { Main: Tl }, i = Tl, o = "{", f = ",", l = "}", u = "d", s = "d%", c = "dF", m = ".", v = "!", d = "p", p = "k", b = "max", g = "min", N = "r", h = "o", w = "u", x = "cs", y = "cf", E = "s", D = "a", S = "f", A = "!=", C = "<=", T = ">=", $ = "=", I = "<>", R = ">", B = "<", O = "(", G = ")", _ = "abs", U = "ceil", K = "cos", j = "exp", z = "floor", Q = "log", ae = "round", re = "sign", fe = "sin", de = "sqrt", le = "tan", ie = "pow", ye = "-", _e = "**", De = "*", Be = "^", k = "%", Z = "/", oe = "+", H = "/*", W = "*/", te = "[", ge = "]", ve = "//", P = "#", V = /^[12]/, ee = /^[lh]/, ue = /^[.]/, pe = /^[1-9]/, me = /^[0-9]/, Ne = /^[^\]]/, be = /^[\n\r\u2028\u2029]/, Oe = /^[ \t\n\r]/, Ae = qe("{", !1), We = qe(",", !1), er = qe("}", !1), Re = qe("d", !1), wr = qe("d%", !1), M = qe("dF", !1), X = qe(".", !1), se = hn(["1", "2"], !1, !1), Ee = qe("!", !1), ze = qe("p", !1), Ve = hn(["l", "h"], !1, !1), Kr = qe("k", !1), ca = qe("max", !1), qi = qe("min", !1), Os = qe("r", !1), Li = qe("o", !1), Ts = qe("u", !1), Bs = qe("cs", !1), _s = qe("cf", !1), Fs = qe("s", !1), $s = qe("a", !1), Rs = qe("f", !1), Is = qe("!=", !1), Ps = qe("<=", !1), qs = qe(">=", !1), Ls = qe("=", !1), zs = qe("<>", !1), Us = qe(">", !1), ks = qe("<", !1), la = qe("(", !1), fa = qe(")", !1), Gs = qe("abs", !1), Vs = qe("ceil", !1), Hs = qe("cos", !1), Zs = qe("exp", !1), Ys = qe("floor", !1), Ws = qe("log", !1), Js = qe("round", !1), Ln = qe("sign", !1), lr = qe("sin", !1), Vr = qe("sqrt", !1), Xs = qe("tan", !1), ma = qe("pow", !1), dn = qe("-", !1), Ks = hn(["."], !1, !1), P1 = hn([["1", "9"]], !1, !1), zi = hn([["0", "9"]], !1, !1), q1 = qe("**", !1), L1 = qe("*", !1), z1 = qe("^", !1), U1 = qe("%", !1), k1 = qe("/", !1), G1 = qe("+", !1), V1 = eu("comment"), H1 = qe("/*", !1), Qs = qe("*/", !1), Ui = Ty(), Z1 = qe("[", !1), Cl = hn(["]"], !0, !1), Y1 = qe("]", !1), W1 = qe("//", !1), J1 = qe("#", !1), X1 = hn([`
`, "\r", "\u2028", "\u2029"], !1, !1), K1 = eu("whitespace"), Q1 = hn([" ", "	", `
`, "\r"], !1, !1), j1 = eu("whitespace or comment"), ey = function(F, J, ne, ce) {
    return new R1(
      [
        F,
        ...J.map((Se) => Se[3])
      ],
      Object.assign({}, ...ne.map((Se) => ({ [Se.name]: Se }))),
      ce.find((Se) => Se instanceof Tt)
    );
  }, ry = function(F, J, ne) {
    return F.modifiers = Object.assign({}, ...J.map((ce) => ({ [ce.name]: ce }))), F.description = ne.find((ce) => ce instanceof Tt), F;
  }, ty = function(F, J) {
    return new Ha(J, F || 1);
  }, ny = function(F) {
    return new mq(F || 1);
  }, ay = function(F, J) {
    return new fq(J ? parseInt(J[1], 10) : 2, F || 1);
  }, iy = function(F, J, ne) {
    return new S1(ne, !!F, !!J);
  }, oy = function(F, J) {
    return new B1(F, J);
  }, sy = function(F, J) {
    return new D1(F || "l", J);
  }, uy = function(F, J) {
    return new Dl(F || "h", J);
  }, cy = function(F) {
    return new C1(F);
  }, ly = function(F) {
    return new M1(F);
  }, fy = function(F, J) {
    return new O1(!!F, J);
  }, my = function(F, J) {
    return new _1(!!F, J);
  }, vy = function(F) {
    return new E1(F);
  }, py = function(F) {
    return new A1(F);
  }, dy = function(F) {
    return new T1(F || "a");
  }, hy = function(F) {
    return F;
  }, gy = function(F, J) {
    return new es(F, J);
  }, yy = function(F, J, ne) {
    return m1(Vi());
  }, by = function(F, J) {
    return F = Array.isArray(F) ? F : [F], [
      ...F,
      ...J.map(([, ne, , ce]) => [
        ne,
        ce
      ]).flat(2)
    ];
  }, xy = function(F, J, ne) {
    return [F, ...J, ne];
  }, wy = function(F, J) {
    return [
      `${F}(`,
      ...J,
      ")"
    ];
  }, Ny = function(F, J, ne) {
    return [
      `${F}(`,
      ...J,
      ",",
      ...ne,
      ")"
    ];
  }, Ay = function() {
    return parseFloat(Vi());
  }, Ey = function() {
    return parseInt(Vi(), 10);
  }, Dy = function() {
    return parseInt(Vi(), 10);
  }, Sy = function() {
    return "^";
  }, Cy = function(F) {
    return new Tt(F.flat().join(""), Tt.types.MULTILINE);
  }, My = function(F) {
    return new Tt(F.flat().join(""), Tt.types.MULTILINE);
  }, Oy = function(F) {
    return new Tt(F.flat().join(""), Tt.types.INLINE);
  }, L = 0, fr = 0, ki = [{ line: 1, column: 1 }], kt = 0, js = [], we = 0, Gi;
  if ("startRule" in e) {
    if (!(e.startRule in a))
      throw new Error(`Can't start parsing from rule "` + e.startRule + '".');
    i = a[e.startRule];
  }
  function Vi() {
    return r.substring(fr, L);
  }
  function qe(F, J) {
    return { type: "literal", text: F, ignoreCase: J };
  }
  function hn(F, J, ne) {
    return { type: "class", parts: F, inverted: J, ignoreCase: ne };
  }
  function Ty() {
    return { type: "any" };
  }
  function By() {
    return { type: "end" };
  }
  function eu(F) {
    return { type: "other", description: F };
  }
  function Ml(F) {
    var J = ki[F], ne;
    if (J)
      return J;
    for (ne = F - 1; !ki[ne]; )
      ne--;
    for (J = ki[ne], J = {
      line: J.line,
      column: J.column
    }; ne < F; )
      r.charCodeAt(ne) === 10 ? (J.line++, J.column = 1) : J.column++, ne++;
    return ki[F] = J, J;
  }
  function Ol(F, J, ne) {
    var ce = Ml(F), Se = Ml(J), Fe = {
      source: n,
      start: {
        offset: F,
        line: ce.line,
        column: ce.column
      },
      end: {
        offset: J,
        line: Se.line,
        column: Se.column
      }
    };
    return ne && n && typeof n.offset == "function" && (Fe.start = n.offset(Fe.start), Fe.end = n.offset(Fe.end)), Fe;
  }
  function Te(F) {
    L < kt || (L > kt && (kt = L, js = []), js.push(F));
  }
  function _y(F, J, ne) {
    return new Za(
      Za.buildMessage(F, J),
      F,
      J,
      ne
    );
  }
  function Tl() {
    var F;
    return F = gn(), F;
  }
  function Fy() {
    var F, J, ne, ce, Se, Fe, vr, Ar, Mt;
    if (F = L, r.charCodeAt(L) === 123 ? (J = o, L++) : (J = t, we === 0 && Te(Ae)), J !== t)
      if (Nr(), ne = gn(), ne !== t) {
        for (ce = [], Se = L, Fe = Nr(), r.charCodeAt(L) === 44 ? (vr = f, L++) : (vr = t, we === 0 && Te(We)), vr !== t ? (Ar = Nr(), Mt = gn(), Mt !== t ? (Fe = [Fe, vr, Ar, Mt], Se = Fe) : (L = Se, Se = t)) : (L = Se, Se = t); Se !== t; )
          ce.push(Se), Se = L, Fe = Nr(), r.charCodeAt(L) === 44 ? (vr = f, L++) : (vr = t, we === 0 && Te(We)), vr !== t ? (Ar = Nr(), Mt = gn(), Mt !== t ? (Fe = [Fe, vr, Ar, Mt], Se = Fe) : (L = Se, Se = t)) : (L = Se, Se = t);
        if (Se = Nr(), r.charCodeAt(L) === 125 ? (Fe = l, L++) : (Fe = t, we === 0 && Te(er)), Fe !== t) {
          for (vr = [], Ar = Hi(); Ar !== t; )
            vr.push(Ar), Ar = Hi();
          Ar = $l(), fr = F, F = ey(ne, ce, vr, Ar);
        } else
          L = F, F = t;
      } else
        L = F, F = t;
    else
      L = F, F = t;
    return F;
  }
  function $y() {
    var F, J, ne, ce;
    if (F = L, J = Ry(), J === t && (J = Iy(), J === t && (J = Py())), J !== t) {
      for (ne = [], ce = Hi(); ce !== t; )
        ne.push(ce), ce = Hi();
      ce = $l(), fr = F, F = ry(J, ne, ce);
    } else
      L = F, F = t;
    return F;
  }
  function Ry() {
    var F, J, ne, ce;
    return F = L, J = Zi(), J === t && (J = null), r.charCodeAt(L) === 100 ? (ne = u, L++) : (ne = t, we === 0 && Te(Re)), ne !== t ? (ce = Zi(), ce !== t ? (fr = F, F = ty(J, ce)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function Iy() {
    var F, J, ne;
    return F = L, J = Zi(), J === t && (J = null), r.substr(L, 2) === s ? (ne = s, L += 2) : (ne = t, we === 0 && Te(wr)), ne !== t ? (fr = F, F = ny(J)) : (L = F, F = t), F;
  }
  function Py() {
    var F, J, ne, ce, Se, Fe;
    return F = L, J = Zi(), J === t && (J = null), r.substr(L, 2) === c ? (ne = c, L += 2) : (ne = t, we === 0 && Te(M)), ne !== t ? (ce = L, r.charCodeAt(L) === 46 ? (Se = m, L++) : (Se = t, we === 0 && Te(X)), Se !== t ? (V.test(r.charAt(L)) ? (Fe = r.charAt(L), L++) : (Fe = t, we === 0 && Te(se)), Fe !== t ? (Se = [Se, Fe], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t), ce === t && (ce = null), fr = F, F = ay(J, ce)) : (L = F, F = t), F;
  }
  function Hi() {
    var F;
    return F = qy(), F === t && (F = Ly(), F === t && (F = zy(), F === t && (F = Uy(), F === t && (F = Vy(), F === t && (F = Hy(), F === t && (F = Zy(), F === t && (F = Yy(), F === t && (F = Wy(), F === t && (F = ky(), F === t && (F = Gy())))))))))), F;
  }
  function qy() {
    var F, J, ne, ce, Se;
    return F = L, r.charCodeAt(L) === 33 ? (J = v, L++) : (J = t, we === 0 && Te(Ee)), J !== t ? (r.charCodeAt(L) === 33 ? (ne = v, L++) : (ne = t, we === 0 && Te(Ee)), ne === t && (ne = null), r.charCodeAt(L) === 112 ? (ce = d, L++) : (ce = t, we === 0 && Te(ze)), ce === t && (ce = null), Se = zn(), Se === t && (Se = null), fr = F, F = iy(ne, ce, Se)) : (L = F, F = t), F;
  }
  function Ly() {
    var F, J, ne;
    return F = L, J = zn(), J !== t ? (ne = Jy(), ne === t && (ne = null), fr = F, F = oy(J, ne)) : (L = F, F = t), F;
  }
  function zy() {
    var F, J, ne, ce;
    return F = L, r.charCodeAt(L) === 100 ? (J = u, L++) : (J = t, we === 0 && Te(Re)), J !== t ? (ee.test(r.charAt(L)) ? (ne = r.charAt(L), L++) : (ne = t, we === 0 && Te(Ve)), ne === t && (ne = null), ce = tu(), ce !== t ? (fr = F, F = sy(ne, ce)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function Uy() {
    var F, J, ne, ce;
    return F = L, r.charCodeAt(L) === 107 ? (J = p, L++) : (J = t, we === 0 && Te(Kr)), J !== t ? (ee.test(r.charAt(L)) ? (ne = r.charAt(L), L++) : (ne = t, we === 0 && Te(Ve)), ne === t && (ne = null), ce = tu(), ce !== t ? (fr = F, F = uy(ne, ce)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function ky() {
    var F, J, ne;
    return F = L, r.substr(L, 3) === b ? (J = b, L += 3) : (J = t, we === 0 && Te(ca)), J !== t ? (ne = Un(), ne !== t ? (fr = F, F = cy(ne)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function Gy() {
    var F, J, ne;
    return F = L, r.substr(L, 3) === g ? (J = g, L += 3) : (J = t, we === 0 && Te(qi)), J !== t ? (ne = Un(), ne !== t ? (fr = F, F = ly(ne)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function Vy() {
    var F, J, ne, ce;
    return F = L, r.charCodeAt(L) === 114 ? (J = N, L++) : (J = t, we === 0 && Te(Os)), J !== t ? (r.charCodeAt(L) === 111 ? (ne = h, L++) : (ne = t, we === 0 && Te(Li)), ne === t && (ne = null), ce = zn(), ce === t && (ce = null), fr = F, F = fy(ne, ce)) : (L = F, F = t), F;
  }
  function Hy() {
    var F, J, ne, ce;
    return F = L, r.charCodeAt(L) === 117 ? (J = w, L++) : (J = t, we === 0 && Te(Ts)), J !== t ? (r.charCodeAt(L) === 111 ? (ne = h, L++) : (ne = t, we === 0 && Te(Li)), ne === t && (ne = null), ce = zn(), ce === t && (ce = null), fr = F, F = my(ne, ce)) : (L = F, F = t), F;
  }
  function Zy() {
    var F, J, ne;
    return F = L, r.substr(L, 2) === x ? (J = x, L += 2) : (J = t, we === 0 && Te(Bs)), J !== t ? (ne = zn(), ne === t && (ne = null), fr = F, F = vy(ne)) : (L = F, F = t), F;
  }
  function Yy() {
    var F, J, ne;
    return F = L, r.substr(L, 2) === y ? (J = y, L += 2) : (J = t, we === 0 && Te(_s)), J !== t ? (ne = zn(), ne === t && (ne = null), fr = F, F = py(ne)) : (L = F, F = t), F;
  }
  function Wy() {
    var F, J, ne;
    return F = L, r.charCodeAt(L) === 115 ? (J = E, L++) : (J = t, we === 0 && Te(Fs)), J !== t ? (r.charCodeAt(L) === 97 ? (ne = D, L++) : (ne = t, we === 0 && Te($s)), ne === t && (r.charCodeAt(L) === 100 ? (ne = u, L++) : (ne = t, we === 0 && Te(Re))), ne === t && (ne = null), fr = F, F = dy(ne)) : (L = F, F = t), F;
  }
  function Jy() {
    var F, J, ne;
    return F = L, r.charCodeAt(L) === 102 ? (J = S, L++) : (J = t, we === 0 && Te(Rs)), J !== t ? (ne = zn(), ne !== t ? (fr = F, F = hy(ne)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function zn() {
    var F, J, ne;
    return F = L, J = Xy(), J !== t ? (ne = Un(), ne !== t ? (fr = F, F = gy(J, ne)) : (L = F, F = t)) : (L = F, F = t), F;
  }
  function Xy() {
    var F;
    return r.substr(L, 2) === A ? (F = A, L += 2) : (F = t, we === 0 && Te(Is)), F === t && (r.substr(L, 2) === C ? (F = C, L += 2) : (F = t, we === 0 && Te(Ps)), F === t && (r.substr(L, 2) === T ? (F = T, L += 2) : (F = t, we === 0 && Te(qs)), F === t && (r.charCodeAt(L) === 61 ? (F = $, L++) : (F = t, we === 0 && Te(Ls)), F === t && (r.substr(L, 2) === I ? (F = I, L += 2) : (F = t, we === 0 && Te(zs)), F === t && (r.charCodeAt(L) === 62 ? (F = R, L++) : (F = t, we === 0 && Te(Us)), F === t && (r.charCodeAt(L) === 60 ? (F = B, L++) : (F = t, we === 0 && Te(ks)))))))), F;
  }
  function Zi() {
    var F, J, ne, ce, Se, Fe, vr, Ar, Mt, va;
    if (F = tu(), F === t)
      if (F = L, r.charCodeAt(L) === 40 ? (J = O, L++) : (J = t, we === 0 && Te(la)), J !== t) {
        if (Nr(), ne = L, ce = Un(), ce !== t) {
          if (Se = [], Fe = L, vr = Nr(), Ar = Yi(), Ar !== t ? (Mt = Nr(), va = Un(), va !== t ? (vr = [vr, Ar, Mt, va], Fe = vr) : (L = Fe, Fe = t)) : (L = Fe, Fe = t), Fe !== t)
            for (; Fe !== t; )
              Se.push(Fe), Fe = L, vr = Nr(), Ar = Yi(), Ar !== t ? (Mt = Nr(), va = Un(), va !== t ? (vr = [vr, Ar, Mt, va], Fe = vr) : (L = Fe, Fe = t)) : (L = Fe, Fe = t);
          else
            Se = t;
          Se !== t ? (ce = [ce, Se], ne = ce) : (L = ne, ne = t);
        } else
          L = ne, ne = t;
        ne !== t ? (ce = Nr(), r.charCodeAt(L) === 41 ? (Se = G, L++) : (Se = t, we === 0 && Te(fa)), Se !== t ? (fr = F, F = yy()) : (L = F, F = t)) : (L = F, F = t);
      } else
        L = F, F = t;
    return F;
  }
  function gn() {
    var F, J, ne, ce, Se, Fe, vr, Ar;
    if (F = L, J = ru(), J !== t) {
      for (ne = [], ce = L, Se = Nr(), Fe = Yi(), Fe !== t ? (vr = Nr(), Ar = ru(), Ar !== t ? (Se = [Se, Fe, vr, Ar], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t); ce !== t; )
        ne.push(ce), ce = L, Se = Nr(), Fe = Yi(), Fe !== t ? (vr = Nr(), Ar = ru(), Ar !== t ? (Se = [Se, Fe, vr, Ar], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t);
      fr = F, F = by(J, ne);
    } else
      L = F, F = t;
    return F;
  }
  function ru() {
    var F, J, ne, ce;
    return F = Ky(), F === t && (F = $y(), F === t && (F = Un(), F === t && (F = L, r.charCodeAt(L) === 40 ? (J = O, L++) : (J = t, we === 0 && Te(la)), J !== t ? (Nr(), ne = gn(), ne !== t ? (Nr(), r.charCodeAt(L) === 41 ? (ce = G, L++) : (ce = t, we === 0 && Te(fa)), ce !== t ? (fr = F, F = xy(J, ne, ce)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t), F === t && (F = Fy())))), F;
  }
  function Ky() {
    var F, J, ne, ce, Se, Fe, vr;
    return F = L, r.substr(L, 3) === _ ? (J = _, L += 3) : (J = t, we === 0 && Te(Gs)), J === t && (r.substr(L, 4) === U ? (J = U, L += 4) : (J = t, we === 0 && Te(Vs)), J === t && (r.substr(L, 3) === K ? (J = K, L += 3) : (J = t, we === 0 && Te(Hs)), J === t && (r.substr(L, 3) === j ? (J = j, L += 3) : (J = t, we === 0 && Te(Zs)), J === t && (r.substr(L, 5) === z ? (J = z, L += 5) : (J = t, we === 0 && Te(Ys)), J === t && (r.substr(L, 3) === Q ? (J = Q, L += 3) : (J = t, we === 0 && Te(Ws)), J === t && (r.substr(L, 5) === ae ? (J = ae, L += 5) : (J = t, we === 0 && Te(Js)), J === t && (r.substr(L, 4) === re ? (J = re, L += 4) : (J = t, we === 0 && Te(Ln)), J === t && (r.substr(L, 3) === fe ? (J = fe, L += 3) : (J = t, we === 0 && Te(lr)), J === t && (r.substr(L, 4) === de ? (J = de, L += 4) : (J = t, we === 0 && Te(Vr)), J === t && (r.substr(L, 3) === le ? (J = le, L += 3) : (J = t, we === 0 && Te(Xs)))))))))))), J !== t ? (r.charCodeAt(L) === 40 ? (ne = O, L++) : (ne = t, we === 0 && Te(la)), ne !== t ? (Nr(), ce = gn(), ce !== t ? (Nr(), r.charCodeAt(L) === 41 ? (Se = G, L++) : (Se = t, we === 0 && Te(fa)), Se !== t ? (fr = F, F = wy(J, ce)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t), F === t && (F = L, r.substr(L, 3) === ie ? (J = ie, L += 3) : (J = t, we === 0 && Te(ma)), J === t && (r.substr(L, 3) === b ? (J = b, L += 3) : (J = t, we === 0 && Te(ca)), J === t && (r.substr(L, 3) === g ? (J = g, L += 3) : (J = t, we === 0 && Te(qi)))), J !== t ? (r.charCodeAt(L) === 40 ? (ne = O, L++) : (ne = t, we === 0 && Te(la)), ne !== t ? (Nr(), ce = gn(), ce !== t ? (Nr(), r.charCodeAt(L) === 44 ? (Se = f, L++) : (Se = t, we === 0 && Te(We)), Se !== t ? (Nr(), Fe = gn(), Fe !== t ? (Nr(), r.charCodeAt(L) === 41 ? (vr = G, L++) : (vr = t, we === 0 && Te(fa)), vr !== t ? (fr = F, F = Ny(J, ce, Fe)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t)) : (L = F, F = t)), F;
  }
  function Un() {
    var F, J, ne, ce, Se;
    return F = L, r.charCodeAt(L) === 45 ? L++ : we === 0 && Te(dn), J = Bl(), J !== t ? (ne = L, ue.test(r.charAt(L)) ? (ce = r.charAt(L), L++) : (ce = t, we === 0 && Te(Ks)), ce !== t ? (Se = Bl(), Se !== t ? (ce = [ce, Se], ne = ce) : (L = ne, ne = t)) : (L = ne, ne = t), ne === t && (ne = null), fr = F, F = Ay()) : (L = F, F = t), F;
  }
  function tu() {
    var F, J, ne, ce;
    if (F = L, pe.test(r.charAt(L)) ? (J = r.charAt(L), L++) : (J = t, we === 0 && Te(P1)), J !== t) {
      for (ne = [], me.test(r.charAt(L)) ? (ce = r.charAt(L), L++) : (ce = t, we === 0 && Te(zi)); ce !== t; )
        ne.push(ce), me.test(r.charAt(L)) ? (ce = r.charAt(L), L++) : (ce = t, we === 0 && Te(zi));
      fr = F, F = Ey();
    } else
      L = F, F = t;
    return F;
  }
  function Bl() {
    var F, J, ne;
    if (F = L, J = [], me.test(r.charAt(L)) ? (ne = r.charAt(L), L++) : (ne = t, we === 0 && Te(zi)), ne !== t)
      for (; ne !== t; )
        J.push(ne), me.test(r.charAt(L)) ? (ne = r.charAt(L), L++) : (ne = t, we === 0 && Te(zi));
    else
      J = t;
    return J !== t && (fr = F, J = Dy()), F = J, F;
  }
  function Yi() {
    var F, J;
    return F = L, r.substr(L, 2) === _e ? (J = _e, L += 2) : (J = t, we === 0 && Te(q1)), J !== t && (fr = F, J = Sy()), F = J, F === t && (r.charCodeAt(L) === 42 ? (F = De, L++) : (F = t, we === 0 && Te(L1)), F === t && (r.charCodeAt(L) === 94 ? (F = Be, L++) : (F = t, we === 0 && Te(z1)), F === t && (r.charCodeAt(L) === 37 ? (F = k, L++) : (F = t, we === 0 && Te(U1)), F === t && (r.charCodeAt(L) === 47 ? (F = Z, L++) : (F = t, we === 0 && Te(k1)), F === t && (r.charCodeAt(L) === 43 ? (F = oe, L++) : (F = t, we === 0 && Te(G1)), F === t && (r.charCodeAt(L) === 45 ? (F = ye, L++) : (F = t, we === 0 && Te(dn)))))))), F;
  }
  function _l() {
    var F;
    return we++, F = Qy(), F === t && (F = jy()), we--, F === t && we === 0 && Te(V1), F;
  }
  function Qy() {
    var F, J, ne, ce, Se, Fe;
    if (F = L, r.substr(L, 2) === H ? (J = H, L += 2) : (J = t, we === 0 && Te(H1)), J !== t) {
      for (ne = [], ce = L, Se = L, we++, r.substr(L, 2) === W ? (Fe = W, L += 2) : (Fe = t, we === 0 && Te(Qs)), we--, Fe === t ? Se = void 0 : (L = Se, Se = t), Se !== t ? (r.length > L ? (Fe = r.charAt(L), L++) : (Fe = t, we === 0 && Te(Ui)), Fe !== t ? (Se = [Se, Fe], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t); ce !== t; )
        ne.push(ce), ce = L, Se = L, we++, r.substr(L, 2) === W ? (Fe = W, L += 2) : (Fe = t, we === 0 && Te(Qs)), we--, Fe === t ? Se = void 0 : (L = Se, Se = t), Se !== t ? (r.length > L ? (Fe = r.charAt(L), L++) : (Fe = t, we === 0 && Te(Ui)), Fe !== t ? (Se = [Se, Fe], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t);
      r.substr(L, 2) === W ? (ce = W, L += 2) : (ce = t, we === 0 && Te(Qs)), ce !== t ? (fr = F, F = Cy(ne)) : (L = F, F = t);
    } else
      L = F, F = t;
    if (F === t)
      if (F = L, r.charCodeAt(L) === 91 ? (J = te, L++) : (J = t, we === 0 && Te(Z1)), J !== t) {
        for (ne = [], Ne.test(r.charAt(L)) ? (ce = r.charAt(L), L++) : (ce = t, we === 0 && Te(Cl)); ce !== t; )
          ne.push(ce), Ne.test(r.charAt(L)) ? (ce = r.charAt(L), L++) : (ce = t, we === 0 && Te(Cl));
        r.charCodeAt(L) === 93 ? (ce = ge, L++) : (ce = t, we === 0 && Te(Y1)), ce !== t ? (fr = F, F = My(ne)) : (L = F, F = t);
      } else
        L = F, F = t;
    return F;
  }
  function jy() {
    var F, J, ne, ce, Se, Fe;
    if (F = L, r.substr(L, 2) === ve ? (J = ve, L += 2) : (J = t, we === 0 && Te(W1)), J === t && (r.charCodeAt(L) === 35 ? (J = P, L++) : (J = t, we === 0 && Te(J1))), J !== t) {
      for (ne = [], ce = L, Se = L, we++, Fe = Fl(), we--, Fe === t ? Se = void 0 : (L = Se, Se = t), Se !== t ? (r.length > L ? (Fe = r.charAt(L), L++) : (Fe = t, we === 0 && Te(Ui)), Fe !== t ? (Se = [Se, Fe], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t); ce !== t; )
        ne.push(ce), ce = L, Se = L, we++, Fe = Fl(), we--, Fe === t ? Se = void 0 : (L = Se, Se = t), Se !== t ? (r.length > L ? (Fe = r.charAt(L), L++) : (Fe = t, we === 0 && Te(Ui)), Fe !== t ? (Se = [Se, Fe], ce = Se) : (L = ce, ce = t)) : (L = ce, ce = t);
      fr = F, F = Oy(ne);
    } else
      L = F, F = t;
    return F;
  }
  function Fl() {
    var F;
    return be.test(r.charAt(L)) ? (F = r.charAt(L), L++) : (F = t, we === 0 && Te(X1)), F;
  }
  function Wi() {
    var F;
    return we++, Oe.test(r.charAt(L)) ? (F = r.charAt(L), L++) : (F = t, we === 0 && Te(Q1)), we--, F === t && we === 0 && Te(K1), F;
  }
  function Nr() {
    var F, J;
    for (F = [], J = Wi(); J !== t; )
      F.push(J), J = Wi();
    return F;
  }
  function $l() {
    var F, J;
    for (we++, F = [], J = Wi(), J === t && (J = _l()); J !== t; )
      F.push(J), J = Wi(), J === t && (J = _l());
    return we--, J = t, we === 0 && Te(j1), F;
  }
  if (Gi = i(), Gi !== t && L === r.length)
    return Gi;
  throw Gi !== t && L < r.length && Te(By()), _y(
    js,
    kt < r.length ? r.charAt(kt) : null,
    kt < r.length ? Ol(kt, kt + 1) : Ol(kt, kt)
  );
}
class jd {
  /**
   * Parses the given dice notation and returns a list of dice and modifiers found
   *
   * @param {string} notation The notation to parse
   *
   * @returns {Array}
   *
   * @throws {RequiredArgumentError} Notation is required
   * @throws {SyntaxError} The notation syntax is invalid
   * @throws {TypeError} Notation must be a string
   */
  static parse(e) {
    if (!e)
      throw new At("notation");
    if (typeof e != "string")
      throw new TypeError("Notation must be a string");
    return dq(e);
  }
}
const wt = Object.freeze({
  BASE_64: 1,
  JSON: 0,
  OBJECT: 2
}), qu = Symbol("notation"), Lu = Symbol("maxTotal"), zu = Symbol("minTotal"), Aa = Symbol("expressions"), wo = Symbol("roll-method"), yn = Symbol("rolls"), eh = Symbol("set-rolls"), No = Symbol("total"), Uu = (r) => BP(r.calculationValue, 2);
class Fa {
  /* eslint-disable max-len */
  /**
   * Create a DiceRoll, parse the notation and roll the dice.
   *
   * If `notation` is an object, it must contain a `notation` property that defines the notation.
   * It can also have an optional array of `RollResults`, in the `rolls` property.
   *
   * @example <caption>String notation</caption>
   * const roll = new DiceRoll('4d6');
   *
   * @example <caption>Object</caption>
   * const roll = new DiceRoll({
   *   notation: '4d6',
   *   rolls: ..., // RollResults object or array of roll results
   * });
   *
   * @param {string|{notation: string, rolls: ResultGroup|Array.<ResultGroup|RollResults|string|number>}} notation The notation to roll
   * @param {string} notation.notation If `notation is an object; the notation to roll
   * @param {ResultGroup|Array.<ResultGroup|RollResults|string|number>} [notation.rolls] If
   * `notation` is an object; the rolls to import
   *
   * @throws {NotationError} notation is invalid
   * @throws {RequiredArgumentError} notation is required
   * @throws {TypeError} Rolls must be a valid result object, or an array
   */
  constructor(e) {
    if (!e)
      throw new At("notation");
    if (this[Aa] = [], e instanceof Object && !Array.isArray(e)) {
      if (e.notation) {
        if (typeof e.notation != "string")
          throw new Ko(e.notation);
        e.rolls && this[eh](e.rolls);
      } else
        throw new At("notation");
      this[qu] = e.notation, this[Aa] = jd.parse(this.notation), this.hasRolls() || this.roll();
    } else if (typeof e == "string")
      this[qu] = e, this[Aa] = jd.parse(this.notation), this.roll();
    else
      throw new Ko(e);
  }
  /* eslint-enable max-len */
  /**
   * The average possible total for the notation.
   *
   * @since 4.3.0
   *
   * @returns {number}
   */
  get averageTotal() {
    return (this.maxTotal + this.minTotal) / 2;
  }
  /**
   * The maximum possible total for the notation.
   *
   * @since 4.3.0
   *
   * @returns {number}
   */
  get maxTotal() {
    if (!this.hasExpressions())
      return 0;
    if (!this[Lu]) {
      const e = this[wo](Td.max);
      this[Lu] = Uu(e);
    }
    return this[Lu];
  }
  /**
   * The minimum possible total for the notation.
   *
   * @since 4.3.0
   *
   * @returns {number}
   */
  get minTotal() {
    if (!this.hasExpressions())
      return 0;
    if (!this[zu]) {
      const e = this[wo](Td.min);
      this[zu] = Uu(e);
    }
    return this[zu];
  }
  /**
   * The dice notation.
   *
   * @returns {string}
   */
  get notation() {
    return this[qu];
  }
  /**
   * String representation of the rolls
   *
   * @example
   * 2d20+1d6: [20,2]+[2] = 24
   *
   * @returns {string}
   */
  get output() {
    let e = `${this.notation}: `;
    return this.hasRolls() ? e += `${this[yn]} = ${this.total}` : e += "No dice rolled", e;
  }
  /**
   * The dice rolled for the notation
   *
   * @returns {Array.<ResultGroup|RollResults|string|number>}
   */
  get rolls() {
    return this[yn] ? this[yn].results : [];
  }
  /**
   * The roll total
   *
   * @returns {number}
   */
  get total() {
    return !this[No] && this.hasRolls() && (this[No] = Uu(this[yn])), this[No] || 0;
  }
  /**
   * Export the object in the given format.
   * If no format is specified, JSON is returned.
   *
   * @see {@link DiceRoll#toJSON}
   *
   * @param {exportFormats} [format=exportFormats.JSON] The format to export the data as
   *
   * @returns {string|null} The exported data, in the specified format
   *
   * @throws {TypeError} Invalid export format
   */
  export(e = wt.JSON) {
    switch (e) {
      case wt.BASE_64:
        return btoa(this.export(wt.JSON));
      case wt.JSON:
        return JSON.stringify(this);
      case wt.OBJECT:
        return JSON.parse(this.export(wt.JSON));
      default:
        throw new TypeError(`Invalid export format "${e}"`);
    }
  }
  /**
   * Check whether the DiceRoll has expressions or not.
   *
   * @returns {boolean} `true` if the object has expressions, `false` otherwise
   */
  hasExpressions() {
    return this[Aa] && this[Aa].length > 0;
  }
  /**
   * Check whether the object has rolled dice or not
   *
   * @returns {boolean} `true` if the object has rolls, `false` otherwise
   */
  hasRolls() {
    return this.hasExpressions() && this.rolls.length > 0;
  }
  /**
   * Roll the dice for the stored notation.
   *
   * This is called in the constructor, so you'll only need this if you want to re-roll the
   * notation. However, it's usually better to create a new `DiceRoll` instance instead.
   *
   * @returns {RollResults[]} The results of the rolls
   */
  roll() {
    return this[No] = 0, this[yn] = this[wo](), this.rolls;
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{
   *  output: string,
   *  total: number,
   *  minTotal: number,
   *  maxTotal: number,
   *  notation: string,
   *  rolls: RollResults[],
   *  type: string
   * }}
   */
  toJSON() {
    const {
      averageTotal: e,
      maxTotal: t,
      minTotal: n,
      notation: a,
      output: i,
      rolls: o,
      total: f
    } = this;
    return {
      averageTotal: e,
      maxTotal: t,
      minTotal: n,
      notation: a,
      output: i,
      rolls: o,
      total: f,
      type: "dice-roll"
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @returns {string}
   *
   * @see {@link DiceRoll#output}
   */
  toString() {
    return this.output;
  }
  /**
   * Create a new `DiceRoll` instance with the given data.
   *
   * `data` can be an object of data, a JSON / base64 encoded string of such data.
   *
   * The object must contain a `notation` property that defines the notation and, optionally, an
   * array of RollResults, in the `rolls` property.
   *
   * @example <caption>Object</caption>
   * DiceRoll.import({
   *   notation: '4d6',
   *   rolls: ..., // ResultGroup object or array of roll results
   * });
   *
   * @example <caption>JSON</caption>
   * DiceRoll.import('{"notation":"4d6","rolls":[...]}');
   *
   * @example <caption>Base64</caption>
   * DiceRoll.import('eyJub3RhdGlvbiI6IjRkNiIsInJvbGxzIjpbXX0=');
   *
   * @param {{notation: string, rolls: RollResults[]}|string} data The data to import
   * @param {string} data.notation If `notation` is an object; the notation to import
   * @param {RollResults[]} [data.rolls] If `notation` is an object; the rolls to import
   *
   * @returns {DiceRoll} The new `DiceRoll` instance
   *
   * @throws {DataFormatError} data format is invalid
   */
  static import(e) {
    if (e) {
      if ($1(e))
        return Fa.import(JSON.parse(e));
      if (F1(e))
        return Fa.import(atob(e));
      if (typeof e == "object")
        return new Fa(e);
      throw new Cs(e);
    } else
      throw new At("data");
  }
  /**
   * Roll the dice and return the result.
   *
   * If the engine is passed, it will be used for the number generation for **this roll only**.
   * The engine will be reset after use.
   *
   * @private
   *
   * @param {{next(): number}} [engine] The RNG engine to use for die rolls
   *
   * @returns {ResultGroup} The result of the rolls
   *
   * @throws {TypeError} engine must have function `next()`
   */
  [wo](e) {
    let t;
    e && (t = _a.engine, _a.engine = e);
    const n = new zr(this[Aa].map((a) => a instanceof Ha || a instanceof R1 ? a.roll() : a).filter((a) => !!a || a === 0));
    return e && (_a.engine = t), n;
  }
  /* eslint-disable max-len */
  /**
   * Set the rolls.
   *
   * @private
   *
   * @param {ResultGroup|Array.<ResultGroup|RollResults|string|number|{}|Array.<RollResult|number>>} rolls
   *
   * @throws {TypeError} Rolls must be a valid result object, or an array
   */
  [eh](e) {
    if (e instanceof zr)
      this[yn] = e;
    else if (e instanceof an)
      this[yn] = new zr([e]);
    else if (Array.isArray(e))
      this[yn] = new zr(e.map((t) => {
        if (t instanceof zr || t instanceof an)
          return t;
        if (Array.isArray(t))
          return new an(t);
        if (typeof t == "object") {
          if (Array.isArray(t.results))
            return new zr(
              t.results,
              t.modifiers || [],
              t.isRollGroup || !1,
              typeof t.useInTotal == "boolean" ? t.useInTotal : !0
            );
          if (Array.isArray(t.rolls))
            return new an(t.rolls);
        }
        return t;
      }));
    else
      throw new TypeError("Rolls must be a valid result object, or an array");
  }
  /* eslint-enable max-len */
}
const vi = Symbol("log");
class Sl {
  /**
   * Create a DiceRoller.
   *
   * The optional `data` property should be either an array of `DiceRoll` objects, or an object with
   * a `log` property that contains the `DiceRoll` objects.
   *
   * @param {{log: DiceRoll[]}|DiceRoll[]} [data] The data to import
   * @param {DiceRoll[]} [data.log] If `data` is an object, it must contain an array of `DiceRoll`s
   *
   * @throws {TypeError} if data is an object, it must have a `log[]` property
   */
  constructor(e) {
    this[vi] = [], e && this.import(e);
  }
  /**
   * The list of roll logs.
   *
   * @returns {DiceRoll[]}
   */
  get log() {
    return this[vi] || [];
  }
  /**
   * String representation of the rolls in the log
   *
   * @example
   * 2d20+1d6: [20,2]+[2] = 24; 1d8: [6] = 6
   *
   * @returns {string}
   */
  get output() {
    return this.log.join("; ");
  }
  /**
   * The sum of all the rolls in the log
   *
   * @see {@link DiceRoller#log}
   *
   * @returns {number}
   */
  get total() {
    return this.log.reduce((e, t) => e + t.total, 0);
  }
  /**
   * Clear the roll history log.
   *
   * @see {@link DiceRoller#log}
   */
  clearLog() {
    this[vi].length = 0;
  }
  /**
   * Export the object in the given format.
   * If no format is specified, JSON is returned.
   *
   * @see {@link DiceRoller#toJSON}
   *
   * @param {exportFormats} [format=exportFormats#JSON] The format to export the data as
   *
   * @returns {string|null} The exported data, in the specified format
   *
   * @throws {TypeError} Invalid export format
   */
  export(e = wt.JSON) {
    switch (e) {
      case wt.BASE_64:
        return btoa(this.export(wt.JSON));
      case wt.JSON:
        return JSON.stringify(this);
      case wt.OBJECT:
        return JSON.parse(this.export(wt.JSON));
      default:
        throw new TypeError(`Invalid export format "${e}"`);
    }
  }
  /**
   * Add the data to the existing [roll log]{@link DiceRoller#log}.
   *
   * `data` can be an array of `DiceRoll` objects, an object with a `log` property that contains
   * `DiceRoll` objects, or a JSON / base64 encoded representation of either.
   *
   * @see {@link DiceRoller#log}
   *
   * @param {string|{log: DiceRoll[]}|DiceRoll[]} data The data to import
   * @param {DiceRoll[]} [data.log] If `data` is an object, it must contain an array of `DiceRoll`s
   *
   * @returns {DiceRoll[]} The roll log
   *
   * @throws {DataFormatError} data format invalid
   * @throws {RequiredArgumentError} data is required
   * @throws {TypeError} log must be an array
   */
  import(e) {
    if (e) {
      if ($1(e))
        return this.import(JSON.parse(e));
      if (F1(e))
        return this.import(atob(e));
      if (typeof e == "object") {
        let t = e.log || null;
        if (!e.log && Array.isArray(e) && e.length && (t = e), t && Array.isArray(t))
          t.forEach((n) => {
            this[vi].push(Fa.import(n));
          });
        else if (t)
          throw new TypeError("log must be an array");
        return this.log;
      } else
        throw new Cs(e);
    } else
      throw new At("data");
  }
  /**
   * Roll the given dice notation(s) and return the corresponding `DiceRoll` objects.
   *
   * You can roll a single notation, or multiple at once.
   *
   * @example <caption>Single notation</caption>
   * diceRoller.roll('2d6');
   *
   * @example <caption>Multiple notations</caption>
   * roll('2d6', '4d10', 'd8+4d6');
   *
   * @param {...string} notations The notations to roll
   *
   * @returns {DiceRoll|DiceRoll[]} If a single notation is passed, a single `DiceRoll` is returned,
   * otherwise an array of `DiceRoll` objects is returned
   *
   * @throws {NotationError} notation is invalid
   * @throws {RequiredArgumentError} notation is required
   */
  roll(...e) {
    const t = e.filter(Boolean);
    if (t.length === 0)
      throw new At("notations");
    const n = t.map((a) => {
      const i = new Fa(a);
      return this[vi].push(i), i;
    });
    return n.length > 1 ? n : n[0];
  }
  /**
   * Return an object for JSON serialising.
   *
   * This is called automatically when JSON encoding the object.
   *
   * @returns {{output: string, total: number, log: DiceRoll[], type: string}}
   */
  toJSON() {
    const { log: e, output: t, total: n } = this;
    return {
      log: e,
      output: t,
      total: n,
      type: "dice-roller"
    };
  }
  /**
   * Return the String representation of the object.
   *
   * This is called automatically when casting the object to a string.
   *
   * @returns {string}
   *
   * @see {@link DiceRoller#output}
   */
  toString() {
    return this.output;
  }
  /**
   * Create a new `DiceRoller` instance with the given data.
   *
   * `data` can be an array of `DiceRoll` objects, an object with a `log` property that contains the
   * `DiceRoll` objects, or a JSON / base64 encoded representation of either.
   *
   * @see instance method {@link DiceRoller#import}
   *
   * @param {string|{log: DiceRoll[]}|DiceRoll[]} data The data to import
   * @param {DiceRoll[]} [data.log] If `data` is an object, it must contain an array of `DiceRoll`s
   *
   * @returns {DiceRoller} The new `DiceRoller` instance
   *
   * @throws {DataFormatError} data format invalid
   * @throws {RequiredArgumentError} data is required
   * @throws {TypeError} log must be an array
   */
  static import(e) {
    const t = new Sl();
    return t.import(e), t;
  }
}
const I1 = (r, e) => {
  const t = r.__vccOpts || r;
  for (const [n, a] of e)
    t[n] = a;
  return t;
}, rh = {
  DCC: [3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 30, 100],
  "D&D": [4, 6, 8, 10, 12, 20, 100]
}, hq = {
  name: "DiceTray",
  props: {
    //
  },
  data() {
    return {
      roller: {},
      player: null,
      rolls: [],
      system: null,
      diceTray: [],
      toggleDiceSelection: !1
    };
  },
  async created() {
    lu.onReady(() => {
      this.getPlayerInfo();
    }), this.roller = new Sl(), this.createDice();
  },
  computed: {
    systems() {
      return Object.keys(rh);
    },
    hasDiceSelected() {
      return this.diceTray.some((r) => r.count > 0);
    }
  },
  methods: {
    createDice() {
      this.diceTray = rh[this.system].map((r) => ({
        value: r,
        count: 0,
        show: !0
      }));
    },
    async getPlayerInfo() {
      const r = lu.player, e = await r.getName(), t = await r.getRole(), n = await r.getId();
      this.player = {
        name: e,
        role: t,
        id: n
      };
    },
    rollDice() {
      this.resetRolls(), this.diceTray.forEach((r) => {
        if (r.count > 0) {
          let e = this.roller.roll(`${r.count}d${r.value}`);
          this.rolls.push({
            dice: `d${r.value}`,
            total: e.total,
            output: e.output
          });
        }
      }), this.notify(), this.resetDice();
    },
    resetDice() {
      this.diceTray.forEach((r) => {
        r.count = 0;
      });
    },
    resetRolls() {
      this.rolls = [];
    },
    notify() {
      let r = this.player ? this.player.name : "PLAYER", e = this.rolls.reduce((i, o) => i + o.total, 0), t = `${r} rolled a ${e}!`, n = this.rolls.map((i) => i.output).join(`
`), a = `${t}
${n}`;
      console.log(a);
      try {
        lu.notification.show(a);
      } catch (i) {
        console.log(i);
      }
    }
  }
}, gq = (r) => (ib("data-v-ffa59fe8"), r = r(), ob(), r), yq = { class: "container-sm" }, bq = /* @__PURE__ */ gq(() => /* @__PURE__ */ rn("div", { class: "" }, " Custom Dice Roller ", -1)), xq = { class: "options py-4" }, wq = { key: 0 }, Nq = ["value"], Aq = { class: "mx-auto" }, Eq = { class: "flex flex-wrap" }, Dq = { key: 0 }, Sq = ["onClick"], Cq = { key: 1 }, Mq = ["onClick", "onContextmenu"], Oq = ["disabled"];
function Tq(r, e, t, n, a, i) {
  return Vt(), Qt("div", yq, [
    bq,
    rn("div", xq, [
      a.toggleDiceSelection ? (Vt(), Qt("div", wq, [
        tb(rn("select", {
          "onUpdate:modelValue": e[0] || (e[0] = (o) => a.system = o),
          onChange: e[1] || (e[1] = (...o) => i.createDice && i.createDice(...o))
        }, [
          (Vt(!0), Qt(Rl, null, Il(i.systems, (o) => (Vt(), Qt("option", { value: o }, Ji(o), 9, Nq))), 256))
        ], 544), [
          [nb, a.system]
        ])
      ])) : nu("", !0),
      rn("div", Aq, [
        rn("button", {
          onClick: e[2] || (e[2] = (o) => a.toggleDiceSelection = !a.toggleDiceSelection)
        }, "Select Dice")
      ])
    ]),
    rn("div", null, [
      rn("div", Eq, [
        (Vt(!0), Qt(Rl, null, Il(a.diceTray, (o) => (Vt(), Qt("div", {
          class: Pl({ "w-1/2": o.show && !a.toggleDiceSelection || a.toggleDiceSelection })
        }, [
          a.toggleDiceSelection ? (Vt(), Qt("div", Dq, [
            rn("button", {
              class: Pl(["dice-button btn", { show: o.show, hide: !o.show }]),
              onClick: (f) => o.show = !o.show
            }, "d" + Ji(o.value), 11, Sq)
          ])) : o.show && !a.toggleDiceSelection ? (Vt(), Qt("div", Cq, [
            rn("button", {
              class: "dice-button btn",
              onClick: (f) => o.count++,
              onContextmenu: ab((f) => o.count > 0 ? o.count-- : null, ["right", "prevent"])
            }, "d" + Ji(o.value) + ": " + Ji(o.count), 41, Mq)
          ])) : nu("", !0)
        ], 2))), 256))
      ]),
      a.toggleDiceSelection ? nu("", !0) : (Vt(), Qt("button", {
        key: 0,
        onClick: e[3] || (e[3] = (...o) => i.rollDice && i.rollDice(...o)),
        disabled: !i.hasDiceSelected
      }, "Roll", 8, Oq))
    ])
  ]);
}
const Bq = /* @__PURE__ */ I1(hq, [["render", Tq], ["__scopeId", "data-v-ffa59fe8"]]), _q = {
  __name: "App",
  setup(r) {
    return sb(), (e, t) => (Vt(), ub(Bq));
  }
}, Rq = /* @__PURE__ */ I1(_q, [["__scopeId", "data-v-1ae8fb99"]]);
export {
  Rq as DiceTray
};
